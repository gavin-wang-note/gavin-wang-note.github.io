I"?<h1 id="unittestpytestnoserobot-framework简介">unittest,pytest,nose,robot framework简介</h1>

<p>unittest: Python自带，最基础的单元测试框架</p>

<p>nose: 基于unittest开发，易用性好，有许多插件</p>

<p>pytest: 同样基于unittest开发，易用性好，信息更详细，插件众多</p>

<p>robot framework：一款基于Python语言的关键字驱动测试框架，有界面，功能完善，自带报告及log清晰美观</p>

<h1 id="对比">对比</h1>

<table>
  <thead>
    <tr>
      <th>项目</th>
      <th>unittest</th>
      <th>nose</th>
      <th>pytest</th>
      <th>robot framework</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>用例编写</td>
      <td>继承unittest.TestCase类需要组织各种testSuite断言种类繁多</td>
      <td>test开头的方法即可</td>
      <td>test开头的方法即可</td>
      <td>robot格式，文本文件</td>
    </tr>
    <tr>
      <td>执行器</td>
      <td>自己写run_all_tests+discover+CommandParser+…</td>
      <td>nosetests …</td>
      <td>py.test …</td>
      <td>pybot …</td>
    </tr>
    <tr>
      <td>用例发现Discover</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
    </tr>
    <tr>
      <td>跳过用例</td>
      <td>unittest.skip()unittest.skipIf()raise uniitest.SkipTest</td>
      <td>from nose.plugins.skip import SkipTestraise SkipTest</td>
      <td>@pytest.mark.skipif( condition)@pytest.mark.xfail</td>
      <td>-</td>
    </tr>
    <tr>
      <td>Fixtures</td>
      <td>setUp/tearDown@classmethodsetUpClass…</td>
      <td>支持</td>
      <td>@pytest.fixture(session=”session”, autouse=True)fixture的作用域：function、module、session ，autouse=True使得函数将默认执行</td>
      <td>[Setup] …[Teardown] …</td>
    </tr>
    <tr>
      <td>用例标签tags</td>
      <td>借助unittest.skip()+comandParser实现</td>
      <td>attrib标签from nose.plugins.attrib import attr@attr(speed=’slow’)def test_big_download(): pass$ nosetests -a speed=slow</td>
      <td>@pytest.mark.webtest自定义一个mark，如下，然后 py.test -v -m webtest 只运行标记了webtest的函数， py.test -v -m “not webtest” 来运行未标记webtest的</td>
      <td>[Tags] test level1pybot -i/–include tagName C:\TF-Testpybot -e/–exculde level1 *.robot排除</td>
    </tr>
    <tr>
      <td>超时机制Timeout</td>
      <td>自己实现</td>
      <td>from nose.tools import timedimport time@timed(1)def test_lean_5():time.sleep(2)pass</td>
      <td>pip install pytest-timeout@pytest.mark.timeout(60)或 pytest –timeout=300</td>
      <td>[Timeout] 3 seconds</td>
    </tr>
    <tr>
      <td>参数化</td>
      <td>结合ddt使用</td>
      <td>结合ddt使用</td>
      <td>@pytest.mark.parametrize(“a,b,expected”, testdata)def test_timedistance_v0(a, b, expected):diff = a - bassert diff == expected</td>
      <td>[Template] 1 2 3</td>
    </tr>
    <tr>
      <td>报告</td>
      <td>HTMLTestRunner</td>
      <td>pip install nose-htmloutput–with-html –html-file=</td>
      <td>pip install -U pytest-htmlpy.test –html=./report.html</td>
      <td>支持，默认自动生成</td>
    </tr>
    <tr>
      <td>日志log</td>
      <td>自己实现</td>
      <td>–nologcapture 不使用log–logging-format=FORMAT使用自定义的格式显示日志–logging-datefmt=FORMAT 和上面类类似，多了日期格式–logging-filter=FILTER日志过滤，一般很少用，可以不关注–logging-clear-handlers 也可以不关注–logging-level=DEFAULT log的等级定义</td>
      <td>pytest test_add.py –resultlog=./log.txtpytest test_add.py –pastebin=all</td>
      <td>支持，默认自动生成</td>
    </tr>
    <tr>
      <td>只列出用例collect-only</td>
      <td>无</td>
      <td>nosetests –collect-only/nosetests -v –with-id</td>
      <td>–collect-only -v</td>
      <td>-</td>
    </tr>
    <tr>
      <td>失败用例重跑rerun failures</td>
      <td>无</td>
      <td>nosetests -v –failed</td>
      <td>pip install -U pytest-rerunfailures@pytest.mark.flaky(reruns=5)py.test –rerun=3</td>
      <td>robot –rerunfailed</td>
    </tr>
    <tr>
      <td>baseline对比</td>
      <td>无</td>
      <td>无</td>
      <td>无</td>
      <td>无</td>
    </tr>
    <tr>
      <td>并发</td>
      <td>改造unittest使用协程并发，或使用线程池+Beautiful Report</td>
      <td>命令行并发</td>
      <td>pytest-xdist：分发到不用的cpu或机器上</td>
      <td>命令行并发</td>
    </tr>
    <tr>
      <td>xml报告</td>
      <td>无</td>
      <td>–with-xunit</td>
      <td>–xunit-file=… /pytest+Allure</td>
      <td>–junit-xml=</td>
    </tr>
    <tr>
      <td>Selenium支持</td>
      <td>无</td>
      <td>无</td>
      <td>pytest-selenium</td>
      <td>robotframework-seleniumlibraryrobotframwork-selenium2library</td>
    </tr>
  </tbody>
</table>

<h1 id="总结">总结</h1>

<p>总体来说，unittest比较基础，二次开发方便，适合高手使用；pytest/nose更加方便快捷，效率更高，适合小白及追求效率的公司；robot framework由于有界面及美观的报告，易用性更好，灵活性及可定制性略差。</p>

<h1 id="参考链接">参考链接</h1>

<p><code class="highlighter-rouge">https://www.cnblogs.com/bonelee/p/11122758.html</code></p>

:ET