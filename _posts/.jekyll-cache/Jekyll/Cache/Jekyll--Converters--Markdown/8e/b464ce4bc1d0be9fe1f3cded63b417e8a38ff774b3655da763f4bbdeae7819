I"j<h1 id="概述">概述</h1>

<p>之前一直用nose完成了产品的1000多个自动化用例，再来学习一下pytest。</p>

<p>本文基于Ubuntu16.04，介绍pytest+request+allure的安装与使用，并结合产品，给出具体示例。</p>

<h1 id="安装pytest测试所需lib与pytest-plugin">安装pytest、测试所需lib与pytest plugin</h1>

<h2 id="安装pytest">安装pytest</h2>

<p>升级python-pip</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install --upgrade pip
</code></pre></div></div>

<p>需要先升级python-pip，否则安装pytest可能会报：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:~# pip install -U pytest
Collecting pytest
  Downloading https://files.pythonhosted.org/packages/f0/5f/41376614e41f7cdee02d22d1aec1ea028301b4c6c4523a5f7ef8e960fe0b/pytest-5.3.5.tar.gz (990kB)
    100% |████████████████████████████████| 993kB 9.5kB/s 
  Running setup.py (path:/tmp/pip-build-lmAIQc/pytest/setup.py) egg_info for package pytest produced metadata for project name unknown. Fix your #egg=pytest fragments.
Collecting py&gt;=1.5.0 (from unknown)
  Downloading https://files.pythonhosted.org/packages/99/8d/21e1767c009211a62a8e3067280bfce76e89c9f876180308515942304d2d/py-1.8.1-py2.py3-none-any.whl (83kB)
    100% |████████████████████████████████| 92kB 12kB/s 
Collecting packaging (from unknown)
  Downloading https://files.pythonhosted.org/packages/98/42/87c585dd3b113c775e65fd6b8d9d0a43abe1819c471d7af702d4e01e9b20/packaging-20.1-py2.py3-none-any.whl
Collecting attrs&gt;=17.4.0 (from unknown)
  Downloading https://files.pythonhosted.org/packages/a2/db/4313ab3be961f7a763066401fb77f7748373b6094076ae2bda2806988af6/attrs-19.3.0-py2.py3-none-any.whl
Collecting more-itertools&gt;=4.0.0 (from unknown)
  Downloading https://files.pythonhosted.org/packages/a0/47/6ff6d07d84c67e3462c50fa33bf649cda859a8773b53dc73842e84455c05/more-itertools-8.2.0.tar.gz (82kB)
    100% |████████████████████████████████| 92kB 11kB/s 
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):
      File "&lt;string&gt;", line 1, in &lt;module&gt;
      File "/tmp/pip-build-lmAIQc/more-itertools/setup.py", line 5, in &lt;module&gt;
        from more_itertools import __version__
      File "/tmp/pip-build-lmAIQc/more-itertools/more_itertools/__init__.py", line 1, in &lt;module&gt;
        from .more import *  # noqa
      File "/tmp/pip-build-lmAIQc/more-itertools/more_itertools/more.py", line 480
        yield from iterable
                 ^
    SyntaxError: invalid syntax
    
    ----------------------------------------
Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-lmAIQc/more-itertools/
You are using pip version 8.1.1, however version 20.0.2 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
root@ubuntu16:~# 
</code></pre></div></div>

<p>成功升级python-pip后，安装pytest</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:~# pip install -U pytest
WARNING: pip is being invoked by an old script wrapper. This will fail in a future version of pip.
Please see https://github.com/pypa/pip/issues/5599 for advice on fixing the underlying issue.
To avoid this problem you can invoke Python with '-m pip' instead of running pip directly.
DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
Collecting pytest
  Downloading pytest-4.6.9-py2.py3-none-any.whl (231 kB)
     |████████████████████████████████| 231 kB 9.2 kB/s 
Collecting atomicwrites&gt;=1.0
  Downloading atomicwrites-1.3.0-py2.py3-none-any.whl (5.9 kB)
Collecting pluggy&lt;1.0,&gt;=0.12
  Downloading pluggy-0.13.1-py2.py3-none-any.whl (18 kB)
Collecting packaging
  Using cached packaging-20.1-py2.py3-none-any.whl (36 kB)
Collecting attrs&gt;=17.4.0
  Using cached attrs-19.3.0-py2.py3-none-any.whl (39 kB)
Collecting importlib-metadata&gt;=0.12; python_version &lt; "3.8"
  Downloading importlib_metadata-1.5.0-py2.py3-none-any.whl (30 kB)
Collecting six&gt;=1.10.0
  Downloading six-1.14.0-py2.py3-none-any.whl (10 kB)
Collecting funcsigs&gt;=1.0; python_version &lt; "3.0"
  Downloading funcsigs-1.0.2-py2.py3-none-any.whl (17 kB)
Collecting wcwidth
  Downloading wcwidth-0.1.8-py2.py3-none-any.whl (17 kB)
Collecting more-itertools&lt;6.0.0,&gt;=4.0.0; python_version &lt;= "2.7"
  Downloading more_itertools-5.0.0-py2-none-any.whl (52 kB)
     |████████████████████████████████| 52 kB 10 kB/s 
Collecting pathlib2&gt;=2.2.0; python_version &lt; "3.6"
  Downloading pathlib2-2.3.5-py2.py3-none-any.whl (18 kB)
Collecting py&gt;=1.5.0
  Using cached py-1.8.1-py2.py3-none-any.whl (83 kB)
Collecting pyparsing&gt;=2.0.2
  Downloading pyparsing-2.4.6-py2.py3-none-any.whl (67 kB)
     |████████████████████████████████| 67 kB 16 kB/s 
Collecting contextlib2; python_version &lt; "3"
  Downloading contextlib2-0.6.0.post1-py2.py3-none-any.whl (9.8 kB)
Collecting zipp&gt;=0.5
  Downloading zipp-1.1.0-py2.py3-none-any.whl (4.6 kB)
Collecting configparser&gt;=3.5; python_version &lt; "3"
  Downloading configparser-4.0.2-py2.py3-none-any.whl (22 kB)
Collecting scandir; python_version &lt; "3.5"
  Downloading scandir-1.10.0.tar.gz (33 kB)
Building wheels for collected packages: scandir
  Building wheel for scandir (setup.py) ... done
  Created wheel for scandir: filename=scandir-1.10.0-cp27-cp27mu-linux_x86_64.whl size=38910 sha256=318f6b008a74163b37a42f027091fa98a43455d9ea1e46866cd3f5851d74e271
  Stored in directory: /root/.cache/pip/wheels/58/2c/26/52406f7d1f19bcc47a6fbd1037a5f293492f5cf1d58c539edb
Successfully built scandir
Installing collected packages: atomicwrites, contextlib2, six, scandir, pathlib2, zipp, configparser, importlib-metadata, pluggy, pyparsing, packaging, attrs, funcsigs, wcwidth, more-itertools, py, pytest
Successfully installed atomicwrites-1.3.0 attrs-19.3.0 configparser-4.0.2 contextlib2-0.6.0.post1 funcsigs-1.0.2 importlib-metadata-1.5.0 more-itertools-5.0.0 packaging-20.1 pathlib2-2.3.5 pluggy-0.13.1 py-1.8.1 pyparsing-2.4.6 pytest-4.6.9 scandir-1.10.0 six-1.14.0 wcwidth-0.1.8 zipp-1.1.0
root@ubuntu16:~#
</code></pre></div></div>

<p>确认pytest版本</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:~# pytest --version
This is pytest version 4.6.9, imported from /usr/local/lib/python2.7/dist-packages/pytest.pyc
setuptools registered plugins:
  pytest-ssh-0.1 at /usr/local/lib/python2.7/dist-packages/pytest_ssh-0.1-py2.7.egg/pytest_ssh/plugin.py
root@ubuntu16:~# 
</code></pre></div></div>

<h2 id="安装pytest-progress">安装pytest-progress</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:~# pip install pytest-progress
</code></pre></div></div>

<h2 id="安装-pytest-sugar">安装 pytest-sugar</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:~# pip install pytest-sugar
</code></pre></div></div>

<h2 id="安装pytest-allure">安装pytest-allure</h2>

<p>注意，pytest-allure 与 pytest-allure-adaptor 互相冲突（https://blog.csdn.net/sinat_40831240/article/details/89711263），且pytest-allure-apaptor已经不维护了，建议安装pytest-allure。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:~# pip install allure-pytest
</code></pre></div></div>

<h2 id="安装测试所需的模块">安装测试所需的模块</h2>

<p>比如发起HTTP请求的request模块之类的，具体根据所需安装。</p>

<h1 id="使用过程中碰到的问题">使用过程中碰到的问题</h1>

<h2 id="request-insecurerequestwarning告警">request InsecureRequestWarning告警</h2>

<p>用例执行时，出现如下文所示的告警内容：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src# python -m pytest testcase/case_2_Accounts/test_common_account_settings.py
Test session starts (platform: linux2, Python 2.7.12, pytest 4.6.9, pytest-sugar 0.9.2)
rootdir: /home/pytest_framework/src
plugins: ssh-0.1, progress-1.2.1, metadata-1.8.0, sugar-0.9.2, html-1.22.1
collecting ... 
====================================================================================== warnings summary =======================================================================================
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:794
  /usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:794: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
    InsecureRequestWarning)

testcase/case_2_Accounts/test_common_account_settings.py:14
  /home/pytest_framework/src/testcase/case_2_Accounts/test_common_account_settings.py:14: PytestCollectionWarning: cannot collect test class 'TestCommonAccountSettings' because it has a __init__ constructor (from: testcase/case_2_Accounts/test_common_account_settings.py)
    class TestCommonAccountSettings(AccountManager):

-- Docs: https://docs.pytest.org/en/latest/warnings.html

Results (2.97s):
</code></pre></div></div>

<p>这里有两个告警，一个是request的，一个是测试用例的 __init__ constructor，</p>

<p>对于request</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
</code></pre></div></div>

<p>对于测试用例，在执行用例时，可以增加<code class="highlighter-rouge">-W ignore::pytest.PytestCollectionWarning</code>进行屏蔽
示例如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src# python -m pytest testcase/case_2_Accounts/test_common_account_settings.py -W ignore::pytest.PytestCollectionWarning
Test session starts (platform: linux2, Python 2.7.12, pytest 4.6.9, pytest-sugar 0.9.2)
rootdir: /home/pytest_framework/src
plugins: ssh-0.1, progress-1.2.1, metadata-1.8.0, sugar-0.9.2, html-1.22.1
collecting ... 

Results (1.77s):
</code></pre></div></div>

<p>参考链接如下：</p>

<p>https://stackoverflow.com/questions/58624641/how-to-prevent-pytestcollectionwarning-when-testing-class-testament-via-pytest</p>

<p>https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-python</p>

<p>pytest会跳过类中定义__init__()的用例</p>

<p>参考：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://stackoverflow.com/questions/21430900/py-test-skips-test-class-if-constructor-is-defined
</code></pre></div></div>

<p>文中有这么一段：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>py.test purposely skips classes which have a constructor. The reason for this is that classes are only used for structural reasons in py.test and do not have any inherent behaviour, while when actually writing code it is the opposite and much rarer to not have an .__init__() method for a class.
</code></pre></div></div>

<p>目前所写的测试用例并未通过增加<code class="highlighter-rouge">-W ignore::pytest.PytestCollectionWarning</code>参数来规避，而是契合上文提及的要求，避免在test case中出现__init__</p>

<h2 id="生成allure测试报告时找不到allure">生成allure测试报告时，找不到allure</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src# allure serve allure-results/
allure: command not found
root@ubuntu16:/home/pytest_framework/src# 
</code></pre></div></div>

<p>解决方法：</p>

<h3 id="在线安装">在线安装</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-add-repository ppa:qameta/allure
apt-get update 
apt-get install allure
</code></pre></div></div>

<h3 id="本地安装">本地安装</h3>

<p>下载allure-commandline（https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/2.13.2/）</p>

<p>将allure-commandline.tar.gz解压后，在python_3rd_lib目录下，有一个bin目录，目录下有allure和allure.bat</p>

<p>使用allure-command目录下的allure命令，将可执行文件allure拷贝到/usr/bin/目录下，执行allure会报错：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src# allure generate ../report/ -o ./allure-reports/
Error: Could not find or load main class ru.yandex.qatools.allure.CommandLine
</code></pre></div></div>

<p>将allure命令路径，写到配置~/.bashrc文件中：</p>

<p>Step1. 将解压后的allure-2.13.2目录，复制到/opt目录下</p>

<p>Step2. 修改~/.bashrc文件，增加如下一行</p>

<p><code class="highlighter-rouge">alias allure='/opt/allure-2.13.2/bin/allure'</code></p>

<p>Step3. Source一下~/.bashrc</p>

<p>至此，后面就可以直接使用allure命令了</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework# allure generate ./allure-results/ -o ./report/ --clean
Report successfully generated to ./report
root@ubuntu16:/home/pytest_framework# 
</code></pre></div></div>

<p>参考：</p>

<p><code class="highlighter-rouge">https://stackoverflow.com/questions/43875741/allure-command-not-found-on-linux</code></p>

<h2 id="使用allure生成报告时候提示没有java_home">使用allure生成报告时候，提示没有JAVA_HOME</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src# allure generate ../report/ -o ./allure-reports/
Could not find java implementation: try to set JAVA_HOME, JRE_HOME or add java to PATH
root@ubuntu16:/home/pytest_framework/src# 
</code></pre></div></div>

<p>这是因为allure是基于JAVA开发的，它的运行需要java的支持。</p>

<p>解决方法：</p>

<p>Step1、下载jdk相应版本，放入 /opt并解压</p>

<p>Step2、配置环境变量</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/profile
</code></pre></div></div>

<p>在最后加入(修改为自己的存放目录)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export JAVA_HOME=/opt/jdk1.8.0_161
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH
</code></pre></div></div>

<p>Step3、保存后source一下profile文件</p>

<p>执行 java –version显示如下即成功：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:~# source /etc/profile
root@ubuntu16:~# java -version
java version "1.8.0_161"
Java(TM) SE Runtime Environment (build 1.8.0_161-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)
root@ubuntu16:~# 
</code></pre></div></div>

<h2 id="allure报告空白">allure报告空白</h2>

<p>一打开index.html，显示空白（下图是window本地访问）：</p>

<p><img class="shadow" src="/img/in-post/allure_report_index_null.png" width="1200" /></p>

<p>解决方法：</p>

<p>参考： https://blog.csdn.net/feishicheng/article/details/91970402</p>

<p>allure使用了两种方式来渲染页面。分别是allure open 和 allure serve。前者用于在本地渲染和查看结果，后者用于在本地渲染后对外展示结果。这里我们使用allure open。运行命令 allure open allure-report即可自动打开浏览器展示渲染好的结果。这里的allure-report为allure generate生成的结果所在目录。</p>

<p>根据上面的方法，成功展示如下：</p>

<p><img class="shadow" src="/img/in-post/allure_cmd_bat.png" width="1200" /></p>

<p><img class="shadow" src="/img/in-post/allure_html_null.png" width="1200" /></p>

<p>对于Ubuntu来说，则是执行如下操作：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/report# allure generate json/ -o html --clean
Report successfully generated to html
root@ubuntu16:/home/pytest_framework/report# allure open html/
Starting web server...
2020-03-07 11:43:22.434:INFO::main: Logging initialized @490ms to org.eclipse.jetty.util.log.StdErrLog
Can not open browser because this capability is not supported on your platform. You can use the link below to open the report manually.
Server started at &lt;http://127.0.1.1:44307/&gt;. Press &lt;Ctrl+C&gt; to exit
</code></pre></div></div>

<h2 id="给allure-report中增加测试环境信息">给Allure report中增加测试环境信息</h2>

<p>在allure html report界面，有一项测试环境信息，如何展示被测环境的信息呢？</p>

<p><img class="shadow" src="/img/in-post/allure_report_env_null.png" width="1200" /></p>

<p>在allure html report生成前，在对应的json目录下增加environment.properties ：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/report/json# cat environment.properties 
Product=Scaler 7.0-889 (202002280200~2b00e3b44)
HostIP=172.17.75.97
StartTime=2020-03-02 17:58:56
EndTime=2020-03-03 20:04:25

root@ubuntu16:/home/pytest_framework/report/json# 
</code></pre></div></div>

<p>然后再生成allure html report：</p>

<p><img class="shadow" src="/img/in-post/allure_report_env_show.png" width="1200" /></p>

<h2 id="allure-html-report中不展示log的日期">Allure html report中不展示log的日期</h2>

<p>如下图所示，在查看测试用例运行日志时，log里面并没有日期记录，一旦测试用例失败，可以根据展示的日期，迅速判断问题发生前后时间点，根据前后时间点查找产品日志：</p>

<p><img class="shadow" src="/img/in-post/allure_report_no_time.png" width="1200" /></p>

<p>解决方法：</p>

<p>在pytest.ini文件中，增加了log_format &amp;&amp; log_data_format</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>log_format = %(asctime)s [%(filename)s:%(lineno)-4s] [%(levelname)5s] %(message)s
log_date_format=%Y-%m-%d %H:%M:%S
</code></pre></div></div>

<p>这样生成的allure html report中，就会有时间戳了：</p>

<p><img class="shadow" src="/img/in-post/allure_report_show_timestamp.png" width="1200" /></p>

<h2 id="allure-html-report中出现32m0m之类的符号">Allure html report中出现[32m、[0m之类的符号</h2>

<p>如下图所示：</p>

<p><img class="shadow" src="/img/in-post/allure_report_log_color.png" width="1200" /></p>

<p>查看了pytest的help信息，有这么一项：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--color=color         color terminal output (yes/no/auto).
</code></pre></div></div>

<p>在用例执行时，携带上这个参数（–color=no），则不会在report中展示这些符号了。</p>

<h2 id="allure-html-report-overview界面不显示类别和趋势">Allure html report Overview界面不显示类别和趋势</h2>

<p>没显示“Categories”，是因为只有在测试用例出错的情况下，这个区域才会显示；</p>

<p>没显示“Trend”，是因为需要与集成工具（比如jenkins）使用后方可展示。</p>

<h1 id="完整参数用例示例">完整参数用例示例</h1>

<h2 id="代码目录结构">代码目录结构</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework# ll
total 56
drwxr-xr-x 8 root root  4096 Mar  7 11:56 ./
drwxr-xr-x 4 root root  4096 Mar  7 11:55 ../
-rw-r--r-- 1 root root     0 Feb 21 11:20 __init__.py
drwxr-xr-x 3 root root  4096 Mar  4 14:03 python_3rd_lib/
drwxr-xr-x 4 root root  4096 Mar  7 11:43 report/
drwxr-xr-x 6 root root  4096 Mar  7 11:55 src/
root@ubuntu16:/home/pytest_framework#
root@ubuntu16:/home/pytest_framework# cd src
root@ubuntu16:/home/pytest_framework/src# ll
total 60
drwxr-xr-x 6 root root  4096 Mar  7 11:55 ./
drwxr-xr-x 8 root root  4096 Mar  7 11:56 ../
-rw-r--r-- 1 root root   579 Mar  2 13:46 clear_pyc.py
drwxr-xr-x 2 root root  4096 Mar  7 11:54 common/
drwxr-xr-x 2 root root  4096 Mar  5 11:37 config/
-rw-r--r-- 1 root root  1186 Mar  4 15:33 conftest.py
-rw-r--r-- 1 root root     0 Mar  2 13:46 __init__.py
-rw-r--r-- 1 root root 17511 Mar  2 13:46 .pylintrc
-rw-r--r-- 1 root root   472 Mar  7 10:53 pytest.ini
-rw-r--r-- 1 root root   291 Mar  4 14:06 run.py
drwxr-xr-x 3 root root  4096 Mar  7 11:54 testcase/
drwxr-xr-x 3 root root  4096 Mar  7 11:54 testcasebase/
root@ubuntu16:/home/pytest_framework/src# 
root@ubuntu16:/home/pytest_framework/src/common# ll
total 80
drwxr-xr-x 2 root root  4096 Mar  7 11:54 ./
drwxr-xr-x 6 root root  4096 Mar  7 11:55 ../
-rw-r--r-- 1 root root 18822 Mar  2 13:46 api.py
-rw-r--r-- 1 root root  6678 Mar  2 13:46 config.py
-rw-r--r-- 1 root root  4874 Mar  2 13:46 errors.py
-rw-r--r-- 1 root root  9727 Mar  2 13:46 http_session.py
-rw-r--r-- 1 root root     0 Mar  2 13:46 __init__.py
-rw-r--r-- 1 root root   741 Mar  2 13:46 path_util.py
-rw-r--r-- 1 root root  6296 Mar  3 15:05 ssh.py
-rw-r--r-- 1 root root  9462 Mar  2 13:46 util.py
root@ubuntu16:/home/pytest_framework/src/common# 
</code></pre></div></div>

<p>说明：</p>

<ul>
  <li>common目录下
    <ul>
      <li>
        <ul>
          <li>api.py 存放产品的API接口地址</li>
          <li>ssh.py 用来建立当前客户端到服务端的ssh链接；</li>
          <li>path_util.py 获取配置文件路径和测试报告路径</li>
          <li>util.py 常用函数的封装，比如创建指定长度的字符串、数字串、智能等待等</li>
          <li>http_session.py 封装发起不同类型的HTTP消息，以及返回结果</li>
          <li>errors.py 存放产品错误码，以及常见的HTTP返回状态码（200,401,500等）</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>testcase 存放具体测试用例，纯粹调用testcasebase的函数，所有的检查点，全部放在testcasebase中</li>
  <li>testcasebase 各个用例基类，构造http消息体，发送http请求，对请求结果做检测，对产品应用层做检测</li>
  <li>config目录，存放被测环境配置信息</li>
  <li>run.py 给jenkins使用，执行所有测试用例或指定用例的入口</li>
</ul>

<h2 id="主要文件内容">主要文件内容</h2>

<h3 id="conftestpy">conftest.py</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pytest
import logging

@pytest.fixture(scope='package', autouse=True)
def testsuite_setup_teardown():
    logging.info('------------------------------------- Start to run test case ---------------------------------\n')
    yield
    logging.info('------------------------------------- End to run test case------------------------------------')


@pytest.fixture(scope='function', autouse=True)
def testcase_setup_teardown():
    case_name = os.environ.get('PYTEST_CURRENT_TEST').split(':')[-1].split(' ')[0]

logging.info('----------------------------------- Begin ----------------------------------------')
logging.info('Current test case name : (%s)', case_name)
yield
logging.info('----------------------------------- End ------------------------------------------\n')
</code></pre></div></div>

<h3 id="pytestini">pytest.ini</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src# cat pytest.ini 
[pytest]
log_cli = false
log_level = NOTSET
log_file = ../report/pytest_autotest.log
log_format = %(asctime)s [%(filename)s:%(lineno)-4s] [%(levelname)5s] %(message)s
log_date_format=%Y-%m-%d %H:%M:%S
log_file_format = %(asctime)s [%(filename)s:%(lineno)-4s] [%(levelname)5s] %(message)s
log_file_date_format=%Y-%m-%d %H:%M:%S
log_cli_level = INFO
log_cli_format = %(asctime)s [%(filename)s:%(lineno)-4s] [%(levelname)5s] %(message)s
log_cli_date_format=%Y-%m-%d %H:%M:%S
root@ubuntu16:/home/pytest_framework/src#
</code></pre></div></div>

<h2 id="apipy部分内容">api.py部分内容</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src/common# cat api.py 
#!/usr/bin/env python
# -*- coding:UTF-8 -*-

"""  All of API """

from __future__ import unicode_literals

from config import GetConfig as config


class LoginInterface(object):
    """  Login API  """
login_interface = config.host + '/cgi/login?'

</code></pre></div></div>

<h2 id="测试用例基类示例">测试用例基类示例</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src/testcasebase/Account# cat account.py 
#!/usr/bin/env python
# -*- coding:UTF-8 -*-

"""  Account class base  """

from __future__ import unicode_literals

import json
import urllib
import logging
import requests

from common.http_session import HttpSession
from common.config import GetConfig as config
from common.errors import HttpCode, StatusCode
from common.api import LoginInterface, AccountInterface
from common.util import rand_low_ascii, assert_check, ssh_session


ETC_PASSWD = "/etc/passwd"


class AccountManager(object):
    """  Account manager test case base class  """

    session = HttpSession().login_session()

    @staticmethod
    def add_user_data(user_id=None, display_name=None, email=None, password=None, confirm_password=None,
                      account_type=None, account_dn=None):
        """
        add account data
        :param user_id, string, account id
        :param display_name, string, an account display name
        :param email, string, email address for an account
        :param password, int or string, password for an account
        :param confirm_password, int or string, password for an account
        :param account_type, string, account type
        :param account_dn, string, account dn
        """

        data = {
            'user_id': user_id,
            'display_name': display_name,
            'email': email,
            'password': password,
            'confirm_password': confirm_password,
            'type': account_type,
            'dn': account_dn
        }

        return data

    def add_user(self, user_id=None, display_name=None, email=None, password=None, confirm_password=None,
                 account_type=None, account_dn=None, expect_return_code=None, need_check=None):
        """
        add account
        :param user_id, string, account id
        :param display_name, string, an account display name
        :param email, string, email address for an account
        :param password, int or string, password for an account
        :param confirm_password, int or string, password for an account
        :param account_type, string, account type
        :param account_dn, string, account dn
        :param expect_return_code, string, expected http response content return code, default is success
        :param need_check, bool, check sync result or not, defualt value is True, it means check
        """
        user_id = rand_low_ascii(6) if user_id is None else user_id
        display_name = user_id if display_name is None else display_name
        email = rand_low_ascii() + u'@163.com' if email is None else email
        password = '1' if password is None else password
        confirm_password = password if confirm_password is None else confirm_password
        account_type = '' if account_type is None else account_type
        account_dn = '' if account_dn is None else account_dn
        expect_return_code = StatusCode.SUCCESS if expect_return_code is None else expect_return_code
        need_check = True if need_check is None else need_check

        add_user_url = AccountInterface().add_acount
        add_user_data = self.add_user_data(user_id=user_id,
                                           display_name=display_name,
                                           email=email,
                                           password=password,
                                           confirm_password=confirm_password,
                                           account_type=account_type,
                                           account_dn=account_dn)

        logging.info('[Action]   Start to add a user: (%s)', user_id)
        add_user_request = HttpSession().http_request(self.session, 'GET', add_user_url, params=add_user_data)

        logging.info('[Check]    Check add user : (%s) result', user_id)
        add_user_err_msg = '[ERROR] Add user account fail, background return: {}'.format(add_user_request.text)
        assert HttpCode.SUCCESS == add_user_request.status_code
        assert expect_return_code == json.loads(add_user_request.text)['return_code']

        if expect_return_code == StatusCode.SUCCESS:
            if account_type != "AD":
                if need_check is True:
                    self.check_user_sync_rados(user_id)
                    self.check_user_in_radosgw(user_id)
                    # self.check_user_sync_system(user_id)
                    self.check_user_sync_samba(user_id)
                    logging.info('[Success]  Add account : (%s) success.', user_id)
                else:
                    logging.info('[SKIP]     Need_check is : (%s), so no need to check', need_check)
            else:
                if need_check is True:
                    self.check_user_sync_rados(user_id)
                    logging.info('[Success]  Add AD/LDAP account success.')
                else:
                    logging.info('[SKIP]     Import user from AD/LDAP, but need_check is : (%s), '
                                 'so does not need to check', need_check)
            return user_id
        else:
            logging.info("[Abnormal Scene Test]  Add an account failed as expected, "
                         "backend return: (%s)", add_user_request.text)
            return

    @assert_check
    def check_user_sync_system(self, user_id, vs_name=None):
        """
        :param user_id, string, a user name
        :param vs_name, string, a virtual storage name
        """
        logging.info("[Check]   Start to check user : (%s) sync to system", user_id)

        # should not in /etc/passwd
        vs_name = 'Default' if vs_name is None else vs_name

        all_ctdb_nodes = get_ctdb_nodes(vs_name).strip()
        ctdb_nodes = list()

        for line in all_ctdb_nodes.split("\n"):
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            ctdb_nodes.append(line)

        for each_node in ctdb_nodes:
            cmd = "cat {} | grep {} | awk -F ':' '{{print $1}}'".format(each_node, ETC_PASSWD, user_id) 
            res_status, etc_passwd = ssh_session().run_cmd(cmd)
            logging.info("[Check]    [Add user]  Check user in : /etc/passwd on node : (%s)", each_node)
            err_msg = 'Found account : ({}) in /etc/passwd on node : ({})'.format(user_id, each_node)
            assert '' == etc_passwd.strip(), err_msg

    @assert_check
    def check_user_sync_samba(self, user_id):
        """
        :param user_id, string, a user name
        """
        logging.info("[Check]   Start to check user : (%s) sync to samba", user_id)

        # should not in samba
        res_status, ctdb_db_tmp = ssh_session().run_cmd("pdbedit -L | grep {}".format(user_id))
        ctdb_db_user = ctdb_db_tmp.split(":")

        logging.info("[Check]    [Add user]  Check user in samba: pdbedit -L | grep %s", user_id)
        err_msg = '[ERROR]  Found ({}) in samba'.format(user_id)
        assert '' == ctdb_db_user[0], err_msg

    @assert_check
    def check_user_sync_rados(self, user_id, op_type=None):
        """
        Check in rados
        :param user_id, string, a user name
        :param op_type, string, add or del
        """
        logging.info("[Check]    Start to check user : (%s) sync to rados", user_id)

        op_type = 'add' if op_type is None else op_type

        res_status, user_in_rados = ssh_session().run_cmd("rados -p default.rgw.users.uid ls | grep {}".format(user_id))

        logging.info("[Check]    [Add user]  Check user in rados : "
                     "rados -p default.rgw.users.uid ls | grep %s", user_id)
        if op_type == 'add':
            err_msg = '[ERROR]  Not found ({}) in rados'.format(user_id)
            assert user_id == user_in_rados.strip(), err_msg
        elif op_type == 'del':
            err_msg = '[ERROR]  Found ({}) in rados'.format(user_id)
            assert '' == user_in_rados.strip(), err_msg

    @assert_check
    def check_user_in_radosgw(self, user_id):
        """
        :param user_id, string, a user name
        """
        logging.info("[Check]   Start to check user : (%s) in radosgw", user_id)

        res_status, user_info = ssh_session().run_cmd("radosgw-admin --uid={} user info".format(user_id))
        assert user_id in user_info, "[ERROR]  Not found user in radosgw-admin, will retry again."

    @staticmethod
    def delete_user_data(user_id):
        """
        delete user, return HTTP get url
        :param user_id, string, account id
        """
        request_body = {'user_ids': '["' + user_id + '"]'}

        data = urllib.urlencode(request_body)
        return data

    def delete_user(self, user_id, expected_return_code=None, need_check=None):
        """
        delete user operation
        :param user_id, string, account id
        :param expected_return_code, strins, return status code
        :param need_check, bool, check account sync results
        """
        expected_return_code = StatusCode.SUCCESS if expected_return_code is None else expected_return_code
        need_check = True if need_check is None else need_check

        # logging.debug('Structure delete account HTTP message body')
        delete_user_url = AccountInterface().del_user
        delete_user_body = self.delete_user_data(user_id)

        logging.info('[Action]   Delete account : (%s)', user_id)
        for i in xrange(10):
            delete_user_res = HttpSession().http_request(self.session, 'POST', delete_user_url, data=delete_user_body)
            if json.loads(delete_user_res.text)['return_code'] == StatusCode.DELETE_USER_ERROR:
                # Delete user failed, KVStoreError: KVStoreError: fetching entry sds_admin_account timeout
                logging.warn("[Warn]  Delete user : (%s) failed, backend return : (%s)", user_id, delete_user_res.text)
                time.sleep(5)
            else:
                break

        logging.info('[Check]    Check delete user result.')

        delete_user_err_msg = "[ERROR]  Delete user failed, background return is {}".format(delete_user_res)
        assert HttpCode.SUCCESS == delete_user_res.status_code, delete_user_err_msg
        assert expected_return_code == json.loads(delete_user_res.text)['return_code'], delete_user_err_msg

        if need_check is True:
            self.check_user_sync_rados(user_id, op_type='del')
            logging.info('[Success]  Delete user : (%s) success.', user_id)
        else:
            logging.info("[SKIP]     Set need_check is : (%s), so no need to check", need_check)
root@ubuntu16:/home/pytest_framework/src/testcasebase/Account# 
</code></pre></div></div>

<h2 id="测试用例示例">测试用例示例</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src/testcase/case_2_Accounts# cat test_common_account_settings.py 
#!/usr/bin/env python

# -*- coding:UTF-8 -*-

"""  Test case of common account settings  """

from __future__ import unicode_literals

import allure
import logging

from common.errors import StatusCode
from testcasebase.Account.account import AccountManager


class TestCommonAccountSettings(AccountManager):
    """  test case for: common account settings  """
@allure.tag('RAT')
def test_add_user_success(self):
    """  Sc-48:Create new user  """
    user_id = self.add_user()
    self.delete_user(user_id)
</code></pre></div></div>

<h2 id="用例的执行">用例的执行</h2>

<p>示例如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu16:/home/pytest_framework/src# python clear_pyc.py; clear; PYTHONPATH=. py.test -v --cache-clear --alluredir ../report/json testcase/case_2_Accounts/test_common_account_settings.py 
</code></pre></div></div>

<h2 id="用例的执行入口">用例的执行入口</h2>

<p>通过调用run.py，完成环境的检查、相关包的安装、以及用例的执行。</p>

<p>运行环境是Ubuntu14.04，经过多次摸索，确定只能使用pytest-4.6.9，脚本具体内容如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
# -*- coding: utf-8 -*-
</span>
<span class="s">"""  Install package, ENV check and run test case  """</span>

<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">getopt</span>
<span class="kn">import</span> <span class="nn">shutil</span>
<span class="kn">import</span> <span class="nn">pexpect</span>

<span class="kn">from</span> <span class="nn">ezs3.cluster</span> <span class="kn">import</span> <span class="n">ClusterManager</span>
<span class="kn">from</span> <span class="nn">ezs3.utils</span> <span class="kn">import</span> <span class="n">get_storage_ip</span>
<span class="kn">from</span> <span class="nn">ezs3.notify_manager</span> <span class="kn">import</span> <span class="n">WebEventCache</span>
<span class="kn">from</span> <span class="nn">ezs3.command</span> <span class="kn">import</span> <span class="n">do_cmd</span><span class="p">,</span> <span class="n">DoCommandError</span>

<span class="kn">from</span> <span class="nn">common.cluster</span> <span class="kn">import</span> <span class="n">ClusterInfo</span><span class="p">,</span> <span class="n">OSCheck</span>
<span class="kn">from</span> <span class="nn">common.path_util</span> <span class="kn">import</span> <span class="n">get_report_path</span>
<span class="kn">from</span> <span class="nn">common.config</span> <span class="kn">import</span> <span class="n">GetConfig</span> <span class="k">as</span> <span class="n">config</span>


<span class="k">def</span> <span class="nf">clean_pyc</span><span class="p">():</span>
    <span class="s">"""  Clean pyc files  """</span>
    <span class="k">for</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">folders</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="s">'.'</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">each_file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="n">root</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">each_file</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">end</span> <span class="o">==</span> <span class="s">'.pyc'</span><span class="p">:</span>
                <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirs</span><span class="p">,</span> <span class="n">each_file</span><span class="p">)))</span>


<span class="k">def</span> <span class="nf">mkdir_report_path</span><span class="p">():</span>
    <span class="s">"""  Create report path if not exist   """</span>
    <span class="n">report_path</span> <span class="o">=</span> <span class="n">get_report_path</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">report_path</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">report_path</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">report_path</span>


<span class="k">def</span> <span class="nf">rm_sessions</span><span class="p">():</span>
    <span class="s">"""  Delete all session files in /tmp/sessions  """</span>
    <span class="n">sessions_path</span> <span class="o">=</span> <span class="s">"/tmp/sessions"</span>
    <span class="n">session_files_num</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">'ls -l {}/* | wc -l'</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">session_files_num</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">sessions_path</span><span class="p">):</span>
        <span class="n">storage_ip</span> <span class="o">=</span> <span class="n">get_storage_ip</span><span class="p">()</span>
        <span class="n">WebEventCache</span><span class="p">(</span><span class="n">storage_ip</span><span class="p">).</span><span class="n">clean_all</span><span class="p">()</span>
        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"rm {}/*"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">sessions_path</span><span class="p">),</span> <span class="mi">30</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">get_test_product_version</span><span class="p">():</span>
    <span class="s">"""
    Get product version for jenkins email content
    """</span>
    <span class="n">media_info</span> <span class="o">=</span> <span class="s">"/var/log/installer/media-info"</span>
    <span class="n">version</span> <span class="o">=</span> <span class="s">'/etc/ezs3/version'</span>

    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">media_info</span><span class="p">):</span>
        <span class="n">full_version</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">'cat {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">media_info</span><span class="p">),</span> <span class="mi">30</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">p_version</span> <span class="o">=</span> <span class="n">full_version</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="s">' '</span> <span class="o">+</span> <span class="n">full_version</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="s">' '</span> <span class="o">+</span> <span class="n">full_version</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">7</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">p_version</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">'cat {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">version</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="n">do_cmd</span><span class="p">(</span><span class="s">"echo '{}' &gt; ../report/version.txt"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">p_version</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">physical_or_vm</span><span class="p">(</span><span class="n">ip</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""
    Adjust the IP address is a physical machine or a VM
    :param ip, client IP or local host(if None)
    """</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="s">'dmidecode -s system-product-name | grep -v "#"'</span>
    <span class="k">if</span> <span class="n">ip</span><span class="p">:</span>
        <span class="n">client_ip_passwd</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_ip_root_password</span>
        <span class="n">port</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">ssh_port</span>
        <span class="n">client_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span>
        <span class="k">if</span> <span class="n">ip</span> <span class="o">!=</span> <span class="n">client_ip</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"    [ERROR]    The given IP : ({}) is not same as client IP in "</span> \
                  <span class="s">"autotest.config, exit!!!</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>

        <span class="n">dmidecode_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
        <span class="n">system_produce</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">dmidecode_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">system_produce</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">system_produce</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Not get the system product name for client ({}), make sure the</span><span class="se">\n</span><span class="s">"</span> \
              <span class="s">"                   client exist and power on</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="s">'VM'</span> <span class="ow">in</span> <span class="n">system_produce</span> <span class="ow">or</span> <span class="s">'Virtual'</span> <span class="ow">in</span> <span class="n">system_produce</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>


<span class="k">def</span> <span class="nf">append_write</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">add_content</span><span class="p">):</span>
    <span class="s">"""
    Append content to file
    :param file_name, string. a file name, needs full path
    :param add_content, string, some content which will added to file_name
    """</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s">'a'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">add_content</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">run_node_check</span><span class="p">():</span>
    <span class="s">"""  Check run node and configuration in autotest.conf   """</span>
    <span class="k">print</span> <span class="s">"[Step 1]  Check test case execution node.</span><span class="se">\n</span><span class="s">"</span>

    <span class="n">public_ips</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">public_ips</span>
    <span class="n">all_public_ips</span> <span class="o">=</span> <span class="n">public_ips</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">all_public_ips</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
    <span class="n">storage_ips</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">storage_ips</span>
    <span class="n">all_storage_ips</span> <span class="o">=</span> <span class="n">storage_ips</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">public_iface</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">public_iface</span>
    <span class="n">storage_iface</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">storage_iface</span>
    <span class="n">client_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span>
    <span class="n">client_ip_passwd</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_ip_root_password</span>
    <span class="n">port</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">ssh_port</span>

    <span class="c1"># Check the client, should install NFS and CIFS, need to remove old SSH to skip
</span>    <span class="c1"># error of "Permission denied (publickey,password)"
</span>    <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ssh-keygen -f '/root/.ssh/known_hosts' -R {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"    1-1 [Check]    Client : ({}) should install fio, multipath-tools, </span><span class="se">\n</span><span class="s">"</span> \
          <span class="s">"                   openssh-server, open-iscsi and  NFS and CIFS"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>

    <span class="n">grep_fio</span> <span class="o">=</span> <span class="s">"dpkg -l | grep fio"</span>
    <span class="n">grep_multipath</span> <span class="o">=</span> <span class="s">"dpkg -l | grep multipath-tools"</span>
    <span class="n">grep_ssh</span> <span class="o">=</span> <span class="s">"dpkg -l | grep openssh"</span>
    <span class="n">grep_scsi</span> <span class="o">=</span> <span class="s">"dpkg -l | grep open-iscsi"</span>
    <span class="n">grep_nfs</span> <span class="o">=</span> <span class="s">"dpkg -l | grep nfs"</span>
    <span class="n">grep_cifs</span> <span class="o">=</span> <span class="s">"dpkg -l | grep cifs"</span>

    <span class="n">remote_fio</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">grep_fio</span><span class="p">)</span>
    <span class="n">remote_multipath</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                        <span class="n">client_ip</span><span class="p">,</span> <span class="n">grep_multipath</span><span class="p">)</span>
    <span class="n">remote_ssh</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">grep_ssh</span><span class="p">)</span>
    <span class="n">remote_scsi</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">grep_scsi</span><span class="p">)</span>
    <span class="n">remote_nfs</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">grep_nfs</span><span class="p">)</span>
    <span class="n">remote_cifs</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">grep_cifs</span><span class="p">)</span>

    <span class="n">fio_exist</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_fio</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">multipath_exist</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_multipath</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">ssh_exist</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_ssh</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">scsi_exist</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_scsi</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">nfs_exist</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_nfs</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">cifs_exist</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_cifs</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">fio_exist</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Client : ({}) not install fio, please run "</span> \
              <span class="s">"'apt-get install fio' to install it</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">multipath_exist</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Client : ({}) not install multipath-tools, please run "</span> \
              <span class="s">"'apt-get install multipath-tools ' to install it</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">ssh_exist</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Client : ({}) not install openssh-server, please run "</span> \
              <span class="s">"'apt-get install openssh-server' to install it</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">scsi_exist</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Client : ({}) not install open-iscsi, please run "</span> \
              <span class="s">"'apt-get install open-iscsi' to install it</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">nfs_exist</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Client : ({}) not install NFS, please run "</span> \
              <span class="s">"'apt-get install nfs-kernel-server' to install it </span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">cifs_exist</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Client : ({}) not install CIFS, please run "</span> \
              <span class="s">"'apt-get install cifs-utils' to install it </span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"        [Success]  Client : ({}) installed fio, multipath-tools,</span><span class="se">\n</span><span class="s">"</span> \
          <span class="s">"                   openssh-server, open-iscsi and  NFS and CIFS</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"    1-2 [Check]    The running node must be non-first and non-last node"</span>
    <span class="n">nums</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_public_ips</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">nums</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    A minimum of 3 nodes is required to execute test case, so exit!!!</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">list_before</span> <span class="o">=</span> <span class="n">all_public_ips</span><span class="p">[:</span><span class="n">nums</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">list_after</span> <span class="o">=</span> <span class="n">all_public_ips</span><span class="p">[</span><span class="n">nums</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span>

    <span class="n">list_union</span> <span class="o">=</span> <span class="n">list_before</span> <span class="o">+</span> <span class="n">list_after</span>
    <span class="n">ip_a_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ip a"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">list_union</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">ip_a_info</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Forbidden to run case on first or last node, so exit!!!</span><span class="se">\n</span><span class="s">"</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  Check the running node IP address successfully</span><span class="se">\n</span><span class="s">"</span>

    <span class="k">print</span> <span class="s">"    1-3 [Check]    The network between all nodes should be smooth"</span>
    <span class="c1"># Check public network for each node
</span>    <span class="k">for</span> <span class="n">each_public_ip</span> <span class="ow">in</span> <span class="n">all_public_ips</span><span class="p">:</span>
        <span class="n">ping_public_ip_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ping {} -c 1"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_public_ip</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">ping_public_ip_res</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Public IP of : ({}) unreachable, please check the public IP settings "</span> \
                  <span class="s">"in autotest.config, and the node has been booted normally ."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_public_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  Public IP of : ({}) reachable"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_public_ip</span><span class="p">)</span>

    <span class="c1"># Check storage network for each node
</span>    <span class="k">for</span> <span class="n">each_storage_ip</span> <span class="ow">in</span> <span class="n">all_storage_ips</span><span class="p">:</span>
        <span class="n">ping_storage_ip_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ping {} -c 1"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_storage_ip</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">ping_storage_ip_res</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    The storage network of the fourth node is different from other nodes</span><span class="se">\n</span><span class="s">"</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  Storage IP of : ({}) reachable"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_storage_ip</span><span class="p">)</span>

    <span class="c1"># Check the 4th nodes ip
</span>    <span class="n">storage_ip_pref_1th</span> <span class="o">=</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">all_storage_ips</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">storage_ip_pref_4th</span> <span class="o">=</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">host_4th_storage_ip</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">if</span> <span class="n">storage_ip_pref_1th</span> <span class="o">==</span> <span class="n">storage_ip_pref_4th</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  The forth node's storage IP can be used"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Storage IP of : ({}) unreachable, please check the storage IP settings "</span> \
                  <span class="s">"in autotest.config, and the node has been booted normally ."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_storage_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">    1-4 [Check]    Check public and storage network interface on each node"</span>
    <span class="k">for</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">all_public_ips</span><span class="p">:</span>
        <span class="n">grep_pub_net_cmd</span> <span class="o">=</span> <span class="s">"ip a | grep {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">public_iface</span><span class="p">)</span>
        <span class="n">grep_storage_net_cmd</span> <span class="o">=</span> <span class="s">"ip a | grep {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">storage_iface</span><span class="p">)</span>
        <span class="n">rempte_grep_pub_net</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">root_pass</span><span class="p">,</span>
                                                                               <span class="n">config</span><span class="p">.</span><span class="n">ssh_port</span><span class="p">,</span> <span class="n">each_ip</span><span class="p">,</span>
                                                                               <span class="n">grep_pub_net_cmd</span><span class="p">)</span>
        <span class="n">rempte_storage_pub_net</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">root_pass</span><span class="p">,</span>
                                                                                  <span class="n">config</span><span class="p">.</span><span class="n">ssh_port</span><span class="p">,</span> <span class="n">each_ip</span><span class="p">,</span>
                                                                                  <span class="n">grep_storage_net_cmd</span><span class="p">)</span>

        <span class="n">grep_pub_net</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">rempte_grep_pub_net</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">grep_storage_net</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">rempte_storage_pub_net</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">grep_pub_net</span> <span class="ow">and</span> <span class="n">grep_storage_net</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  Public and Storage interface is correct on node ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">grep_pub_net</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">grep_storage_net</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Storage interface is incorrect on node ({}) in "</span> \
                  <span class="s">"config/autotest.config</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">elif</span> <span class="ow">not</span> <span class="n">grep_pub_net</span> <span class="ow">and</span> <span class="n">grep_storage_net</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Public interface is incorrect on node ({}) "</span> \
                  <span class="s">"in config/autotest.config</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Both Public and Storage interface is incorrect "</span> \
                  <span class="s">"on node ({}) in config/autotest.config</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">    1-5 [Check]    Check OSD device on each node, make sure the disk partition exist.</span><span class="se">\n</span><span class="s">"</span> \
          <span class="s">"                   If OSD disk partition size gap on each node can not be too large, </span><span class="se">\n</span><span class="s">"</span> \
          <span class="s">"                   otherwise PG is difficult to reach a healthy state in a short time"</span>
    <span class="n">osd_device</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">osd_device</span>
    <span class="n">disk_size_list</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">all_public_ips</span><span class="p">:</span>
        <span class="n">grep_dev_cmd</span> <span class="o">=</span> <span class="s">"lsblk | grep {} | head -n 1"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">osd_device</span><span class="p">)</span>
        <span class="n">remote_grep_dev_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">root_pass</span><span class="p">,</span>
                                                                               <span class="n">config</span><span class="p">.</span><span class="n">ssh_port</span><span class="p">,</span> <span class="n">each_ip</span><span class="p">,</span>
                                                                               <span class="n">grep_dev_cmd</span><span class="p">)</span>
        <span class="n">grep_dev</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_grep_dev_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="s">'SWAP'</span> <span class="ow">in</span> <span class="n">grep_dev</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    OSD device is a OS partition on node ({}), please to </span><span class="se">\n</span><span class="s">"</span> \
                   <span class="s">"                   check 'osd_device' "</span> \
                   <span class="s">"in config/autotest.config</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">grep_dev</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Has no disk partition of ({}) on node ({}), please to </span><span class="se">\n</span><span class="s">"</span> \
                   <span class="s">"                   check 'osd_device' in config/autotest.config</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">osd_device</span><span class="p">,</span> <span class="n">each_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="c1"># Get size of OSD disk partition
</span>        <span class="n">disk_size</span> <span class="o">=</span> <span class="n">grep_dev</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">disk_size</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'G'</span><span class="p">):</span>
            <span class="n">disk_size_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">disk_size</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'G'</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">elif</span> <span class="n">disk_size</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'T'</span><span class="p">):</span>
            <span class="n">disk_size_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">disk_size</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'T'</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Get size of OSD disk partition is incorrect : ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">disk_size</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="c1"># Check OSD disk partition size
</span>    <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">disk_size_list</span><span class="p">)))</span> <span class="o">/</span> <span class="nb">int</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">disk_size_list</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="mi">2000</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Size of OSD disk partition is very larger than other "</span> \
               <span class="s">"node on node ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">disk_size</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"        [Success]  Check OSD device on each node success</span><span class="se">\n</span><span class="s">"</span>

    <span class="k">print</span> <span class="s">"    1-6 [Check]    Service of apache on each node should be in running state"</span>
    <span class="k">for</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">all_public_ips</span><span class="p">:</span>
        <span class="n">ps_cmd</span> <span class="o">=</span> <span class="s">"ps -ef | grep apache | grep -v grep | wc -l"</span>
        <span class="n">remote_ps_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">root_pass</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">each_ip</span><span class="p">,</span> <span class="n">ps_cmd</span><span class="p">)</span>
        <span class="n">apache_pid_no</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_ps_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">apache_pid_no</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Service of Apache2 is not running on node ({}), try to start it"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>
            <span class="n">start_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">root_pass</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span>
                                                                         <span class="n">each_ip</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">restart_apache</span><span class="p">)</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="n">start_cmd</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
            <span class="n">apache_pid_no</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_ps_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">apache_pid_no</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"        [ERROR]    Service of Apache2 is still not running on node ({}) after try "</span> \
                     <span class="s">"to start it, so exit!!!</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>
                <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  Service of Apache2 is running on node ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_ip</span><span class="p">)</span>

    <span class="c1"># Check ESXi host IP or IPMI IP
</span>    <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">    1-7 [Check]    Check ESXi host IP config or IPMI IP config in config/autotest.config"</span>
    <span class="n">system_produce</span> <span class="o">=</span> <span class="n">physical_or_vm</span><span class="p">(</span><span class="n">ip</span><span class="o">=</span><span class="n">client_ip</span><span class="p">)</span>
    <span class="c1"># # Client is a VM
</span>    <span class="k">if</span> <span class="n">system_produce</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="n">list_vm_cmd</span> <span class="o">=</span> <span class="s">"vim-cmd vmsvc/getallvms"</span>
        <span class="n">remote_list_vm_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">esxi_root_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                              <span class="n">config</span><span class="p">.</span><span class="n">esxi_ip</span><span class="p">,</span> <span class="n">list_vm_cmd</span><span class="p">)</span>
        <span class="n">all_vms</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_list_vm_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">config</span><span class="p">.</span><span class="n">esxi_vm_host_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">all_vms</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Incorrect information in config/autotest.config about ESXi:</span><span class="se">\n</span><span class="s">"</span> \
                  <span class="s">"                   (1) Not enabled SSH service on ESXi?</span><span class="se">\n</span><span class="s">"</span> \
                  <span class="s">"                   (2) Wrong vm_host_name in config/autotest.config?</span><span class="se">\n</span><span class="s">"</span> \
                  <span class="s">"                   (3) Wrong IP address or wrong password for root in config/autotest.config?</span><span class="se">\n</span><span class="s">"</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  ESXi host information is correct in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Client is a physical machine
</span>        <span class="n">get_ipmi_cmd</span> <span class="o">=</span> <span class="s">'ipmitool lan print | grep "IP Address"'</span>
        <span class="n">remote_get_ipmi_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                               <span class="n">client_ip</span><span class="p">,</span> <span class="n">get_ipmi_cmd</span><span class="p">)</span>
        <span class="n">ipmi_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_get_ipmi_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">ipmi_info</span><span class="p">:</span>
            <span class="n">get_ipmi_ip</span> <span class="o">=</span> <span class="n">ipmi_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">get_ipmi_ip</span> <span class="o">=</span> <span class="s">'not-get'</span>

        <span class="k">if</span> <span class="n">config</span><span class="p">.</span><span class="n">ipmi_ip</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">ipmi_info</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    ipmi_ip is not correct in config/autotest.config, currently </span><span class="se">\n</span><span class="s">"</span> \
                  <span class="s">"                   acquired : ({}), but in conf is : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">get_ipmi_ip</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">ipmi_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Check ipmi user
</span>            <span class="n">ipmi_user_list</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">list_ipmi_user_cmd</span> <span class="o">=</span> <span class="s">"ipmitool user list -c"</span>
            <span class="n">remote_list_user_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                    <span class="n">client_ip</span><span class="p">,</span> <span class="n">list_ipmi_user_cmd</span><span class="p">)</span>
            <span class="n">ipmi_uses</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_list_user_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">each_user</span> <span class="ow">in</span> <span class="n">ipmi_uses</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">):</span>
                <span class="n">user_name</span> <span class="o">=</span> <span class="n">each_user</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">ipmi_user_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">user_name</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">config</span><span class="p">.</span><span class="n">ipmi_user</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">ipmi_user_list</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"        [ERROR]    ipmi_user is not correct in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>
                <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"        [Success]  IPMI user is correct in config/autotest.config"</span>

            <span class="c1"># Check ipmi user's password
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">list_frc_cmd</span> <span class="o">=</span> <span class="s">"ipmitool -H {} -I lanplus -U {} -P {} fru list"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">ipmi_ip</span><span class="p">,</span>
                                                                                       <span class="n">config</span><span class="p">.</span><span class="n">ipmi_user</span><span class="p">,</span>
                                                                                       <span class="n">config</span><span class="p">.</span><span class="n">ipmi_user_passwd</span><span class="p">)</span>
                <span class="n">do_cmd</span><span class="p">(</span><span class="n">list_frc_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
                <span class="k">print</span> <span class="s">"        [Success]  IPMI of ipmi_user_passwd is correct in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>
            <span class="k">except</span> <span class="n">DoCommandError</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
                <span class="k">if</span> <span class="s">'Unable to establish'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">ex</span><span class="p">):</span>
                    <span class="k">print</span> <span class="s">"        [ERROR]    IPMI of ipmi_user_passwd is not correct in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>
                    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">print</span> <span class="s">"        [ERROR]    Get FRU list failed, backend return : ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">ex</span><span class="p">))</span>
                    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="c1"># Check AD and LDAP reachable or not
</span>    <span class="k">print</span> <span class="s">"    1-8 [Check]    Check AD and LDAP reachable or not in config/autotest.config"</span>
    <span class="n">ad_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">ad_server_addr</span>
    <span class="n">ldap_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">ldap_server_addr</span>

    <span class="k">if</span> <span class="n">ad_ip</span> <span class="o">==</span> <span class="n">ldap_ip</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    AD IP is same as LDAP IP, please check AD and LDAP settings in autotest.config</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">ping_ad_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ping {} -c 1"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ad_ip</span><span class="p">),</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">ping_ad_res</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    AD : ({}) unreachable, please check AD settings "</span> \
               <span class="s">"in autotest.config."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ad_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  AD   : ({}) reachable"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ad_ip</span><span class="p">)</span>

    <span class="n">ping_ldap_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ping {} -c 1"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ldap_ip</span><span class="p">),</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">ping_ldap_res</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    LDAP : ({}) unreachable, please check LDAP "</span> \
               <span class="s">"settings in autotest.config."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ldap_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  LDAP : ({}) reachable</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ldap_ip</span><span class="p">)</span>

    <span class="c1"># If other cluster has configured the DNS IP, should exit
</span>    <span class="k">print</span> <span class="s">"    1-9 [Check]    Check DNS IP in config/autotest.config"</span>
    <span class="n">dns_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">dns_ip</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">ping_dns_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ping -c2 {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">dns_ip</span><span class="p">),</span> <span class="mi">60</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">ping_dns_res</span> <span class="ow">and</span> <span class="s">'0% packet loss'</span> <span class="ow">in</span> <span class="n">ping_dns_res</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    DNS IP of ({}) in config/autotest.config is used, "</span> \
                      <span class="s">"please check the Environment.</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">dns_ip</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  DNS IP : ({}) is available in config/autotest.config</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">dns_ip</span><span class="p">)</span>

    <span class="c1"># If other environment used this takeover IP, should exit
</span>    <span class="k">print</span> <span class="s">"    1-10 [Check]    Check takeover IP in config/autotest.config"</span>
    <span class="n">takeover_ip_list</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">takeover_ips</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">takeover_ips</span>
    <span class="k">for</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">takeover_ips</span><span class="p">.</span><span class="n">split</span><span class="p">():</span>
        <span class="n">takeover_ip_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">each_ip</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">node_ip_prefix</span> <span class="o">=</span> <span class="n">all_public_ips</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">prefix_ip</span> <span class="o">=</span> <span class="n">takeover_ip_list</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">node_ip_prefix</span> <span class="o">!=</span> <span class="n">prefix_ip</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [ERROR]    Takeover IP and public ip are not in same segment</span><span class="se">\n</span><span class="s">"</span> \
              <span class="s">"                    Takeover IP is : {} </span><span class="se">\n</span><span class="s">"</span> \
              <span class="s">"                    public ip is : {} </span><span class="se">\n</span><span class="s">"</span> \
              <span class="s">"                    please check the Environment.</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">takeover_ips</span><span class="p">,</span> <span class="n">public_ips</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">each_takeover_ip</span> <span class="ow">in</span> <span class="n">takeover_ip_list</span><span class="p">:</span>
        <span class="n">ping_cmd</span> <span class="o">=</span> <span class="s">'ping -c2 {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_takeover_ip</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">ping_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">ping_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">ping_res</span> <span class="ow">and</span> <span class="s">'0% packet loss'</span> <span class="ow">in</span> <span class="n">ping_res</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"         [ERROR]    Takeover IP of ({}) in config/autotest.config is used, "</span> \
                      <span class="s">"please check the Environment.</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_takeover_ip</span><span class="p">)</span>
                <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
            <span class="c1"># print "        [ERROR]    Ping takeover IP : {} occur
</span>            <span class="c1"># exception : ({})".format(each_takeover_ip, str(ex))
</span>            <span class="k">pass</span>
    <span class="k">print</span> <span class="s">"         [Success]  Takeover IP is available in config/autotest.config"</span>

    <span class="c1"># If other cluster used S3 takeover IP, should exit
</span>    <span class="n">s3_takeover_ips</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">s3_takeover_ips</span>
    <span class="n">s3_prefix_ip</span> <span class="o">=</span> <span class="n">s3_takeover_ips</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">node_ip_prefix</span> <span class="o">!=</span> <span class="n">s3_prefix_ip</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [ERROR]    S3 takeover IP and public ip are not same segment, s3 takeover IP is {}, "</span> \
                              <span class="s">"public ip is {}, please check the Environment.</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s3_prefix_ip</span><span class="p">,</span> <span class="n">public_ips</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">s3_vips</span> <span class="o">=</span> <span class="p">[</span><span class="n">each_ip</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">s3_takeover_ips</span><span class="p">.</span><span class="n">split</span><span class="p">()]</span>
    <span class="n">s3_vip_union</span> <span class="o">=</span> <span class="nb">list</span><span class="p">((</span><span class="nb">set</span><span class="p">(</span><span class="n">s3_vips</span><span class="p">).</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">all_public_ips</span><span class="p">)))</span> <span class="o">^</span> <span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">s3_vips</span><span class="p">)</span> <span class="o">^</span> <span class="nb">set</span><span class="p">(</span><span class="n">all_public_ips</span><span class="p">)))</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s3_vip_union</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [ERROR]    S3 takeover IP in config/autotest.config should not include "</span> \
               <span class="s">"cluster public IP, please check the Environment.</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="c1"># # Check ping result
</span>    <span class="k">for</span> <span class="n">each_s3_vip</span> <span class="ow">in</span> <span class="n">s3_vips</span><span class="p">:</span>
        <span class="n">ping_cmd</span> <span class="o">=</span> <span class="s">"ping -c2 {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_s3_vip</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">ping_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">ping_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">ping_res</span> <span class="ow">and</span> <span class="s">'0% packet loss'</span> <span class="ow">in</span> <span class="n">ping_res</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"         [ERROR]    S3 takeover IP of ({}) in config/autotest.config is used, "</span> \
                      <span class="s">"please check the Environment.</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_s3_vip</span><span class="p">)</span>
                <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
            <span class="c1"># print "        [ERROR]    Ping S3 takeover IP : {} occur
</span>            <span class="c1">#  exception : ({})".format(each_takeover_ip, str(ex))
</span>            <span class="k">pass</span>
    <span class="k">print</span> <span class="s">"         [Success]  S3 takeover IP is available in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1"># Check public or storage interface should config in autotest.conf
</span>    <span class="k">print</span> <span class="s">"    1-11 [Check]    Check public and storage interface from config/autotest.config"</span>

    <span class="n">iface</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">local_iface</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">'cat /etc/network/interfaces | grep iface'</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">each_iface</span> <span class="ow">in</span> <span class="n">local_iface</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">):</span>
        <span class="n">iface</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">each_iface</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>

    <span class="k">if</span> <span class="n">public_iface</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">iface</span> <span class="ow">or</span> <span class="n">storage_iface</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">iface</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [ERROR]    public_iface or storage_iface is not correct in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [Success]  Public and storage interface are correct in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1"># Check cluster network speed, avoid having more bandwidth unused
</span>    <span class="k">print</span> <span class="s">"    1-12 [Check]    Check public interface BW performance and DNS ip segment"</span>

    <span class="n">all_nic_speed</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">each_iface</span> <span class="ow">in</span> <span class="n">iface</span><span class="p">:</span>
        <span class="n">each_speed_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ethtool {} | grep Speed | grep -v Unknown"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_iface</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">each_speed</span> <span class="o">=</span> <span class="n">each_speed_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'Mb/s'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">all_nic_speed</span><span class="p">[</span><span class="n">each_iface</span><span class="p">]</span> <span class="o">=</span> <span class="n">each_speed</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>

    <span class="n">local_public_speed_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ethtool {} | grep Speed"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">public_iface</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">local_public_speed</span> <span class="o">=</span> <span class="n">local_public_speed_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'Mb/s'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>

    <span class="n">max_speed</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">all_nic_speed</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>
    <span class="n">max_speed_iface</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">all_nic_speed</span><span class="p">.</span><span class="n">iteritems</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">max_speed</span><span class="p">:</span>
            <span class="n">max_speed_iface</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

    <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">max_speed</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">int</span><span class="p">(</span><span class="n">local_public_speed</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">"         [ERROR]    May not use 10G network, check public_iface or "</span> \
              <span class="s">"storage_iface in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Check DNS ip, should use same segment network with public NIC
</span>        <span class="n">_ip</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">each_nic</span> <span class="ow">in</span> <span class="n">max_speed_iface</span><span class="p">:</span>
            <span class="n">ip_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ip a | grep 'scope global {}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_nic</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">ip_info</span><span class="p">:</span>
                <span class="n">ip</span> <span class="o">=</span> <span class="n">ip_info</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">_ip</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>
        
        <span class="n">_ip_prefix</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">each_prefix</span> <span class="ow">in</span> <span class="n">_ip</span><span class="p">:</span>
            <span class="n">_ip_prefix</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">each_prefix</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]))</span>

        <span class="n">dns_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">dns_ip</span>
        <span class="n">dns_ip_prefix</span> <span class="o">=</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">dns_ip</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">dns_ip_prefix</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">_ip_prefix</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    DNS ip in config/autotest.config is not correct, "</span> \
                   <span class="s">"should start with these segments : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">_ip_prefix</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"         [Success]  Use correct public interface and config dns ip correct in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1"># Check local host IP should config in autotest.conf
</span>    <span class="k">print</span> <span class="s">"    1-13 [Check]    Local host IP should configed in config/autotest.config"</span>

    <span class="n">ceph_conf</span> <span class="o">=</span> <span class="s">"/etc/ceph/ceph.conf"</span>
    <span class="n">health</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ceph health detail"</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="s">'HEALTH_OK'</span> <span class="ow">in</span> <span class="n">health</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ceph_conf</span><span class="p">):</span>
        <span class="n">pub_ifce_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"cat {} | grep 'public interface'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ceph_conf</span><span class="p">),</span> <span class="mi">15</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">sto_ifce_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"cat {} | grep 'storage interface'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ceph_conf</span><span class="p">),</span> <span class="mi">15</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">pub_ifce</span> <span class="o">=</span> <span class="n">pub_ifce_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'='</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">sto_ifce</span> <span class="o">=</span> <span class="n">sto_ifce_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'='</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">pub_ifce</span> <span class="o">!=</span> <span class="n">public_iface</span> <span class="ow">or</span> <span class="n">sto_ifce</span> <span class="o">!=</span> <span class="n">storage_iface</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Check public or storage interface failed, please check "</span> \
                   <span class="s">"config/autotest.config. "</span>
            <span class="k">print</span> <span class="s">"                    Get public interface from ceph.conf is ({}), "</span> \
                  <span class="s">"but in config/autotest.config is ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">pub_ifce</span><span class="p">,</span> <span class="n">public_iface</span><span class="p">)</span>
            <span class="k">print</span> <span class="s">"                    Get storage interface from ceph.conf is ({}), "</span> \
                  <span class="s">"but in config/autotest.config is ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">sto_ifce</span><span class="p">,</span> <span class="n">storage_iface</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [Success]  Check public and storage interface success "</span> \
                  <span class="s">"from config/autotest.config and ceph.conf"</span>

        <span class="n">scope_pub_cmd</span> <span class="o">=</span> <span class="s">"ip a | grep 'scope global {}' | awk '{{print $2}}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">pub_ifce</span><span class="p">)</span> 
        <span class="n">scope_sto_cmd</span> <span class="o">=</span> <span class="s">"ip a | grep 'scope global {}' | awk '{{print $2}}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">sto_ifce</span><span class="p">)</span> 
        <span class="n">local_pub_ip_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">scope_pub_cmd</span><span class="p">,</span> <span class="mi">15</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">local_sto_ip_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">scope_sto_cmd</span><span class="p">,</span> <span class="mi">15</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">local_pub_ip</span> <span class="o">=</span> <span class="n">local_pub_ip_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">local_sto_ip</span> <span class="o">=</span> <span class="n">local_sto_ip_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">local_pub_ip</span> <span class="ow">in</span> <span class="n">all_public_ips</span> <span class="ow">and</span> <span class="n">local_sto_ip</span> <span class="ow">in</span> <span class="n">all_storage_ips</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [Success]  Cluster is Health OK, check public and storage "</span> \
                  <span class="s">"IP address in config/autotest.config success</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Local host ip is not in config/autotest.config "</span> \
                  <span class="s">"of storage_ips or public_ips</span><span class="se">\n</span><span class="s">"</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">local_ip</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">local_ip_info</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ip a | grep 'scope global' | awk '{{print $2}}'"</span><span class="p">,</span> <span class="mi">30</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span> 

        <span class="k">for</span> <span class="n">each_ip</span> <span class="ow">in</span> <span class="n">local_ip_info</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">):</span>
            <span class="n">local_ip</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">each_ip</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
        <span class="c1"># List union
</span>        <span class="n">public_ret_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">((</span><span class="nb">set</span><span class="p">(</span><span class="n">all_public_ips</span><span class="p">).</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">local_ip</span><span class="p">)))</span> <span class="o">^</span> <span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">all_public_ips</span><span class="p">)</span> <span class="o">^</span> <span class="nb">set</span><span class="p">(</span><span class="n">local_ip</span><span class="p">)))</span>
        <span class="n">storage_ret_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">((</span><span class="nb">set</span><span class="p">(</span><span class="n">all_storage_ips</span><span class="p">).</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">local_ip</span><span class="p">)))</span> <span class="o">^</span> <span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">all_storage_ips</span><span class="p">)</span> <span class="o">^</span> <span class="nb">set</span><span class="p">(</span><span class="n">local_ip</span><span class="p">)))</span>

        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">public_ret_list</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">storage_ret_list</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [Success]  Check public and storage IP address in config/autotest.config success</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Local host ip is not in config/autotest.config of storage_ips or "</span> \
                  <span class="s">"public_ips, please check config/autotest.config</span><span class="se">\n</span><span class="s">"</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="c1"># Check the node of cluster IP should not be as client
</span>    <span class="k">print</span> <span class="s">"    1-14 [Check]    Check the node of cluster IP should not be as client"</span>

    <span class="n">client_ips_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">white_second_ip</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">black_list_ip</span><span class="p">]</span>
    <span class="n">client_ip_union</span> <span class="o">=</span> <span class="nb">list</span><span class="p">((</span><span class="nb">set</span><span class="p">(</span><span class="n">client_ips_list</span><span class="p">).</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">all_public_ips</span><span class="p">)))</span> <span class="o">^</span>
                           <span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">client_ips_list</span><span class="p">)</span> <span class="o">^</span> <span class="nb">set</span><span class="p">(</span><span class="n">all_public_ips</span><span class="p">)))</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">client_ip_union</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [ERROR]    In config/autotest.config, at [CLIENTS], client IP should not "</span> \
              <span class="s">"same as cluster nodes's IP</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"         [Success]  Check IP and interface success in config/autotest.config</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1"># Check the client, should has /root/.ssh/id_dsa.pub, used for RRS SSH key
</span>    <span class="n">id_dsa_pub</span> <span class="o">=</span> <span class="s">"/root/.ssh/id_dsa.pub"</span>
    <span class="k">print</span> <span class="s">"    1-15 [Check]    Client : ({}) should has file of ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">,</span> <span class="n">id_dsa_pub</span><span class="p">)</span>

    <span class="n">ls_cmd</span> <span class="o">=</span> <span class="s">"ls -l {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">id_dsa_pub</span><span class="p">)</span>
    <span class="n">remote_ls_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                     <span class="n">client_ip</span><span class="p">,</span> <span class="n">ls_cmd</span><span class="p">)</span>
    <span class="n">ls_dsa_pub_flag</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_ls_cmd</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">ls_dsa_pub_flag</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [Success]  Client : ({}) has file of ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">,</span> <span class="n">id_dsa_pub</span><span class="p">)</span>

        <span class="c1"># If client is a cluster of Virtual Storage node, which reset-node or create cluster for many
</span>        <span class="c1"># times(not refresh install OS), will has many old ssh key in /root/.ssh/authorized_keys
</span>        <span class="n">expect_pub_files_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">'/root/.ssh/id_dsa.pub'</span><span class="p">,</span> <span class="s">'/root/.ssh/id_ecdsa.pub'</span><span class="p">,</span> <span class="s">'/root/.ssh/id_rsa.pub'</span><span class="p">]</span>
        <span class="n">ls_pub_files</span> <span class="o">=</span> <span class="s">"ls -l /root/.ssh/id*.pub | awk '{{print $NF}}'"</span> 
        <span class="n">cat_auth_keys_file</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/authorized_keys"</span>
        <span class="n">client_ls_pub_files</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                               <span class="n">client_ip</span><span class="p">,</span> <span class="n">ls_pub_files</span><span class="p">)</span>
        <span class="n">client_ls_auth_files</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                <span class="n">client_ip</span><span class="p">,</span> <span class="n">cat_auth_keys_file</span><span class="p">)</span>
        <span class="c1"># If client has file of /root/.ssh/authorized_keys, break
</span>        <span class="n">client_auth_keys_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">client_ls_auth_files</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="c1"># print "--------- client_auth_keys_res : ({})".format(client_auth_keys_res)
</span>        <span class="k">if</span> <span class="n">client_auth_keys_res</span><span class="p">:</span>
            <span class="c1"># A cluster node as client
</span>            <span class="n">key_content_cmd</span> <span class="o">=</span> <span class="s">"ceph config-key get ssh_authorized_keys &gt; /tmp/kv_key.txt"</span>
            <span class="n">remote_key_content_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                      <span class="n">client_ip</span><span class="p">,</span> <span class="n">key_content_cmd</span><span class="p">)</span>
            <span class="n">kv_store_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_key_content_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">kv_store_res</span><span class="p">:</span>
                <span class="n">cat_id_rsa_pub</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/id_rsa.pub &gt; /tmp/ssh_keys.txt"</span>
                <span class="n">cat_id_ecdsa_pub</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/id_ecdsa.pub &gt;&gt; /tmp/ssh_keys.txt"</span>
                <span class="n">cat_id_dsa_pub</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/id_dsa.pub &gt;&gt; /tmp/ssh_keys.txt"</span>
                <span class="n">mix_cmd</span> <span class="o">=</span> <span class="s">"{};{};{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cat_id_rsa_pub</span><span class="p">,</span> <span class="n">cat_id_ecdsa_pub</span><span class="p">,</span> <span class="n">cat_id_dsa_pub</span><span class="p">)</span>
                <span class="n">remote_echo_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                   <span class="n">client_ip</span><span class="p">,</span> <span class="n">mix_cmd</span><span class="p">)</span>
                <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_echo_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
                <span class="n">diff_cmd</span> <span class="o">=</span> <span class="s">"diff /tmp/kv_key.txt /tmp/ssh_keys.txt"</span>
                <span class="n">remote_diff_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                   <span class="n">client_ip</span><span class="p">,</span> <span class="n">diff_cmd</span><span class="p">)</span>
                <span class="n">diff_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_diff_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">diff_res</span><span class="p">:</span>
                    <span class="k">print</span> <span class="s">"         [Action]   Need to change content of /root/.ssh/authorized_keys "</span> \
                          <span class="s">"on client : ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
                    <span class="n">put_kv_store</span> <span class="o">=</span> <span class="s">"ceph config-key put ssh_authorized_keys -i /tmp/ssh_keys.txt"</span>
                    <span class="n">remote_put_kv_store</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                           <span class="n">client_ip</span><span class="p">,</span> <span class="n">put_kv_store</span><span class="p">)</span>
                    <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_put_kv_store</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"         [SKIP]     Cluster node as client, but no need to change content of "</span> \
                      <span class="s">"/root/.ssh/authorized_keys "</span>

            <span class="c1"># Not a cluster node as client
</span>            <span class="n">client_ls_pub_files_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">client_ls_pub_files</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">client_ls_pub_files_res</span><span class="p">:</span>
                <span class="n">pub_list</span> <span class="o">=</span> <span class="n">client_ls_pub_files_res</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
                <span class="n">pub_list</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
                <span class="c1"># Like this : ['/root/.ssh/id_dsa.pub', '/root/.ssh/id_ecdsa.pub', '/root/.ssh/id_rsa.pub']
</span>                <span class="k">if</span> <span class="nb">set</span><span class="p">(</span><span class="n">expect_pub_files_list</span><span class="p">).</span><span class="n">issubset</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">pub_list</span><span class="p">))</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
                    <span class="k">print</span> <span class="s">"         [ERROR]    expect_pub_files_list : ({}) is not a subset of "</span> \
                          <span class="s">"pub_list : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">expect_pub_files_list</span><span class="p">,</span> <span class="n">pub_list</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="c1"># Check content of /root/.ssh/authorized_keys, if has many same host name, should change it
</span>                    <span class="n">cat_auth_keys_cmd</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/authorized_keys | awk '{{print $NF}}'"</span> 
                    <span class="n">get_content_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                       <span class="n">client_ip</span><span class="p">,</span> <span class="n">cat_auth_keys_cmd</span><span class="p">)</span>
                    <span class="n">auth_keys_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">get_content_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
                    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">auth_keys_res</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">))</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">auth_keys_res</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
                        <span class="c1"># authorized_keys has some old ssh keys, need to change it
</span>                        <span class="k">print</span> <span class="s">"         [Action]   Need to change content of /root/.ssh/authorized_keys "</span> \
                              <span class="s">"on client : ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
                        <span class="n">cat_id_rsa_pub</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/id_rsa.pub &gt; /tmp/ssh_keys.txt"</span>
                        <span class="n">cat_id_ecdsa_pub</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/id_ecdsa.pub &gt;&gt; /tmp/ssh_keys.txt"</span>
                        <span class="n">cat_id_dsa_pub</span> <span class="o">=</span> <span class="s">"cat /root/.ssh/id_dsa.pub &gt;&gt; /tmp/ssh_keys.txt"</span>
                        <span class="n">mix_cmd</span> <span class="o">=</span> <span class="s">"{};{};{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cat_id_rsa_pub</span><span class="p">,</span> <span class="n">cat_id_ecdsa_pub</span><span class="p">,</span> <span class="n">cat_id_dsa_pub</span><span class="p">)</span>
                        <span class="n">remote_echo_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                                           <span class="n">client_ip</span><span class="p">,</span> <span class="n">mix_cmd</span><span class="p">)</span>
                        <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_echo_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">print</span> <span class="s">"         [Success]  Correct content of /root/.ssh/authorized_keys "</span> \
                              <span class="s">"on client : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"         [SKIP]     Not a cluster node as client, but no need to change content of "</span> \
                      <span class="s">"/root/.ssh/authorized_keys</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [Success]  Client : ({}) has no file of /root/.ssh/authorized_keys, "</span> \
                  <span class="s">"do nothing</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [WARN]     Client : ({}) has no file of ({}), now install "</span> \
              <span class="s">"it"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">,</span> <span class="n">id_dsa_pub</span><span class="p">)</span>

        <span class="kn">import</span> <span class="nn">pexpect</span>
        <span class="n">gen_cmd</span> <span class="o">=</span> <span class="s">"ssh-keygen -t dsa"</span>
        <span class="n">remote_gen_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                          <span class="n">client_ip</span><span class="p">,</span> <span class="n">gen_cmd</span><span class="p">)</span>
        <span class="n">process</span> <span class="o">=</span> <span class="n">pexpect</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="n">remote_gen_cmd</span><span class="p">)</span>
        <span class="n">match_enter_file</span> <span class="o">=</span> <span class="n">process</span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">"Enter file in which to save the key"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">match_enter_file</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">process</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Not match content of 'Enter file in which to save the key'</span><span class="se">\n</span><span class="s">"</span>

        <span class="n">match_enter_passphrase</span> <span class="o">=</span> <span class="n">process</span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">"Enter passphrase"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">match_enter_passphrase</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">process</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Not match content of 'Enter passphrase'</span><span class="se">\n</span><span class="s">"</span>

        <span class="n">match_enter_passphrase_again</span> <span class="o">=</span> <span class="n">process</span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">"Enter same passphrase again"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">match_enter_passphrase_again</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">process</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Not match content of 'Enter same passphrase again'</span><span class="se">\n</span><span class="s">"</span>

        <span class="n">process</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

        <span class="c1"># ls_dsa_pub_flag = install_on_remote_check(remote_ls_cmd)
</span>        <span class="n">ls_dsa_pub_flag</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_ls_cmd</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ls_dsa_pub_flag</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Client : ({}) has no file of ({}), please run "</span> \
                  <span class="s">"'ssh-keygen -t dsa' to generate it</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">,</span> <span class="n">id_dsa_pub</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [Success]  Generate dsa key on client : ({}) success</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"    1-16 [Check]    Check cluster public IP and client IP segment"</span>
    <span class="n">pub_ip_prefix</span> <span class="o">=</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">public_ips</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">client_1st_ip_prefix</span> <span class="o">=</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">client_2nd_ip_prefix</span> <span class="o">=</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">white_second_ip</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">client_black_ip_prefix</span> <span class="o">=</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">black_list_ip</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>

    <span class="k">if</span> <span class="n">pub_ip_prefix</span> <span class="o">==</span> <span class="n">client_1st_ip_prefix</span> <span class="o">==</span> <span class="n">client_2nd_ip_prefix</span> <span class="o">==</span> <span class="n">client_black_ip_prefix</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [Success]  Client IP prefix : ({}) is same as cluster public "</span> \
              <span class="s">"ips : ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">public_ips</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">pub_ip_prefix</span> <span class="o">!=</span> <span class="n">client_1st_ip_prefix</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Client first client IP address segment : ({}) is not on the same network</span><span class="se">\n</span><span class="s">"</span> \
                  <span class="s">"                    segment as the public IP : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span><span class="p">,</span>
                                                                                 <span class="n">config</span><span class="p">.</span><span class="n">public_ips</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">pub_ip_prefix</span> <span class="o">!=</span> <span class="n">client_2nd_ip_prefix</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    The second client IP address segment : ({}) is not on the same network</span><span class="se">\n</span><span class="s">"</span> \
                  <span class="s">"                    segment as the public IP : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">white_second_ip</span><span class="p">,</span>
                                                                                 <span class="n">config</span><span class="p">.</span><span class="n">public_ips</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">pub_ip_prefix</span> <span class="o">!=</span> <span class="n">client_black_ip_prefix</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         [ERROR]    Client black IP address segment : ({}) is not on the same network</span><span class="se">\n</span><span class="s">"</span> \
                  <span class="s">"                    segment as the public IP : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">black_list_ip</span><span class="p">,</span>
                                                                                 <span class="n">config</span><span class="p">.</span><span class="n">public_ips</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">unlink_unavailable_scsi_session</span><span class="p">():</span>
    <span class="c1"># Clean all of target nodes on client, it is necessary to check the file system to ensure client
</span>    <span class="c1"># does not try to re-establish the connection on future boot operations
</span>    <span class="n">port</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">ssh_port</span>
    <span class="n">client_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span>
    <span class="n">client_ip_passwd</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_ip_root_password</span>

    <span class="n">white_second_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_second_ip</span>
    <span class="n">white_second_ip_root_password</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_second_ip_root_password</span>
    <span class="n">black_list_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">black_list_ip</span>
    <span class="n">black_ip_root_password</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">black_ip_root_password</span>

    <span class="c1"># Use rm on first client, because this client is only used by pytest
</span>    <span class="n">rm_iqn_cmd</span> <span class="o">=</span> <span class="s">"rm -rf /etc/iscsi/nodes/iqn*"</span>
    <span class="n">remote_rm_iqn_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span>
                                                                         <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">rm_iqn_cmd</span><span class="p">)</span>
    <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_rm_iqn_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="n">rm_tgt_cmd</span> <span class="o">=</span> <span class="s">"rm -rf /etc/iscsi/send_targets/*"</span>
    <span class="n">remote_rm_tgt_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip_passwd</span><span class="p">,</span>
                                                                         <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">rm_tgt_cmd</span><span class="p">)</span>
    <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_rm_tgt_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="c1"># Delete all of folder which name include pytest, then rm unavailable link file in send_targets
</span>    <span class="n">ls_session_cmd</span> <span class="o">=</span> <span class="s">"iscsiadm -m session | grep pytest | sed 's/,1//g' | awk '{{print $3, $NF}}'"</span> 
    <span class="n">rm_iqn_cmd</span> <span class="o">=</span> <span class="s">"rm -rf /etc/iscsi/nodes/iqn*pytest*"</span>
    <span class="n">rm_tgt_cmd</span> <span class="o">=</span> <span class="s">"for f in $(find /etc/iscsi/send_targets/ -type l); do [ ! -e $f ] &amp;&amp; rm -rf $f; done"</span>

    <span class="n">remote_ls_2nd_session_cmd</span> <span class="o">=</span> <span class="s">'sshpass -p {} ssh -p {} -l root {} "{}"'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">white_second_ip_root_password</span><span class="p">,</span>
                                                                                 <span class="n">port</span><span class="p">,</span> <span class="n">white_second_ip</span><span class="p">,</span> <span class="n">ls_session_cmd</span><span class="p">)</span>
    <span class="n">remote_ls_3rd_session_cmd</span> <span class="o">=</span> <span class="s">'sshpass -p {} ssh -p {} -l root {} "{}"'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">black_ip_root_password</span><span class="p">,</span>
                                                                                 <span class="n">port</span><span class="p">,</span> <span class="n">black_list_ip</span><span class="p">,</span> <span class="n">ls_session_cmd</span><span class="p">)</span>

    <span class="n">session_res_2nd</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_ls_2nd_session_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">session_res_2nd</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">each_session</span> <span class="ow">in</span> <span class="n">session_res_2nd</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">):</span>
            <span class="n">each_session_list</span> <span class="o">=</span> <span class="n">each_session</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
            <span class="n">logout_cmd</span> <span class="o">=</span> <span class="s">"iscsiadm -m node -T {} -p {} --logout"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_session_list</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">each_session_list</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">delete_cmd</span> <span class="o">=</span> <span class="s">"iscsiadm -m node -o delete -T {} -p {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_session_list</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">each_session_list</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">remote_logout_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">white_second_ip_root_password</span><span class="p">,</span>
                                                                                 <span class="n">port</span><span class="p">,</span> <span class="n">white_second_ip</span><span class="p">,</span> <span class="n">logout_cmd</span><span class="p">)</span>
            <span class="n">remote_delete_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">white_second_ip_root_password</span><span class="p">,</span>
                                                                                 <span class="n">port</span><span class="p">,</span> <span class="n">white_second_ip</span><span class="p">,</span> <span class="n">delete_cmd</span><span class="p">)</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_logout_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_delete_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

    <span class="n">session_res_3rd</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_ls_3rd_session_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">session_res_3rd</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">each_session</span> <span class="ow">in</span> <span class="n">session_res_3rd</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">):</span>
            <span class="n">each_session_list</span> <span class="o">=</span> <span class="n">each_session</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
            <span class="n">logout_cmd</span> <span class="o">=</span> <span class="s">"iscsiadm -m node -T {} -p {} --logout"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_session_list</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">each_session_list</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">delete_cmd</span> <span class="o">=</span> <span class="s">"iscsiadm -m node -o delete -T {} -p {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_session_list</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">each_session_list</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">remote_logout_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">black_ip_root_password</span><span class="p">,</span>
                                                                                 <span class="n">port</span><span class="p">,</span> <span class="n">black_list_ip</span><span class="p">,</span> <span class="n">logout_cmd</span><span class="p">)</span>
            <span class="n">remote_delete_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">black_ip_root_password</span><span class="p">,</span>
                                                                                 <span class="n">port</span><span class="p">,</span> <span class="n">black_list_ip</span><span class="p">,</span> <span class="n">delete_cmd</span><span class="p">)</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_logout_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_delete_cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

    <span class="n">remote_rm_2nd_iqn_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">white_second_ip_root_password</span><span class="p">,</span>
                                                                             <span class="n">port</span><span class="p">,</span> <span class="n">white_second_ip</span><span class="p">,</span> <span class="n">rm_iqn_cmd</span><span class="p">)</span>
    <span class="n">remote_rm_2nd_tgt_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">white_second_ip_root_password</span><span class="p">,</span>
                                                                             <span class="n">port</span><span class="p">,</span> <span class="n">white_second_ip</span><span class="p">,</span> <span class="n">rm_tgt_cmd</span><span class="p">)</span>
    <span class="n">remote_rm_3rd_iqn_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">black_ip_root_password</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                             <span class="n">black_list_ip</span><span class="p">,</span> <span class="n">rm_iqn_cmd</span><span class="p">)</span>
    <span class="n">remote_rm_3rd_tgt_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">black_ip_root_password</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span>
                                                                             <span class="n">black_list_ip</span><span class="p">,</span> <span class="n">rm_tgt_cmd</span><span class="p">)</span>

    <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_rm_2nd_iqn_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_rm_2nd_tgt_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_rm_3rd_iqn_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">do_cmd</span><span class="p">(</span><span class="n">remote_rm_3rd_tgt_cmd</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">check_dns_set</span><span class="p">():</span>
    <span class="s">"""  Check DNS setting in network  """</span>
    <span class="k">print</span> <span class="s">"[Step 2]  Check DNS setting in order to connect to WWW to install some packages"</span>
    <span class="n">ping_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ping www.baidu.com -c 1"</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">ping_res</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">    [ERROR]    Not set dns or dns is not work, please check network settings.</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">elif</span> <span class="s">"icmp_seq=1"</span> <span class="ow">in</span> <span class="n">ping_res</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">    [Success]  DNS works well</span><span class="se">\n</span><span class="s">"</span>


<span class="k">def</span> <span class="nf">pre_check</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">version</span><span class="p">):</span>
    <span class="s">"""
    :param cmd, string, command line
    :param version, string, package version
    """</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">expect_ver</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">expect_ver</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
            <span class="n">expect_ver</span> <span class="o">=</span> <span class="n">expect_ver</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">2</span><span class="p">]</span>

        <span class="k">return</span> <span class="n">version</span> <span class="o">==</span> <span class="n">expect_ver</span>
    <span class="k">except</span> <span class="nb">IndexError</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">ex</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">install_on_remote_check</span><span class="p">(</span><span class="n">cmd</span><span class="p">):</span>
    <span class="s">"""
    Check the remote has been install or not install the package, such as pv at client
    return True or False, True means has been install; False means not install
    :param cmd, string, a command line will run on remote server
    """</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
    <span class="n">res_info</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">res_info</span><span class="p">.</span><span class="n">split</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>


<span class="k">def</span> <span class="nf">install_package</span><span class="p">():</span>
    <span class="s">"""  Install some python package for pytest  """</span>
    <span class="n">python_pip_flag</span> <span class="o">=</span> <span class="n">pre_check</span><span class="p">(</span><span class="s">"dpkg -l | grep python-pip"</span><span class="p">,</span> <span class="s">"1.0-1build1"</span><span class="p">)</span>
    <span class="n">python_configobj_flag</span> <span class="o">=</span> <span class="n">pre_check</span><span class="p">(</span><span class="s">"dpkg -l | grep python-configobj"</span><span class="p">,</span> <span class="s">"4.7.2+ds-3build1"</span><span class="p">)</span>
    <span class="n">unzip_flag</span> <span class="o">=</span> <span class="n">pre_check</span><span class="p">(</span><span class="s">"dpkg -l | grep unzip"</span><span class="p">,</span> <span class="s">"6.0-4ubuntu2.5"</span><span class="p">)</span>
    <span class="n">stress_flag</span> <span class="o">=</span> <span class="n">pre_check</span><span class="p">(</span><span class="s">"dpkg -l | grep stress"</span><span class="p">,</span> <span class="s">"1.0.1-1ubuntu1"</span><span class="p">)</span>
    <span class="n">pytest_plugins</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"pytest --fixtures | grep -w plugins | head -n 1"</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"../python_3rd_lib"</span><span class="p">):</span>
        <span class="n">current_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">()</span>
        <span class="n">client_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span>
        <span class="n">passwd</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_ip_root_password</span>
        <span class="n">port</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">ssh_port</span>

        <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">[Step 3]  Install packages ...</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">"../python_3rd_lib"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-1. Upgrade apt source "</span>
        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"apt-get update"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-2. Install unzip"</span>
        <span class="k">if</span> <span class="n">unzip_flag</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         unzip has been installed, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"dpkg -i unzip_6.0-4ubuntu2.5_amd64.deb"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-3. Install and upgrade python-pip"</span>
        <span class="c1"># pylint needs setuptools version &gt;12, so need install a high level version of setuptools
</span>        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/setuptools-40.6.3-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"         Has been installed setuptools-40.6.3, skip"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"unzip -o setuptools-40.6.3.zip; cd setuptools-40.6.3; python setup.py install"</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">python_pip_flag</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         python-pip has been installed, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"dpkg -i python-pip_1.0-1build1_all.deb"</span><span class="p">)</span>

        <span class="c1"># os.system("pip install --upgrade pip")
</span>
        <span class="k">print</span> <span class="s">"    3-4. Install python-configobj"</span>
        <span class="k">if</span> <span class="n">python_configobj_flag</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"         python-configobj has been installed, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"dpkg -i python-configobj_4.7.2+ds-3build1_all.deb"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-5. Install more-itertools"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/more_itertools-3.0.0-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"         Has been installed more_itertools-3.0.0, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf more-itertools-3.0.0.tar.gz;"</span>
                      <span class="s">"cd more-itertools-3.0.0/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-6. Install zipp"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/zipp-1.0.0-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"         Has been installed zipp, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf zipp-1.0.0.tar.gz; "</span>
                      <span class="s">"cd zipp-1.0.0/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-7. Install pytest"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/pytest-4.6.9-py2.7.egg/pytest.py"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"         pytest has been installed, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># os.system("pip install -U pytest") for V8.0
</span>            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf pytest-4.6.9.tar.gz; "</span>
                      <span class="s">"cd pytest-4.6.9/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-8. Install pytest-progress"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/pytest_progress-1.2.1-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"         Plugin of progress has been installed, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf pytest-progress-1.2.1.tar.gz; "</span>
                      <span class="s">"cd pytest-progress-1.2.1/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-9. Install syslog-tool"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/pytest_cov-2.8.1-py2.7.egg/pytest-cov.pth"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed pytest-cov, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span> 
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf pytest-cov-2.8.1.tar.gz; "</span>
                      <span class="s">"cd pytest-cov-2.8.1/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-10. Install JDK"</span>
        <span class="c1"># Modify /etc/profile
</span>        <span class="n">target_file</span> <span class="o">=</span> <span class="s">"/etc/profile"</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"cat {} | grep JAVA_HOME"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">target_file</span><span class="p">),</span> <span class="mi">20</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">add_content</span> <span class="o">=</span> <span class="s">"""
export JAVA_HOME=/opt/jdk1.8.0_161
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH
"""</span>

        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/opt/jdk1.8.0_161/release"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed JDK, skip</span><span class="se">\n</span><span class="s">"</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
                <span class="n">append_write</span><span class="p">(</span><span class="n">target_file</span><span class="p">,</span> <span class="n">add_content</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">". {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">target_file</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf jdk-8u161-linux-x64.tar.gz -C /opt/"</span><span class="p">)</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
                <span class="n">append_write</span><span class="p">(</span><span class="n">target_file</span><span class="p">,</span> <span class="n">add_content</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">". {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">target_file</span><span class="p">))</span>

        <span class="k">print</span> <span class="s">"    3-11. Install allure_pytest"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/allure_pytest-2.8.11-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed allure_pytest, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -xvf allure-pytest-2.8.11.tar; "</span>
                      <span class="s">"cd allure-pytest-2.8.11/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-12. Install allure_command"</span>

        <span class="n">bashrc_file</span> <span class="o">=</span> <span class="s">"/root/.bashrc"</span>
        <span class="n">allure_cmd_path</span> <span class="o">=</span> <span class="s">"/opt/allure-2.13.2/bin/allure"</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"cat {} | grep allure"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bashrc_file</span><span class="p">),</span> <span class="mi">20</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">add_content</span> <span class="o">=</span> <span class="s">"alias allure='{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">allure_cmd_path</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">allure_cmd_path</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed allure_command, skip</span><span class="se">\n</span><span class="s">"</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
                <span class="n">append_write</span><span class="p">(</span><span class="n">bashrc_file</span><span class="p">,</span> <span class="n">add_content</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">". {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bashrc_file</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"unzip allure-commandline-2.13.2.zip -d /opt/"</span><span class="p">)</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
                <span class="n">append_write</span><span class="p">(</span><span class="n">bashrc_file</span><span class="p">,</span> <span class="n">add_content</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">". {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bashrc_file</span><span class="p">))</span>

        <span class="k">print</span> <span class="s">"    3-13. Install pylint"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/pylint-1.7.6-py2.7.egg/pylint/epylint.py"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          pylint-1.7.6 has been installed, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf pylint-1.7.6.tar.gz; "</span>
                      <span class="s">"cd pylint-1.7.6; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-14. Install pv at client : {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">pv_cmd</span> <span class="o">=</span> <span class="s">"dpkg -l | grep -w pv"</span>
        <span class="n">remote_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">pv_cmd</span><span class="p">)</span>
        <span class="c1"># print remote_cmd
</span>        <span class="n">pv_flag</span> <span class="o">=</span> <span class="n">install_on_remote_check</span><span class="p">(</span><span class="n">remote_cmd</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">pv_flag</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"          PV has been installed on client {}, skip</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Sync pv deb to remote
</span>            <span class="n">sync_file_cmd</span> <span class="o">=</span> <span class="s">"scp pv_1.2.0-1_amd64.deb root@{}:/root/"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
            <span class="n">pexpect</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">sync_file_cmd</span><span class="p">,</span> <span class="n">events</span><span class="o">=</span><span class="p">{</span><span class="s">'yes'</span><span class="p">:</span> <span class="s">'yes'</span><span class="p">,</span> <span class="s">'password:'</span><span class="p">:</span> <span class="n">passwd</span> <span class="o">+</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">},</span> <span class="n">logfile</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>

            <span class="c1"># Install package on remote
</span>            <span class="n">install_cmd</span> <span class="o">=</span> <span class="s">"dpkg -i /root/pv_1.2.0-1_amd64.deb"</span>
            <span class="n">remote_install_cmd</span> <span class="o">=</span> <span class="s">"sshpass -p {} ssh -p {} -l root {} '{}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">passwd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">client_ip</span><span class="p">,</span> <span class="n">install_cmd</span><span class="p">)</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="n">remote_install_cmd</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-15. Remove old ssh key from /root/.ssh/known_hosts for client : {}</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ssh-keygen -f '/root/.ssh/known_hosts' -R {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-16. Install stress"</span>
        <span class="k">if</span> <span class="n">stress_flag</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"          stress has been installed, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"dpkg -i stress_1.0.1-1ubuntu1_amd64.deb "</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-17. Install syslog-tool"</span>
        <span class="n">do_cmd</span><span class="p">(</span><span class="s">'cp -r syslog-tool /home/'</span><span class="p">)</span>
        <span class="n">do_cmd</span><span class="p">(</span><span class="s">'cd /home/syslog-tool; make clean ; make'</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/home/syslog-tool/tsyslog.ko"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          syslog-tool install success</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="s">'cd /home/syslog-tool; make clean ; make'</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-18. Install pytest-repeat"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/pytest_repeat-0.8.0-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed pytest-repeat, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf pytest-repeat-0.8.0.tar.gz; "</span>
                      <span class="s">"cd pytest-repeat-0.8.0/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-19. Install pytest-timeout"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/pytest_timeout-1.3.4-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed pytest-timeout, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf pytest-timeout-1.3.4.tar.gz; "</span>
                      <span class="s">"cd pytest-timeout-1.3.4/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-20. Install configparser"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/configparser-4.0.2-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed configparser, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf configparser-4.0.2.tar.gz; "</span>
                      <span class="s">"cd configparser-4.0.2/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-21. Install pyparsing"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/pyparsing-2.4.6-py2.7.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed pyparsing, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf pyparsing-2.4.6.tar.gz; "</span>
                      <span class="s">"cd pyparsing-2.4.6/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    3-22. Install scandir"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"/usr/local/lib/python2.7/dist-packages/scandir-1.10.0-py2.7-linux-x86_64.egg"</span><span class="p">):</span>
            <span class="k">print</span> <span class="s">"          Has been installed scandir, skip</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"tar -zxvf scandir-1.10.0.tar.gz; "</span>
                      <span class="s">"cd scandir-1.10.0/; "</span>
                      <span class="s">"python setup.py install; cd ../"</span><span class="p">)</span>

        <span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"         [ERROR]    Path {} is not exists!"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"../python_3rd_lib"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">del_report_dir</span><span class="p">():</span>
    <span class="s">"""  Delete the report directory  """</span>
    <span class="k">print</span> <span class="s">"    5 [Check]    Check if the report directory is deleted</span><span class="se">\n</span><span class="s">"</span>

    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">"../report"</span><span class="p">):</span>
        <span class="n">shutil</span><span class="p">.</span><span class="n">rmtree</span><span class="p">(</span><span class="s">"../report"</span><span class="p">)</span>
        <span class="k">print</span> <span class="s">"      [Success]  Delete report directory success"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"      [SKIP]     No need to delete report directory"</span>

    <span class="n">mkdir_report_path</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">reboot_client_clean_session</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">"[Step 6]  Restart client, and clean unavailable scsi session</span><span class="se">\n</span><span class="s">"</span>

    <span class="n">client_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">white_list_ip</span>

    <span class="k">print</span> <span class="s">"    6-1 [Check]    Power off then power on for client : {}</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
    <span class="c1"># First, reboot client if it is a VM, then check network
</span>    <span class="n">OSCheck</span><span class="p">().</span><span class="n">reboot_client_node</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">"    6-2 [Check]    Check network of client : {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">30</span><span class="p">):</span>
        <span class="n">ping_res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ping {} -c 5"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">),</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">ping_res</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  Client of ({}) works well</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Client of ({}) is not work, please check network settings.</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">client_ip</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"    6-3 [Clean]    Delete all of iqn on client, make sure client will not try "</span> \
          <span class="s">"to re-establish the discard connection</span><span class="se">\n</span><span class="s">"</span>
    <span class="n">unlink_unavailable_scsi_session</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">check_cluser_has_san</span><span class="p">():</span>
    <span class="s">"""
    Cluster should has no iSCSI or FC LUN under Default Virtual Storage.
    Otherwise, assigning GW to VS will report "ASSIGN_GWGROUP_ERROR": 1402
    Caused many use cases to fail
    """</span>
    <span class="k">print</span> <span class="s">"    7-1 [Check]    Check SAN devices created on Default Virtual Storage"</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"scstadmin --list_device"</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="k">if</span> <span class="s">'tgt'</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">or</span> <span class="s">'nulldev'</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Warn]     Has been create SAN device in Default Virtual "</span> \
              <span class="s">"Storage, now delete it/them!</span><span class="se">\n</span><span class="s">"</span>
        <span class="kn">from</span> <span class="nn">testcasebase.Virtual_Storage.iSCSI</span> <span class="kn">import</span> <span class="n">SANManager</span>
        <span class="n">SANManager</span><span class="p">().</span><span class="n">env_clean_san</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  SAN device has not been created in Default Virtual Storage.</span><span class="se">\n</span><span class="s">"</span>


<span class="k">def</span> <span class="nf">check_cluster_health</span><span class="p">():</span>
    <span class="s">"""  pg is all active + clean  """</span>
    <span class="k">print</span> <span class="s">"    7-2 [Check]    Check all PG state"</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">pg_stat</span> <span class="o">=</span> <span class="n">ClusterInfo</span><span class="p">().</span><span class="n">get_pg_stat</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">pg_stat</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  ALL PG is active+clean.</span><span class="se">\n</span><span class="s">"</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    All PG is not active+clean, will exit!</span><span class="se">\n</span><span class="s">"</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">except</span> <span class="nb">RuntimeError</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Warn]     ClusterManager failed: no monitors found, "</span> \
              <span class="s">"maybe the cluster has not been created.</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">return</span> <span class="bp">False</span>


<span class="k">def</span> <span class="nf">check_ctdb_status</span><span class="p">():</span>
    <span class="s">"""  Check ctdb status  """</span>
    <span class="k">print</span> <span class="s">"    7-3 [Check]    Check ctdb state"</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">ctdb_status_ok</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ctdb status | grep OK | wc -l"</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">ctdb_status_not_ok</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ctdb status | grep pnn | grep -v OK | wc -l"</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

        <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">ctdb_status_ok</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">ctdb_status_not_ok</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  ctdb status is OK</span><span class="se">\n</span><span class="s">"</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [ERROR]    Ctdb is not OK, need more than 3 ctdbs with OK status, so exit!</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">restart_rgw</span><span class="p">():</span>
    <span class="s">"""
    In order to avoid rgw not starting, here to restart the rgw service of all nodes
    """</span>
    <span class="k">print</span> <span class="s">"    7-4 [Check]    Restart RGW service</span><span class="se">\n</span><span class="s">"</span>
    <span class="n">all_nodes</span> <span class="o">=</span> <span class="n">ClusterInfo</span><span class="p">().</span><span class="n">get_all_nodes</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">each_node</span> <span class="ow">in</span> <span class="n">all_nodes</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="s">'ssh {} {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">restart_rgw</span><span class="p">),</span> <span class="mi">30</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="s">'ssh {} {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">restart_rgw</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">modify_apache_conf</span><span class="p">():</span>
    <span class="s">"""  Modify apache.conf to make session is available  """</span>
    <span class="k">print</span> <span class="s">"    7-5 [Check]    Check apache conf"</span>

    <span class="n">all_nodes</span> <span class="o">=</span> <span class="n">ClusterManager</span><span class="p">().</span><span class="n">list_nodes</span><span class="p">()</span>
    <span class="n">apache_conf</span> <span class="o">=</span> <span class="s">"/etc/apache2/apache2.conf"</span>

    <span class="k">for</span> <span class="n">each_node</span> <span class="ow">in</span> <span class="n">all_nodes</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ssh {} cat {} | grep -w KeepAlive | grep -v '#' | "</span>
                     <span class="s">"awk '{{print $2}}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">apache_conf</span><span class="p">),</span> <span class="mi">30</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span> 
        <span class="k">if</span> <span class="n">res</span> <span class="o">==</span> <span class="s">"On"</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Action]   Start to modify ({}) on node ({}) to "</span> \
                  <span class="s">"change KeepAlive to Off"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">apache_conf</span><span class="p">,</span> <span class="n">each_node</span><span class="p">)</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="s">'ssh {} </span><span class="se">\"</span><span class="s">sed -i </span><span class="se">\'</span><span class="s">s/KeepAlive On/KeepAlive Off/</span><span class="se">\'\"</span><span class="s"> {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">apache_conf</span><span class="p">),</span> <span class="mi">30</span><span class="p">)</span>
            <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ssh {} {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">restart_apache</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [Success]  Has been changed KeepAlive from On to Off on node : ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">modify_webpy_session</span><span class="p">():</span>
    <span class="s">"""  Modify /usr/lib/cgi-bin/ezs3/index.py, to change session from 1800 to 86400(24Hours)  """</span>
    <span class="n">index_py</span> <span class="o">=</span> <span class="s">"/usr/lib/cgi-bin/ezs3/index.py"</span>
    <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">    7-6 [Check]    Check  session timeout in {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">index_py</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">index_py</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">"    [ERROR]    File of {} does not exist"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">all_nodes</span> <span class="o">=</span> <span class="n">ClusterManager</span><span class="p">().</span><span class="n">list_nodes</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">each_node</span> <span class="ow">in</span> <span class="n">all_nodes</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ssh {} cat {} | grep web.config.session_parameters | "</span>
                         <span class="s">" grep timeout | awk '{{print $NF}}'"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">index_py</span><span class="p">),</span> <span class="mi">30</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span> 
            <span class="k">if</span> <span class="n">res</span> <span class="o">==</span> <span class="s">'1800'</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"        [Action]   Start to modify ({}) on node ({}) to "</span> \
                  <span class="s">"change session from 1800 to 86400"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">index_py</span><span class="p">,</span> <span class="n">each_node</span><span class="p">)</span>
                <span class="n">do_cmd</span><span class="p">(</span><span class="s">'ssh {} </span><span class="se">\"</span><span class="s">sed -i </span><span class="se">\'</span><span class="s">s/ = 1800/ = 86400/</span><span class="se">\'\"</span><span class="s"> {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">index_py</span><span class="p">),</span> <span class="mi">30</span><span class="p">)</span>
                <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ssh {} {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">restart_apache</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"        [Success]  Has been changed session from 1800 to 86400 "</span> \
                      <span class="s">"on node : ({})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">check_disk_nums</span><span class="p">():</span>
    <span class="s">"""  Check disk numbers, each vm has more than 6 disks  """</span>
    <span class="k">print</span> <span class="s">"    7-7 [Check]    Check disk nums"</span>
    <span class="n">all_nodes_ip</span> <span class="o">=</span> <span class="n">ClusterInfo</span><span class="p">().</span><span class="n">get_all_nodes</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">each_node</span> <span class="ow">in</span> <span class="n">all_nodes_ip</span><span class="p">:</span>
        <span class="n">disks</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ssh {} lsscsi | grep -v INTEL | grep -v NVME | grep "</span>
                       <span class="s">"disk | wc -l"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">),</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">disks</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"        [ERROR]    Disk member on node : ({}) is not match automation test."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">each_node</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
        <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  Check disk numbers pass.</span><span class="se">\n</span><span class="s">"</span>


<span class="k">def</span> <span class="nf">run_create_cluster</span><span class="p">():</span>
    <span class="s">"""  Create the cluster   """</span>
    <span class="n">is_created_cluster</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">is_config_cluster</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">is_cluster_health</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="n">res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ceph -s"</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">res</span> <span class="o">==</span> <span class="s">''</span><span class="p">:</span>
        <span class="c1"># Not create cluster
</span>        <span class="n">is_created_cluster</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">is_config_cluster</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">is_cluster_health</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="s">'fsmap'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">or</span> <span class="s">'no osds'</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">or</span> <span class="s">"client io"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
            <span class="c1"># Create cluster, but not create OSD/MDS
</span>            <span class="n">is_created_cluster</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">is_config_cluster</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">is_cluster_health</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="s">'stuck'</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">or</span> <span class="s">'peering'</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">or</span> <span class="s">'recovery'</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">or</span> <span class="s">'osds are down'</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
            <span class="n">is_created_cluster</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">is_config_cluster</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">is_cluster_health</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="s">"client io"</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">and</span> <span class="s">'fsmap'</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">and</span> <span class="s">'up:active'</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">and</span> <span class="s">'active+clean'</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
            <span class="n">osd_stat</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ceph -s | grep osdmap"</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="n">osd_stat</span> <span class="o">=</span> <span class="n">osd_stat</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
            <span class="n">all_osd</span> <span class="o">=</span> <span class="n">osd_stat</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">up_osd</span> <span class="o">=</span> <span class="n">osd_stat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
            <span class="n">in_osd</span> <span class="o">=</span> <span class="n">osd_stat</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span>
            <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">all_osd</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">(</span><span class="n">up_osd</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">up_osd</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">(</span><span class="n">in_osd</span><span class="p">):</span>
                <span class="n">is_created_cluster</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">is_config_cluster</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">is_cluster_health</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">is_created_cluster</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">is_config_cluster</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">is_cluster_health</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="n">is_created_cluster</span><span class="p">,</span> <span class="n">is_config_cluster</span><span class="p">,</span> <span class="n">is_cluster_health</span>


<span class="k">def</span> <span class="nf">check_cluster_state</span><span class="p">():</span>
    <span class="s">"""  Check cluster status   """</span>
    <span class="n">source_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">()</span>
    <span class="n">report_path</span> <span class="o">=</span> <span class="n">mkdir_report_path</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">"[Step 7]  Start checking that the cluster environment meets the "</span> \
          <span class="s">"requirements for automation case execution</span><span class="se">\n</span><span class="s">"</span>

    <span class="n">cluster_state</span> <span class="o">=</span> <span class="n">run_create_cluster</span><span class="p">()</span>
    <span class="c1"># print cluster_state[0], cluster_state[1], cluster_state[2]
</span>
    <span class="k">if</span> <span class="n">cluster_state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="c1"># Generate run time of start
</span>        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"date '+%Y-%m-%d %H:%M:%S' &gt; {}/time.txt"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">report_path</span><span class="p">),</span> <span class="mi">60</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    7-1 [Check]    Not create cluster. First, create cluster, "</span> \
              <span class="s">"then create&amp;enable OSD/MDS service.</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">create_cls_cmd</span> <span class="o">=</span> <span class="s">"PYTHONPATH=. py.test -v -s --cache-clear --full-trace --alluredir ../report/json "</span> \
                         <span class="s">"{}/prepare/create_cluster/test_cluster_creation_wizard.py"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span>
        <span class="c1"># print "create_cls_cmd is : {}".format(create_cls_cmd)
</span>        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="n">create_cls_cmd</span><span class="p">)</span>

        <span class="n">enable_service_cmd</span> <span class="o">=</span> <span class="s">"PYTHONPATH=. py.test -v -s --cache-clear --full-trace --alluredir ../report/json "</span> \
                         <span class="s">"{}/prepare/setup_cluster/test_config_cluster.py"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span>
        <span class="c1"># print "enable_service_cmd is : {}".format(enable_service_cmd)
</span>        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="n">enable_service_cmd</span><span class="p">)</span>

        <span class="n">cluster_flag</span> <span class="o">=</span> <span class="n">check_cluster_health</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">cluster_flag</span><span class="p">:</span>
            <span class="n">restart_rgw</span><span class="p">()</span>
            <span class="n">modify_apache_conf</span><span class="p">()</span>
            <span class="n">modify_webpy_session</span><span class="p">()</span>

        <span class="n">cook_file</span> <span class="o">=</span> <span class="n">source_path</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="s">"cookie.jar"</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">cook_file</span><span class="p">):</span>
            <span class="n">os</span><span class="p">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">cook_file</span><span class="p">)</span>

        <span class="c1"># Check the cluster created result
</span>        <span class="n">res</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"ceph -s"</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">      [ERROR]    Create cluster failed, please to view log of "</span> \
                  <span class="s">"pytest_autotest.log under report directory!!!</span><span class="se">\n</span><span class="s">"</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">cluster_state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">cluster_state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"    7-1 [Check]    Not create&amp;enable OSD/MDS service, now create&amp;enable OSD/MDS</span><span class="se">\n</span><span class="s">"</span>

        <span class="c1"># Generate run time of start
</span>        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"date '+%Y-%m-%d %H:%M:%S' &gt; {}/time.txt"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">report_path</span><span class="p">),</span> <span class="mi">60</span><span class="p">)</span>

        <span class="n">enable_service_cmd</span> <span class="o">=</span> <span class="s">"PYTHONPATH=. py.test -v -s --cache-clear --full-trace --alluredir ../report/json "</span> \
                             <span class="s">"{}/prepare/setup_cluster/test_config_cluster.py"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span>
        <span class="c1"># print "enable_service_cmd is : {}".format(enable_service_cmd)
</span>        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="n">enable_service_cmd</span><span class="p">)</span>
        <span class="n">cluster_flag</span> <span class="o">=</span> <span class="n">check_cluster_health</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">cluster_flag</span><span class="p">:</span>
            <span class="n">restart_rgw</span><span class="p">()</span>
            <span class="n">modify_apache_conf</span><span class="p">()</span>
            <span class="n">modify_webpy_session</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">cluster_state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">cluster_state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">cluster_state</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"    7-1 [Check]    Cluster is not health, Skip to run test case, exit!"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"        [Success]  The current tested environment cluster is normal, and all test </span><span class="se">\n</span><span class="s">"</span> \
              <span class="s">"                   cases are run directly.</span><span class="se">\n</span><span class="s">"</span>

        <span class="c1"># Generate  run time of start
</span>        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"date '+%Y-%m-%d %H:%M:%S' &gt; {}/time.txt"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">report_path</span><span class="p">),</span> <span class="mi">60</span><span class="p">)</span>

        <span class="n">check_cluser_has_san</span><span class="p">()</span>
        <span class="n">cluster_flag</span> <span class="o">=</span> <span class="n">check_cluster_health</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">cluster_flag</span><span class="p">:</span>
            <span class="n">check_ctdb_status</span><span class="p">()</span>
            <span class="c1"># check_disk_nums()
</span>            <span class="n">restart_rgw</span><span class="p">()</span>
            <span class="n">modify_apache_conf</span><span class="p">()</span>
            <span class="n">modify_webpy_session</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">run_part_or_all_test_case</span><span class="p">(</span><span class="n">part</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">case_file</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""
    Running part or all of test case
    :param part, bool, True means to run all of test case
    :param case_file, string, some python file name of case, split by space, the base path is current path
    like "testcase/Function_Test/case_2_Accounts/test_account_ad.py Function_Test/
    case_3_Hosts/Roles/test_SAN_volume_cache.py"
    """</span>
    <span class="c1"># If setup cluster failed, no need to run all test case
</span>    <span class="c1"># Check cluster and ctdb health status
</span>    <span class="n">cls_health</span> <span class="o">=</span> <span class="n">check_cluster_health</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">cls_health</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">        [ERROR]    Cluster is not health, so no need to run all test case, exit!"</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="n">check_ctdb_status</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">"[Step 8]  Start to run test cases</span><span class="se">\n</span><span class="s">"</span>

    <span class="n">source_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">()</span>
    <span class="n">report_path</span> <span class="o">=</span> <span class="n">mkdir_report_path</span><span class="p">()</span>

    <span class="n">skip_path</span> <span class="o">=</span> <span class="n">source_path</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="s">"prepare"</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">part</span><span class="p">:</span>
        <span class="n">run_all_cmd</span> <span class="o">=</span> <span class="s">"PYTHONPATH=. py.test -v -s -m 'not migration' --cache-clear --full-trace "</span> \
                      <span class="s">"--cov-report xml:../report/coverage.xml --cov=./ --cov-config .coveragerc --ignore={} "</span> \
                      <span class="s">"--alluredir ../report/json {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">skip_path</span><span class="p">,</span> <span class="n">source_path</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    8-1 Start to run all of test case</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="n">run_all_cmd</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">run_part_cmd</span> <span class="o">=</span> <span class="s">"PYTHONPATH=. py.test -v -s --cache-clear --full-trace "</span> \
                      <span class="s">"--cov-report xml:../report/coverage.xml --cov=./ --cov-config .coveragerc "</span> \
                      <span class="s">"--alluredir ../report/json {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">case_file</span><span class="p">)</span>

        <span class="k">print</span> <span class="s">"    8-1 Start to run part of test case</span><span class="se">\n</span><span class="s">"</span>
        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="n">run_part_cmd</span><span class="p">)</span>

    <span class="c1"># Move converage source file to report
</span>    <span class="n">coverage_source</span> <span class="o">=</span> <span class="n">source_path</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="s">".coverage"</span>
    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">coverage_source</span><span class="p">):</span>
        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"mv {} {}/../report"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">coverage_source</span><span class="p">,</span> <span class="n">source_path</span><span class="p">))</span>

    <span class="c1"># Generate pylint output
</span>    <span class="k">print</span> <span class="s">"    8-2 Start to Generate pylint output</span><span class="se">\n</span><span class="s">"</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"pylint --rcfile={}/.pylintrc -f parseable -d I0011,R0801 "</span>
               <span class="s">"{}/testcasebase* | tee {}/../report/pylint.out"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">source_path</span><span class="p">,</span> <span class="n">source_path</span><span class="p">,</span> <span class="n">source_path</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"      Generate pylint failed, backend return : ({})</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">ex</span><span class="p">))</span>

    <span class="c1"># Generate run time of end
</span>    <span class="n">do_cmd</span><span class="p">(</span><span class="s">"date '+%Y-%m-%d %H:%M:%S' &gt;&gt; {}/time.txt"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">report_path</span><span class="p">),</span> <span class="mi">60</span><span class="p">)</span>

    <span class="c1"># Compress pytest_autotest.log
</span>    <span class="n">pytest_log_path</span> <span class="o">=</span> <span class="s">"{}/pytest_autotest.log"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">report_path</span><span class="p">)</span>
    <span class="n">new_name</span> <span class="o">=</span> <span class="s">"{}.gz"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">pytest_log_path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">pytest_log_path</span><span class="p">):</span>
        <span class="n">do_cmd</span><span class="p">(</span><span class="s">"tar -zcvf {} {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">new_name</span><span class="p">,</span> <span class="n">pytest_log_path</span><span class="p">),</span> <span class="mi">60</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"      [ERROR]    No file of {}</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">pytest_log_path</span><span class="p">)</span>

    <span class="c1"># Compress html report, if the html is larger than 30M, send email failed
</span>    <span class="c1"># html_path = "{}/{}".format(report_path, report_name)
</span>    <span class="c1"># if os.path.exists(html_path):
</span>    <span class="c1">#     new_name = "{}.gz".format(report_name)
</span>    <span class="c1">#     do_cmd("tar -zcvf {}/{} {}".format(report_path, new_name, html_path), 60)
</span>    <span class="c1"># else:
</span>    <span class="c1">#     print "      [ERROR]    No html file of {}\n".format(html_path)
</span>
    <span class="c1"># Generate environment.properties for allure
</span>    <span class="n">report_path</span> <span class="o">=</span> <span class="n">get_report_path</span><span class="p">()</span>
    <span class="n">time_file</span> <span class="o">=</span> <span class="n">report_path</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="s">"time.txt"</span>
    <span class="n">version_file</span> <span class="o">=</span> <span class="n">report_path</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="s">"version.txt"</span>
    <span class="n">env_file</span> <span class="o">=</span> <span class="n">report_path</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="s">"json/environment.properties"</span>

    <span class="n">host_ip</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">public_ips</span><span class="p">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">start_time</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"cat {} | head -n 1"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">time_file</span><span class="p">),</span> <span class="mi">20</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">end_time</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"tac {} | head -n 1"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">time_file</span><span class="p">),</span> <span class="mi">20</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">product_name</span> <span class="o">=</span> <span class="n">do_cmd</span><span class="p">(</span><span class="s">"cat {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">version_file</span><span class="p">),</span> <span class="mi">20</span><span class="p">,</span> <span class="bp">True</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>

    <span class="n">write_content</span> <span class="o">=</span> <span class="s">"""Host_IP : {}
Start_Time : {}
End_Time : {}
Product_Info : {}
"""</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">host_ip</span><span class="p">,</span> <span class="n">start_time</span><span class="p">,</span> <span class="n">end_time</span><span class="p">,</span> <span class="n">product_name</span><span class="p">)</span>

    <span class="n">do_cmd</span><span class="p">(</span><span class="s">"echo '{}' &gt; {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">write_content</span><span class="p">,</span> <span class="n">env_file</span><span class="p">),</span> <span class="mi">30</span><span class="p">)</span>

    <span class="c1"># Generate allure html report
</span>    <span class="c1"># do_cmd(". ~/.bashrc;allure generate --clean ../report/json -o ../report/html")
</span>    <span class="n">do_cmd</span><span class="p">(</span><span class="s">". /etc/profile;/opt/allure-2.13.2/bin/allure generate --clean ../report/json -o ../report/html"</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">'-t'</span><span class="p">,</span> <span class="p">[</span><span class="s">'testcase='</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">opt_name</span><span class="p">,</span> <span class="n">opt_value</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt_name</span> <span class="o">==</span> <span class="s">'-t'</span><span class="p">:</span>
            <span class="n">part_flag</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">part_flag</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">run_node_check</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">check_dns_set</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">install_package</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">del_report_dir</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">reboot_client_clean_session</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">check_cluster_state</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">rm_sessions</span><span class="p">()</span>
    <span class="n">get_test_product_version</span><span class="p">()</span>
    <span class="n">run_part_or_all_test_case</span><span class="p">(</span><span class="n">part</span><span class="o">=</span><span class="n">part_flag</span><span class="p">,</span> <span class="n">case_file</span><span class="o">=</span><span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>

    <span class="k">print</span> <span class="s">'-'</span> <span class="o">*</span> <span class="mi">80</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="与jenkins结合">与Jenkins结合</h1>

<p>非本文重点，此处省略。</p>

<p>附带脚本</p>

<p>此脚本放在jenkins账号的email-templates目录下:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jenkins@ubuntu-16:~/email-templates$ pwd
/var/lib/jenkins/email-templates
jenkins@ubuntu-16:~/email-templates$ ls -l
total 20
-rw-rw-r-- 1 jenkins jenkins  5697 Mar 27 16:57 allure-report.groovy
-rw-rw-r-- 1 jenkins jenkins 10764 Jun 17  2019 email-template.groovy
jenkins@ubuntu-16:~/email-templates$
</code></pre></div></div>

<p>allure-report.groovy文件内容如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;</span>
<span class="nt">&lt;style </span><span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
<span class="c">/*base css*/</span>
    <span class="nt">body</span>
    <span class="p">{</span>
      <span class="nl">margin</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
      <span class="nl">padding</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">body</span><span class="o">,</span> <span class="nt">td</span><span class="o">,</span> <span class="nt">th</span>
    <span class="p">{</span>
      <span class="nl">font-family</span><span class="p">:</span> <span class="s1">"Lucida Grande"</span><span class="p">,</span> <span class="s1">"Lucida Sans Unicode"</span><span class="p">,</span> <span class="n">Helvetica</span><span class="p">,</span> <span class="n">Arial</span><span class="p">,</span> <span class="n">Tahoma</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
      <span class="nl">font-size</span><span class="p">:</span> <span class="m">10pt</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">th</span>
    <span class="p">{</span>
      <span class="nl">text-align</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">h1</span>
    <span class="p">{</span>
      <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">a</span>
    <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span><span class="m">#4a72af</span>
    <span class="p">}</span>
<span class="c">/*div styles*/</span>

<span class="nc">.status</span><span class="p">{</span><span class="nl">background-color</span><span class="p">:</span><span class="err">&lt;%=</span> 
            <span class="n">build</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="err">==</span> <span class="s1">"SUCCESS"</span> <span class="err">?</span> <span class="s2">'green'</span> <span class="p">:</span> <span class="s2">'red'</span> <span class="err">%&gt;</span><span class="p">;</span><span class="nl">font-size</span><span class="p">:</span><span class="m">28px</span><span class="p">;</span><span class="nl">font-weight</span><span class="p">:</span><span class="nb">bold</span><span class="p">;</span><span class="nl">color</span><span class="p">:</span><span class="no">white</span><span class="p">;</span><span class="nl">width</span><span class="p">:</span><span class="m">720px</span><span class="p">;</span><span class="nl">height</span><span class="p">:</span><span class="m">52px</span><span class="p">;</span><span class="nl">margin-bottom</span><span class="p">:</span><span class="m">18px</span><span class="p">;</span><span class="nl">text-align</span><span class="p">:</span><span class="nb">center</span><span class="p">;</span><span class="nl">vertical-align</span><span class="p">:</span><span class="nb">middle</span><span class="p">;</span><span class="nl">border-collapse</span><span class="p">:</span><span class="nb">collapse</span><span class="p">;</span><span class="nl">background-repeat</span><span class="p">:</span><span class="nb">no-repeat</span><span class="p">}</span>
<span class="nc">.status</span> <span class="nc">.info</span><span class="p">{</span><span class="nl">color</span><span class="p">:</span><span class="no">white</span><span class="cp">!important</span><span class="p">;</span><span class="nl">text-shadow</span><span class="p">:</span><span class="m">0</span> <span class="m">-1px</span> <span class="m">0</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0.3</span><span class="p">);</span><span class="nl">font-size</span><span class="p">:</span><span class="m">32px</span><span class="p">;</span><span class="nl">line-height</span><span class="p">:</span><span class="m">36px</span><span class="p">;</span><span class="nl">padding</span><span class="p">:</span><span class="m">8px</span> <span class="m">0</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"content round_border"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"status"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"info"</span><span class="nt">&gt;</span>pytest automation build <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">build.result.toString</span><span class="err">().</span><span class="na">toLowerCase</span><span class="err">()</span> <span class="err">%</span><span class="nt">&gt;&lt;/p&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
                <span class="c">&lt;!-- status --&gt;</span>
                        <span class="nt">&lt;table&gt;</span>
                                <span class="nt">&lt;tbody&gt;</span>
                                        <span class="nt">&lt;tr&gt;</span>
                                                <span class="nt">&lt;th&gt;</span>Project:<span class="nt">&lt;/th&gt;</span>
                                                <span class="nt">&lt;td&gt;</span>${project.name}<span class="nt">&lt;/td&gt;</span>
                                        <span class="nt">&lt;/tr&gt;</span>
                                        <span class="nt">&lt;tr&gt;</span>
                                                <span class="nt">&lt;th&gt;</span>Build ${build.displayName}:<span class="nt">&lt;/th&gt;</span>
                                                <span class="nt">&lt;td&gt;&lt;a</span>
                                                        <span class="na">href=</span><span class="s">"${rooturl}${build.url}"</span><span class="nt">&gt;</span>${rooturl}${build.url}<span class="nt">&lt;/a&gt;&lt;/td&gt;</span>
                                        <span class="nt">&lt;/tr&gt;</span>
                                        <span class="nt">&lt;tr&gt;</span>
                                                <span class="nt">&lt;th&gt;</span>Product Version:<span class="nt">&lt;/th&gt;</span>
                                                <span class="nt">&lt;td&gt;&lt;</span><span class="err">%=</span><span class="na">build.environment</span><span class="err">['</span><span class="na">PRODUCT_VERSION</span><span class="err">']%</span><span class="nt">&gt;&lt;/td&gt;</span>
                                        <span class="nt">&lt;/tr&gt;</span>
                                        <span class="nt">&lt;tr&gt;</span>
                                                <span class="nt">&lt;th&gt;</span>Date of build:<span class="nt">&lt;/th&gt;</span>
                                                <span class="nt">&lt;td&gt;</span>${it.timestampString}<span class="nt">&lt;/td&gt;</span>
                                        <span class="nt">&lt;/tr&gt;</span>
                                        <span class="nt">&lt;tr&gt;</span>
                                                <span class="nt">&lt;th&gt;</span>Build duration:<span class="nt">&lt;/th&gt;</span>
                                                <span class="nt">&lt;td&gt;</span>${build.durationString}<span class="nt">&lt;/td&gt;</span>
                                        <span class="nt">&lt;/tr&gt;</span>
                                        <span class="nt">&lt;tr&gt;</span>
                                                <span class="nt">&lt;td</span> <span class="na">colspan=</span><span class="s">"2"</span><span class="nt">&gt;</span><span class="ni">&amp;nbsp;</span><span class="nt">&lt;/td&gt;</span>
                                        <span class="nt">&lt;/tr&gt;</span>
                                <span class="nt">&lt;/tbody&gt;</span>

                        <span class="nt">&lt;/table&gt;</span>
                <span class="c">&lt;!-- main --&gt;</span>
        <span class="nt">&lt;</span><span class="err">%</span> <span class="na">def</span> <span class="na">artifacts = </span><span class="s">build.artifacts</span>
            <span class="na">if</span><span class="err">(</span><span class="na">artifacts</span> <span class="err">!=</span> <span class="na">null</span> <span class="err">&amp;&amp;</span> <span class="na">artifacts.size</span><span class="err">()</span> <span class="nt">&gt;</span> 0) { %&gt;

                        <span class="nt">&lt;b&gt;</span>Build Artifacts:<span class="nt">&lt;/b&gt;</span>
                        <span class="nt">&lt;ul&gt;</span>
            <span class="nt">&lt;</span><span class="err">%</span>          <span class="na">artifacts.each</span><span class="err">()</span> <span class="err">{</span> <span class="na">f</span> <span class="na">-</span><span class="nt">&gt;</span> %&gt;
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"${rooturl}${build.url}artifact/${f}"</span><span class="nt">&gt;</span>${f}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;</span><span class="err">%</span>          <span class="err">}</span> <span class="err">%</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;</span><span class="err">%</span> <span class="err">}</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- artifacts --&gt;</span>

<span class="nt">&lt;</span><span class="err">%</span> 
  <span class="na">lastAllureReportBuildAction = </span><span class="s">build.getAction(ru.yandex.qatools.allure.jenkins.AllureReportBuildAction.class)</span>
  <span class="na">lastAllureBuildAction = </span><span class="s">build.getAction(ru.yandex.qatools.allure.jenkins.AllureBuildAction.class)</span>

  <span class="na">if</span> <span class="err">(</span><span class="na">lastAllureReportBuildAction</span><span class="err">)</span> <span class="err">{</span>
    <span class="na">allureResultsUrl = </span><span class="s">"${rooturl}${build.url}allure"</span>
    <span class="na">allureLastBuildSuccessRate = </span><span class="s">String.format("%.2f",</span> <span class="na">lastAllureReportBuildAction.getPassedCount</span><span class="err">()</span> <span class="na">*</span> <span class="err">100</span><span class="na">f</span> <span class="err">/</span> <span class="na">lastAllureReportBuildAction.getTotalCount</span><span class="err">())</span>
  <span class="err">}</span>
<span class="err">%</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="err">%</span>
<span class="na">pylintResultsUrl = </span><span class="s">"${rooturl}${build.url}violations"</span>
<span class="na">coberturaResultsUrl = </span><span class="s">"${rooturl}${build.url}cobertura"</span>
<span class="err">%</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="err">%</span> <span class="na">if</span> <span class="err">(</span><span class="na">lastAllureReportBuildAction</span><span class="err">)</span> <span class="err">{</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;h2&gt;</span>Allure Results<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;table&gt;</span>
            <span class="nt">&lt;tbody&gt;</span>
                        <span class="nt">&lt;tr&gt;</span>
                            <span class="nt">&lt;th&gt;</span>Total Allure tests run:<span class="nt">&lt;/th&gt;</span>
                            <span class="nt">&lt;td&gt;&lt;a</span> <span class="na">href=</span><span class="s">"${allureResultsUrl}"</span><span class="nt">&gt;</span>${lastAllureReportBuildAction.getTotalCount()}<span class="nt">&lt;/a&gt;&lt;/td&gt;</span>
                        <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;tr&gt;</span>
                            <span class="nt">&lt;th&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #ffff00;"</span><span class="nt">&gt;</span>Failed:<span class="nt">&lt;/span&gt;&lt;/th&gt;</span>
                            <span class="nt">&lt;td&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #ffff00;"</span><span class="nt">&gt;</span>${lastAllureReportBuildAction.getFailedCount()} <span class="nt">&lt;/span&gt;&lt;/td&gt;</span>
                        <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;tr&gt;</span>
                            <span class="nt">&lt;th&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #008000;"</span><span class="nt">&gt;</span>Passed:<span class="nt">&lt;/span&gt;&lt;/th&gt;</span>
                            <span class="nt">&lt;td&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #008000;"</span><span class="nt">&gt;</span>${lastAllureReportBuildAction.getPassedCount()} <span class="nt">&lt;/span&gt;&lt;/td&gt;</span>
                        <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;tr&gt;</span>
                            <span class="nt">&lt;th&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #3366ff;"</span><span class="nt">&gt;</span>Skipped:<span class="nt">&lt;/span&gt;&lt;/th&gt;</span>
                            <span class="nt">&lt;td&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #3366ff;"</span><span class="nt">&gt;</span>${lastAllureReportBuildAction.getSkipCount()} <span class="nt">&lt;/span&gt;&lt;/td&gt;</span>
                        <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;tr&gt;</span>
                            <span class="nt">&lt;th&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #ff0000;"</span><span class="nt">&gt;</span>Broken:<span class="nt">&lt;/span&gt;&lt;/th&gt;</span>
                            <span class="nt">&lt;td&gt;&lt;span</span> <span class="na">style=</span><span class="s">"color: #000000; background-color: #ff0000;"</span><span class="nt">&gt;</span>${lastAllureReportBuildAction.getBrokenCount()} <span class="nt">&lt;/span&gt;&lt;/td&gt;</span>
                        <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;tr&gt;</span>
                            <span class="nt">&lt;th&gt;</span>Success rate: <span class="nt">&lt;/th&gt;</span>
                            <span class="nt">&lt;td&gt;</span>${allureLastBuildSuccessRate}%  <span class="nt">&lt;/td&gt;</span>
                        <span class="nt">&lt;/tr&gt;</span>

            <span class="nt">&lt;/tbody&gt;</span>
<span class="nt">&lt;/table&gt;</span>

<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;img</span> <span class="na">lazymap=</span><span class="s">"${allureResultsUrl}/graphMap"</span> <span class="na">src=</span><span class="s">"${allureResultsUrl}/graph"</span> <span class="na">alt=</span><span class="s">"Allure results trend"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/br&gt;</span>

<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;font</span> <span class="na">size=</span><span class="s">4</span><span class="nt">&gt;&lt;b&gt;</span><span class="ni">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>Pylint history trend<span class="nt">&lt;/b&gt;&lt;/font&gt;</span>
<span class="nt">&lt;/br&gt;</span>
<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;img</span> <span class="na">lazymap=</span><span class="s">"${pylintResultsUrl}"</span> <span class="na">src=</span><span class="s">"${pylintResultsUrl}/graph"</span> <span class="na">alt=</span><span class="s">"pylint"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/br&gt;</span>

<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;font</span> <span class="na">size=</span><span class="s">4</span><span class="nt">&gt;&lt;b&gt;</span><span class="ni">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>Code Coverage history trend<span class="nt">&lt;/b&gt;&lt;/font&gt;</span>
<span class="nt">&lt;/br&gt;</span>
<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;img</span> <span class="na">lazymap=</span><span class="s">"${coberturaResultsUrl}/graphMap"</span> <span class="na">src=</span><span class="s">"${coberturaResultsUrl}/graph"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/br&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="err">}</span> <span class="err">%</span><span class="nt">&gt;</span>                  
  <span class="c">&lt;!-- content --&gt;</span>
  <span class="c">&lt;!-- bottom message --&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>说明：
    脚本内容中有一个PRODUCT_VERSION变量，通过‘Inject environment vairables’来定义。</p>

<p><img class="shadow" src="/img/in-post/inject_env_variables.png" width="800" /></p>

<p>上一张Jenkins运行后发email报告图吧:</p>

<p><img class="shadow" src="/img/in-post/jenkins_allure.png" width="800" /></p>

:ET