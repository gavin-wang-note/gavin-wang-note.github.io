I"H<h1 id="前言">前言</h1>

<p>最近产品基于keepalive增加了S3 takeover IP，业务透过这个takeover IP访问业务，当takeover IP对应的主机网络故障或宕机，以期能够减少宕机或断网对业务中断的影响。</p>

<p>如何测试验证呢？</p>

<p>本文增加一个script，来进行业务中断耗时的验证</p>

<h1 id="测试代码">测试代码</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*_
</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">boto</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">boto.s3.connection</span>
<span class="kn">from</span> <span class="nn">multiprocessing.pool</span> <span class="kn">import</span> <span class="n">ThreadPool</span>
<span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Value</span><span class="p">,</span> <span class="n">JoinableQueue</span> <span class="k">as</span> <span class="n">Queue</span><span class="p">,</span> <span class="n">Lock</span><span class="p">,</span> <span class="n">Event</span>

<span class="kn">from</span> <span class="nn">ezs3.log</span> <span class="kn">import</span> <span class="n">EZLog</span>

<span class="n">EZLog</span><span class="p">.</span><span class="n">init_handler</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">,</span> <span class="s">"./s3_ha.log"</span><span class="p">)</span>
<span class="n">logger</span> <span class="o">=</span> <span class="n">EZLog</span><span class="p">.</span><span class="n">get_logger</span><span class="p">(</span><span class="s">"s3ha"</span><span class="p">)</span>

<span class="n">pool</span> <span class="o">=</span> <span class="n">ThreadPool</span><span class="p">(</span><span class="n">processes</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">connect_s3</span><span class="p">(</span><span class="n">access_key</span><span class="p">,</span> <span class="n">secret_key</span><span class="p">,</span> <span class="n">host</span><span class="p">):</span>
    <span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Connection to S3"</span><span class="p">)</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="n">boto</span><span class="p">.</span><span class="n">connect_s3</span><span class="p">(</span>
           <span class="n">aws_access_key_id</span><span class="o">=</span><span class="n">access_key</span><span class="p">,</span>
           <span class="n">aws_secret_access_key</span><span class="o">=</span><span class="n">secret_key</span><span class="p">,</span>
           <span class="n">host</span><span class="o">=</span><span class="n">host</span><span class="p">,</span>
           <span class="n">calling_format</span> <span class="o">=</span> <span class="n">boto</span><span class="p">.</span><span class="n">s3</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">OrdinaryCallingFormat</span><span class="p">(),</span>
          <span class="p">)</span>

    <span class="k">return</span> <span class="n">conn</span>


<span class="k">def</span> <span class="nf">create_bucket</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">):</span>
    <span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Start to create bucket :(%s)"</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">bucket</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">create_bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">bucket</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">get_bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">bucket</span>


<span class="k">def</span> <span class="nf">input_object</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">thread_idx</span><span class="p">,</span> <span class="n">max_time</span><span class="p">):</span>
    <span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Start to input object"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">20000</span><span class="p">):</span>
        <span class="n">key_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">thread_idx</span><span class="p">)</span> <span class="o">+</span> <span class="s">"_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">'_'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">())</span>
        <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">bucket</span><span class="p">.</span><span class="n">new_key</span><span class="p">(</span><span class="n">key_name</span><span class="p">)</span>
        <span class="n">key</span><span class="p">.</span><span class="n">set_contents_from_string</span><span class="p">(</span><span class="n">key_name</span><span class="p">)</span>
        <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
        <span class="n">cost_time</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>
        <span class="k">if</span> <span class="n">cost_time</span> <span class="o">&gt;</span> <span class="nb">float</span><span class="p">(</span><span class="n">max_time</span><span class="p">):</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">warn</span><span class="p">(</span><span class="s">"Put object : (%s) done, but cost : (%s)s"</span><span class="p">,</span> <span class="n">key_name</span><span class="p">,</span> <span class="n">cost_time</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">thread_pool_input_object</span><span class="p">(</span><span class="n">max_time</span><span class="p">):</span>
    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">results</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pool</span><span class="p">.</span><span class="n">apply_async</span><span class="p">(</span><span class="n">input_object</span><span class="p">,</span> <span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">max_time</span><span class="p">)))</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">results</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">exception</span><span class="p">(</span><span class="s">"Failed to put s3 object"</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">multi_procress_pool_input_object</span><span class="p">(</span><span class="n">max_time</span><span class="p">):</span>
    <span class="n">worker_num</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="n">workq</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
    <span class="n">put_finish_event</span> <span class="o">=</span> <span class="n">Event</span><span class="p">()</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">worker_num</span><span class="p">):</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span>
            <span class="n">target</span><span class="o">=</span><span class="n">input_object</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">max_time</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">t</span><span class="p">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
        <span class="n">tasks</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>

    <span class="n">workq</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
    <span class="n">put_finish_event</span><span class="p">.</span><span class="nb">set</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tasks</span><span class="p">:</span>
        <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"</span><span class="se">\n</span><span class="s">usage: {} max_time</span><span class="se">\n</span><span class="s">  e.g: {} 2</span><span class="se">\n</span><span class="s">  Des: max_time is a second time</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="n">max_time</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="n">access_key</span><span class="o">=</span><span class="s">'4X4A784SUI49J7FETC2J'</span>
    <span class="n">secret_key</span><span class="o">=</span><span class="s">'OOxHdJyDKU71j0jdNcmX5Tool3R12q4ixPa8rNvR'</span>
    <span class="n">host</span> <span class="o">=</span> <span class="s">'1.1.1.1'</span>
    <span class="n">bucket_name</span> <span class="o">=</span> <span class="s">'s3habucket01'</span>

    <span class="n">conn</span> <span class="o">=</span> <span class="n">connect_s3</span><span class="p">(</span><span class="n">access_key</span><span class="p">,</span> <span class="n">secret_key</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span>
    <span class="n">bucket</span> <span class="o">=</span> <span class="n">create_bucket</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">)</span>
    <span class="c1"># thread_pool_input_object(max_time)
</span>    <span class="n">multi_procress_pool_input_object</span><span class="p">(</span><span class="n">max_time</span><span class="p">)</span>
</code></pre></div></div>

<p>这里由于import了产品的函数，脚本不具有通用性，修改了一下:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@node244:~# cat s3_ha.py 
#!/usr/bin/env python
# -*- coding:UTF-8 -*_

import sys
import time
import boto
import logging
from logging import handlers
import boto.s3.connection
from multiprocessing.pool import ThreadPool
from multiprocessing import Process, Value, JoinableQueue as Queue, Lock, Event



class Logger(object):
    level_relations = {
        'debug':logging.DEBUG,
        'info':logging.INFO,
        'warning':logging.WARNING,
        'error':logging.ERROR,
        'crit':logging.CRITICAL
    }

    def __init__(self, filename, level='info', when='D', backCount=3, fmt='%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s'):
        self.logger = logging.getLogger(filename)
        format_str = logging.Formatter(fmt)  # 设置日志格式
        self.logger.setLevel(self.level_relations.get(level)) # 设置日志级别
        sh = logging.StreamHandler() # 往屏幕上输出
        sh.setFormatter(format_str)  # 设置屏幕上显示的格式
        th = handlers.TimedRotatingFileHandler(filename=filename,when=when,backupCount=backCount,encoding='utf-8') # 往文件里写入#指定间隔时间自动生成文件的处理器
        # 实例化TimedRotatingFileHandler
        # interval是时间间隔，backupCount是备份文件的个数，如果超过这个个数，就会自动删除，when是间隔的时间单位，单位有以下几种：
        # S 秒
        # M 分
        # H 小时、
        # D 天、
        # W 每星期（interval==0时代表星期一）
        # midnight 每天凌晨
        th.setFormatter(format_str) # 设置文件里写入的格式
        self.logger.addHandler(sh)  # 把对象加到logger里
        self.logger.addHandler(th)

pool = ThreadPool(processes=20)
log = Logger(filename='s3_ha.log')

def connect_s3(access_key, secret_key, host):
    log.logger.info("Connection to S3")
    conn = boto.connect_s3(
           aws_access_key_id=access_key,
           aws_secret_access_key=secret_key,
           host=host,
           is_secure=False,
           calling_format = boto.s3.connection.OrdinaryCallingFormat(),
          )

    return conn


def create_bucket(conn, bucket_name):
    log.logger.info("Start to create bucket : (%s)", bucket_name)
    try:
        bucket = conn.create_bucket(bucket_name)
    except:
        bucket = conn.get_bucket(bucket_name)

    return bucket


def input_object(bucket, thread_idx, max_time):
    log.logger.info("Start to input object")
    for i in xrange(100000):
        key_name = str(thread_idx) + "_" + str(i) + '_' + str(time.time())
        start_time = time.time()
        key = bucket.new_key(key_name)
        key.set_contents_from_string(key_name)
        end_time = time.time()
        cost_time = end_time - start_time
        # log.logger.info("--  start_time is : (%s), end_time is : (%s), cost_time is : (%s), max_time is : (%s)", start_time, end_time, cost_time, max_time)
        if cost_time &gt; float(max_time):
            log.logger.warn("Put object : (%s) done, but cost : (%s)s", key_name, cost_time)


def thread_pool_input_object(max_time):
    results = []
    for i in xrange(20):
        results.append(pool.apply_async(input_object, (bucket, i, max_time)))

    for (idx, result) in enumerate(results):
        try:
            r = result.get()
        except:
            log.logger.exception("Failed to put s3 object")


def multi_procress_pool_input_object(max_time):
    worker_num = 20
    workq = Queue()
    put_finish_event = Event()
    tasks = []
    for i in xrange(worker_num):
        t = Process(
            target=input_object, args=(bucket, i, max_time)
        )
        t.daemon = True
        t.start()
        tasks.append(t)

    workq.join()
    put_finish_event.set()
    for t in tasks:
        t.join()


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print "\nusage: {} max_time\n  e.g: {} 2\n  Des: max_time is a second time\n".format(sys.argv[0], sys.argv[0])
        sys.exit(2)

    max_time = sys.argv[1]

    access_key='9QK0PJ5S6TKZLEBN1QO0'
    secret_key='iJCIMyq8Ps47SyTIUjG4Z3EAdAZ69fjfQch66VRk'
    host = '1.6.72.80'
    bucket_name = 's3habucket01'

    conn = connect_s3(access_key, secret_key, host)
    bucket = create_bucket(conn, bucket_name)
    # thread_pool_input_object(max_time)
    multi_procress_pool_input_object(max_time)

root@node244:~#
</code></pre></div></div>

:ET