<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://172.17.73.80:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://172.17.73.80:4000/" rel="alternate" type="text/html" /><updated>2019-11-23T17:29:14+08:00</updated><id>http://172.17.73.80:4000/feed.xml</id><title type="html">Gavin Blog</title><subtitle>关于软件测试, 与你一起发现更大的世界</subtitle><entry><title type="html">nose测试用例编写规则基本要求</title><link href="http://172.17.73.80:4000/2019/11/21/write-nose-test-case-role/" rel="alternate" type="text/html" title="nose测试用例编写规则基本要求" /><published>2019-11-21T00:00:00+08:00</published><updated>2019-11-21T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2019/11/21/write-nose-test-case-role</id><content type="html" xml:base="http://172.17.73.80:4000/2019/11/21/write-nose-test-case-role/">&lt;h2 id=&quot;用例编写基本规则要求&quot;&gt;&lt;strong&gt;用例编写基本规则要求&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;1test_xxxxpy尽量避免逻辑操作纯粹是function的调用&quot;&gt;1、test_xxxx.py尽量避免逻辑操作，纯粹是function的调用&lt;/h3&gt;

&lt;h3 id=&quot;2测试用例的名称携带上testlink对应测试用例的编号&quot;&gt;2、测试用例的名称，携带上TestLink对应测试用例的编号&lt;/h3&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/test_link_case_no.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;test_9143_same_daemon_different_signal， 对应TestLink的用例为：&lt;/p&gt;

&lt;p&gt;Sc-9143:Same daemon, different signal core file)&lt;/p&gt;

&lt;h3 id=&quot;3测试用例的__doc__不得含有中文字符&quot;&gt;3、测试用例的__doc__，不得含有中文字符&lt;/h3&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;​    “”” Sc-9143:Same daemon，different signal core file “””&lt;/p&gt;

&lt;p&gt;这里的逗号，是中文符号，会导致用例报错：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/doc_error.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4避免测试用例之间存在依赖关系&quot;&gt;4、避免测试用例之间存在依赖关系&lt;/h3&gt;

&lt;p&gt;（1）每个测试suite中的测试用例互相不依赖；&lt;/p&gt;

&lt;p&gt;（2）测试suite中的用例，尽可能避免依赖关系&lt;/p&gt;

&lt;p&gt;如TestLink中上一个用例是创建，下一个用例是删除，则合并这两个用例为一个自动化测试用例。&lt;/p&gt;

&lt;h3 id=&quot;5日志记录对齐要求&quot;&gt;5、日志记录对齐要求&lt;/h3&gt;

&lt;p&gt;日志记录，执行动作的记录，开头增加[Action]；检查动作的记录，开头增加[Check];&lt;/p&gt;

&lt;p&gt;断言记录的log，开头增加[ERROR]； 操作成功的log，开头增加[SUCCESS]； 不需要检查点的，开头增加[Skip]；&lt;/p&gt;

&lt;p&gt;具体要求如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Prepare]&lt;/strong&gt; &lt;strong&gt;后面跟2&lt;/strong&gt;&lt;strong&gt;个空格；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Action]&lt;/strong&gt; &lt;strong&gt;后面跟3&lt;/strong&gt;&lt;strong&gt;个空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Start]&lt;/strong&gt; &lt;strong&gt;后面跟4&lt;/strong&gt;&lt;strong&gt;个空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Check]&lt;/strong&gt; &lt;strong&gt;后面跟4&lt;/strong&gt;&lt;strong&gt;个空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Success]&lt;/strong&gt; &lt;strong&gt;后面跟2&lt;/strong&gt;&lt;strong&gt;个空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Skip]&lt;/strong&gt; &lt;strong&gt;后面跟5&lt;/strong&gt;&lt;strong&gt;个空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;debug&lt;/strong&gt;&lt;strong&gt;级别的log&lt;/strong&gt;&lt;strong&gt;，内容前面跟2&lt;/strong&gt;&lt;strong&gt;个-&lt;/strong&gt;&lt;strong&gt;，之后&lt;/strong&gt; &lt;strong&gt;再加2&lt;/strong&gt;&lt;strong&gt;个空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;assert&lt;/strong&gt;&lt;strong&gt;中，[ERROR]&lt;/strong&gt; &lt;strong&gt;后面跟2&lt;/strong&gt;&lt;strong&gt;个空格&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;6用例的执行顺序&quot;&gt;6、用例的执行顺序&lt;/h3&gt;

&lt;p&gt;执行 nosetests -s 可看到调用顺序，用例执行顺序，根据ASSII进行排序，在用例有关联情况下，需要对用例名称增加数字编号，人为的干预用例执行顺序，比如test_1_xxx, test_2_yyy。&lt;/p&gt;

&lt;h3 id=&quot;7代码规范要求&quot;&gt;7、代码规范要求&lt;/h3&gt;

&lt;p&gt;执行pylint，确保检查结果分值=10&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;pylint -r y testcasebase/Virtual_Storage/vs_user.py --rcfile=./pylintrc
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MESSAGE_TYPE 有如下几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(C) 惯例。违反了编码风格标准&lt;/li&gt;
  &lt;li&gt;(R) 重构。写得非常糟糕的代码。&lt;/li&gt;
  &lt;li&gt;(W) 警告。某些 Python 特定的问题。&lt;/li&gt;
  &lt;li&gt;(E) 错误。很可能是代码中的错误。&lt;/li&gt;
  &lt;li&gt;(F) 致命错误。阻止 Pylint 进一步运行的错误&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8用例文件权限&quot;&gt;8、用例文件权限&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;统一使用644&lt;/strong&gt;&lt;strong&gt;权限&lt;/strong&gt;，否则默认情况下无法被nosetests search到，自然就不会被执行到，因为nosetesst默认只查找644权限的文件。&lt;/p&gt;

&lt;h3 id=&quot;9避免在class与setup_class之间做比较重的动作&quot;&gt;9、避免在class与setup_class之间做比较重的动作&lt;/h3&gt;

&lt;p&gt;比如下文中的RRS用例 test_remote_replication_tasks.py（下文代码是一个不可取的代码，这里仅做示例用）&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/bad_eg.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在class TestReplicationTask 与setup_class之间，启用了RRS服务、创建了S3账号并创建bucket，最后上传了一些object到bucket中。正常情况下，这部分动作应该是在用例被执行之前要做的，然后会立刻执行setup_class中的动作，接着执行用例，最后teardown。实际上，在run.py 去执行所有测试用例的时候， 在init完所有的class之后（即创建完session后），会先执行所有test_xx.py中定义在class 与 setup_class之间的所有动作， 这也无可厚非，但是，由于约束了用例的执行顺序，case_2_Accounts 会优先于 case_5_Remote_DR被执行，而case_2_Accounts里将其他pool设置为S3 pool的动作，这势必会清理掉在执行run.py init结束后所创建的所有bucket与bucket下的object，到case_5_Remote_DR被执行时，曾经创建的bucket与bucket下的object早已不复存在，自然case_5_Remote_DR下面的相关用例就会失败。&lt;/p&gt;

&lt;p&gt;故而，建议：&lt;/p&gt;

&lt;p&gt;避免在class与setup_class之间做比较重的动作。对于较重的动作，放在setup_class中，好处有2：&lt;/p&gt;

&lt;p&gt;（1）避免被其他class import时做更多、更重的动作&lt;/p&gt;

&lt;p&gt;（2）避免用例suite间前后有依赖关系，给用例排查带来难度&lt;/p&gt;

&lt;h3 id=&quot;10用例文件名称用例中定义变量名称全局唯一&quot;&gt;10、用例文件名称、用例中定义变量名称全局唯一&lt;/h3&gt;

&lt;p&gt;对于测试用例中定义的变量，诸如文件夹名称、子目录名称、名称、名称、名称、名称、用例执行过程中产生的文件的名称等等，要保持全局唯一，即所有用例中不出现同名的文件名、目录名、名等。当有用例出错时，可以根据这个名称，定位到是哪个用例产生了问题，因为具有唯一性，可以排除其他用例带来的干扰。&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Automation" /><category term="nose" /><summary type="html">用例编写基本规则要求</summary></entry><entry><title type="html">nose进度条中展示执行用例数与总数</title><link href="http://172.17.73.80:4000/2019/11/20/nose-progress-bar/" rel="alternate" type="text/html" title="nose进度条中展示执行用例数与总数" /><published>2019-11-20T00:00:00+08:00</published><updated>2019-11-20T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2019/11/20/nose-progress-bar</id><content type="html" xml:base="http://172.17.73.80:4000/2019/11/20/nose-progress-bar/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;在使用nose 插件时，发现这个插件只能显示进度（nose-progressive），并不知道当前执行多少个用例，执行到哪个了，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/before_progress_bar.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;期待效果&quot;&gt;期待效果&lt;/h1&gt;

&lt;p&gt;这里源码有个问题，同时使用高亮（nose的  colorama  和  walkingnine-colorunit）和进度，会导致高亮和进度在用例执行结果信息输出时，两部分信息展示混杂在一起，已经修改源码解决，安装后无需做任何调整。&lt;/p&gt;

&lt;p&gt;由于只能看到一个进度条，无法知道当前要执行多少个用例，以及执行到了第几个用例，再次修改之。在进度条前面，显示已执行用例数（包含当前正在执行的用例）与总共要执行的用例数，效果如下图所示：&lt;/p&gt;

&lt;p&gt;于是对源码（nose-progressive-master/noseprogressive/bar.py）做了如下调整：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def update(self, test_path, number):
    &quot;&quot;&quot;Draw an updated progress bar.

    At the moment, the graph takes a fixed width, and the test identifier
    takes the rest of the row, truncated from the left to fit.

    test_path -- the selector of the test being run
    number -- how many tests have been run so far, including this one

    &quot;&quot;&quot;
    # TODO: Play nicely with absurdly narrow terminals. (OS X's won't even
    # go small enough to hurt us.)

    # Figure out graph:
    GRAPH_WIDTH = 14
    # min() is in case we somehow get the total test count wrong. It's tricky.
    num_filled = int(round(min(1.0, float(number) / self.max) * GRAPH_WIDTH))
    graph = ''.join([self._fill_cap(' ' * num_filled),
                     self._empty_cap(self._empty_char * (GRAPH_WIDTH - num_filled))])

    # Figure out the test identifier portion:
    # Avoid causing progress bar wraps due to more test cases when 
    # show number of runned/total test cases, modify it by wangyunzeng 2019-01-30
    # cols_for_path = self.cols - GRAPH_WIDTH - 2  # 2 spaces between path &amp;amp; graph
    cols_for_path = self.cols - GRAPH_WIDTH - 13  # 13 spaces between path &amp;amp; graph
    if len(test_path) &amp;gt; cols_for_path:
        test_path = test_path[len(test_path) - cols_for_path:]
    else:
        test_path += ' ' * (cols_for_path - len(test_path))

    # Put them together, and let simmer:
    # Show number of runned/total test cases, modify it by wangyunzeng 2019-01-30
    # self.last = self._term.bold(test_path) + '  ' + graph
    self.last = self._term.bold(test_path) + '  ' + str(number) + '/' + str(self.max) + '  ' + graph
    with self._at_last_line():
        self.stream.write(self.last)
    self.stream.flush()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次执行，效果图如下：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/after_progress_bar.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是不是清爽很多了~&lt;/p&gt;</content><author><name>Gavin</name></author><category term="nose" /><category term="Automation" /><category term="Progress bar" /><summary type="html">概述</summary></entry><entry><title type="html">Ununtu14.04 安装Jekyll及Github部署流程</title><link href="http://172.17.73.80:4000/2019/11/20/Install-Jekyll-with-Github/" rel="alternate" type="text/html" title="Ununtu14.04 安装Jekyll及Github部署流程" /><published>2019-11-20T00:00:00+08:00</published><updated>2019-11-20T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2019/11/20/Install-Jekyll-with-Github</id><content type="html" xml:base="http://172.17.73.80:4000/2019/11/20/Install-Jekyll-with-Github/">&lt;h1 id=&quot;jekyll本地搭建开发环境以及github部署流程&quot;&gt;Jekyll本地搭建开发环境以及Github部署流程&lt;/h1&gt;

&lt;h2 id=&quot;本地搭建jekyll&quot;&gt;本地搭建Jekyll&lt;/h2&gt;

&lt;p&gt;本文以ubuntu14.04为例。&lt;/p&gt;

&lt;p&gt;根据最新版本的要求， Jekyll 3 要求 Ruby 2.0.0 及以上的版本。但 Ubuntu 14.04 apt-get 默认提供的版本较低（1.9），所以需要从其他地方安装最新的版本。&lt;/p&gt;

&lt;h3 id=&quot;安装-rbenv&quot;&gt;安装 rbenv&lt;/h3&gt;

&lt;p&gt;从 Github 上 clone, 再添加路径 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git clone git://github.com/sstephenson/rbenv.git ~/.rbenv

echo 'export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bashrc

echo 'eval &quot;$(rbenv init -)&quot;' &amp;gt;&amp;gt; ~/.bashrc

source ~/.bashrc
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们需要一个 rbenv 插件 ruby-build 来编译并安装 Ruby .&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

echo 'export PATH=&quot;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bashrc

source ~/.bashrc
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装 rbenv-gem-rehash . 当使用 gem 安装或卸载 Ruby package 时，这个插件自动调用 rbenv rehash .&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装nodejs&quot;&gt;安装Node.js&lt;/h3&gt;

&lt;p&gt;官网提供的方法是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -

apt-get install -y nodejs
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;npm 也会被安装.&lt;/p&gt;

&lt;h3 id=&quot;安装gem&quot;&gt;安装gem&lt;/h3&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;先跳过安装，如果没有&lt;/strong&gt;&lt;strong&gt;gem&lt;/strong&gt;&lt;strong&gt;，再来安装与设置环境变量&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;apt-get install gem
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置gem环境变量&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;echo '# Install Ruby Gems to ~/gems' &amp;gt;&amp;gt; ~/.zshrc

echo 'export GEM_HOME=&quot;$HOME/gems&quot;' &amp;gt;&amp;gt; ~/.zshrc

echo 'export PATH=&quot;$HOME/gems/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.zshrc

source ~/.zshrc
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装-ruby-2x-和-jekyll-40&quot;&gt;安装 Ruby 2.x 和 Jekyll 4.0&lt;/h3&gt;

&lt;p&gt;首先确定相关的依赖已经安装.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;apt-get update

apt-get install build-essential libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt1-dev libffi-dev python-software-properties
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后运行下面的语句：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;rbenv install 2.4.0

rbenv global 2.4.0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于jekyll requires RubyGems version &amp;gt;= 2.7.0，需要更新gem&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;gem update --system
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果上面的命令不行，需要执行下面的命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;gem install rubygems-update

update_rubygems
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功更新后，查看gem版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@code80:~# gem -v
3.0.6
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;开始安装jekyll&quot;&gt;开始安装jekyll&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;gem install bundle

gem install jekyll
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/install_jekyll_1.jpg&quot; width=&quot;1200&quot; /&gt;
&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/install_jekyll_2.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过下面的方法检查安装是否成功.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@code80:~# jekyll -v
jekyll 4.0.0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用jekyll创建你的博客站点&quot;&gt;使用Jekyll创建你的博客站点&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;jekyll new blog
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;执行“jekyll new blog”会卡住很久，耐心等待一下（或者tmux里执行），成功后会看到：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/jeky_new_blog.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;启动jekyll服务&quot;&gt;启动jekyll服务&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cd blog

jekyll serve
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会看到如下效果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@code80:~/blog# jekyll serve
Configuration file: /root/blog/_config.yml
            Source: /root/blog
       Destination: /root/blog/_site
 Incremental build: disabled. Enable with --incremental
      Generating... 
       Jekyll Feed: Generating feed for posts
                    done in 0.624 seconds.
 Auto-regeneration: enabled for '/root/blog'
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;尝试web访问&quot;&gt;尝试web访问&lt;/h4&gt;

&lt;p&gt;由于jekyll将地址绑定到了127.0.0.1，导致局域网的其它机器并不能访问它的服务。但实际上只要改变运行jekyll的参数就可以了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; root@code80:~/blog# jekyll serve -w --host=172.17.73.80
Configuration file: /root/blog/_config.yml
            Source: /root/blog
       Destination: /root/blog/_site
 Incremental build: disabled. Enable with --incremental
      Generating... 
       Jekyll Feed: Generating feed for posts
                    done in 0.49 seconds.
 Auto-regeneration: enabled for '/root/blog'
    Server address: http://172.17.73.80:4000/
  Server running... press ctrl-c to stop.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过172.17.73.80这个地址，访问web：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/default_ui.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，jekyll安装好了。&lt;/p&gt;

&lt;h2 id=&quot;使用jekyll写博文&quot;&gt;使用Jekyll写博文&lt;/h2&gt;

&lt;h3 id=&quot;博文结构&quot;&gt;博文结构&lt;/h3&gt;

&lt;p&gt;我们进入blog目录后，会发现Jekyl的结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/default_tree.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;博文发布测试&quot;&gt;博文发布测试&lt;/h3&gt;

&lt;p&gt;我们进入_post目录，撰写的markdown语法的博文都放在这里。默认会有一篇测试文章：2019-11-21-welcome-to-jekyll.markdown.&lt;/p&gt;

&lt;p&gt;现在写两个新的md文档&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;-rw-r--r-- 1 root root 3319 Nov 21 21:20 2019-11-20-nose-progress-bar.md

-rw-r--r-- 1 root root 5018 Nov 21 21:20 2019-11-21-write-nose-test-case-role.md
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后刷新一下浏览器、发现页面并没有变化.因为我们还没有通过Jekyll build去生成。&lt;/p&gt;

&lt;h3 id=&quot;jekyll-build&quot;&gt;jekyll build&lt;/h3&gt;

&lt;p&gt;默认情况下，服务会以前台的方式挂起，如果希望用后台进程运行服务，我们可以使用 –detach参数，缩写参数为-B(应该是Background的首字母)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;jekyll serve build --detach -w --host=172.17.73.80
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;jekyll serve build -B -w --host=172.17.73.80
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;p&gt;如果用vagrant虚拟机去安装jekyll，那么启动服务时还需要加上-H参数，指定访问主机号为0.0.0.0，即jekyll serve build -B -H 0.0.0.0,否则vagrant下可能启动失败&lt;/p&gt;

&lt;p&gt;再查看首页，发现已经有三篇文章了！&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/3_test_file.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;博文头信息&quot;&gt;博文头信息&lt;/h3&gt;

&lt;p&gt;打开一个markdown,可以看见开头有如下几个东东。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;---

layout: post

title: &quot;Welcome to Jekyll!&quot;

date:  2019-11-21 20:52:45 +0800

categories: jekyll update

---
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;layout表示使用的是post布局，title是文章标题，date是自动生成的日期，categories是该文章生成html文件后存放的目录，可以去_site/jekyll/update下找到对应日期下面的html文档。当然你也可以只设置jekyll单一的目录，甚至是更多级别的目录，用空格分开即可。头信息设置完成后就可以书写正文了。&lt;/p&gt;

&lt;p&gt;如果每次都输入这些头信息，还要去整理格式，那么一定很烦躁，这种重复性的东西我们就把它自动化，通过Rakefile去解决，它类似shell这样的脚本，可以使用交互模式。以下是我的Rakefile,可以复制后命名为Rakefile，放在站点根目录直接使用，也可以修改为适合自己的Rakefile：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;task :default =&amp;gt; :new

require 'fileutils'

desc &quot;创建新 post&quot;

task :new do

 puts &quot;请输入要创建的 post URL：&quot;

  @url = STDIN.gets.chomp

  puts &quot;请输入 post 标题：&quot;

  @name = STDIN.gets.chomp

  puts &quot;请输入 post 子标题：&quot;

  @subtitle = STDIN.gets.chomp

  puts &quot;请输入 post 分类，以空格分隔：&quot;

  @categories = STDIN.gets.chomp

  puts &quot;请输入 post 标签：&quot;

  @tag = STDIN.gets.chomp

  @slug = &quot;#{@url}&quot;

  @slug = @slug.downcase.strip.gsub(' ', '-')

  @date = Time.now.strftime(&quot;%F&quot;)

  @post_name = &quot;_posts/#{@date}-#{@slug}.md&quot;

  if File.exist?(@post_name)

​      abort(&quot;文件名已经存在！创建失败&quot;)

  end

  FileUtils.touch(@post_name)

  open(@post_name, 'a') do |file|

​      file.puts &quot;---&quot;

​      file.puts &quot;layout: post&quot;

​      file.puts &quot;title: #{@name}&quot;

​      file.puts &quot;subtitle: #{@subtitle}&quot;

​      file.puts &quot;author: Gavin&quot;

​      file.puts &quot;date: #{Time.now}&quot;

​      file.puts &quot;categories: #{@categories}&quot;

​      file.puts &quot;tag: #{@tag}&quot;

​      file.puts &quot;---&quot;

  end

  exec &quot;vi #{@post_name}&quot;

end
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;如何使用rake&quot;&gt;如何使用Rake&lt;/h3&gt;

&lt;p&gt;输入一下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;rake new
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;rake会启动交互模式，让你依次输入title，subtitle，author，categories，tag等信息，并为你创建好具有头信息的markdown文件。如下一样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;请输入要创建的 post URL：

testurl

请输入 post 标题：

testpost

请输入 post 子标题：

subtitle  

请输入 post 分类，以空格分隔：

jekyll

请输入 post 标签：

技术
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们查看_post目录，发现已经有一篇2019-11-21-testurl.md文章，打开看下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;---

layout: post

title: testpost

subtitle: subtitle

author: gavin

date: 2019-11-21 21:39:27 +0800

categories: jekyll

tag: 技术

---
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用github-pages服务生成个人博客&quot;&gt;使用Github pages服务生成个人博客&lt;/h2&gt;

&lt;h3 id=&quot;创建我们的仓库&quot;&gt;创建我们的仓库&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/my_pro.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如此，我们已经可以通过浏览器输入 &lt;a href=&quot;https://link.jianshu.com/?t=http://username.github.io&quot;&gt;http://username.github.io&lt;/a&gt;访问博客主页。那么我就访问https://gavin-wang-note.github.io/&lt;/p&gt;

&lt;p&gt;如下图所示，就是我的默认博客首页：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/my_default_blog_ui.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里我使用了他人的pro，更换了一些图片，代替上面默认的风格，展示如下：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/my_new_pro.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;将本地jekyll代码部署到github上的仓库&quot;&gt;将本地jekyll代码部署到Github上的仓库&lt;/h3&gt;

&lt;p&gt;前面我们已经详细地说明如何搭建Jekyll，我们可以在本地开发测试，推送代码到仓库，发布到线上。&lt;/p&gt;

&lt;h3 id=&quot;克隆仓库到本地&quot;&gt;克隆仓库到本地&lt;/h3&gt;

&lt;p&gt;请确保本地安装了git客户端，克隆你的username.github.com仓库到本地。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git clone https://github.com/username/username.github.com.git
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;拷贝本地的jekyll目录到版本库&quot;&gt;拷贝本地的jekyll目录到版本库&lt;/h3&gt;

&lt;p&gt;删除username.github.com下面的示例文件(README.md,不要删除，绑定域名会用到):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;rm -rf _site index.html _config.yml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;拷贝本地blog(这个是前面本地搭建的blog，后续等同，不再说明)下的所有目录及文件到username.github.com&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cp -r /root/blog/* username.github.com
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时你会看见当前存在username.github.com这个目录，我们启动jekyll服务（启动前确保其他目录下没有jekyll服务，可以&lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux|grep jekyll&lt;/code&gt;查看进程,有的话,用&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 进程号&lt;/code&gt;杀掉）:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cd username.github.com

jekyll serve -B -w --host=172.17.73.80
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在我们打开http://172.17.73.80:4000,即可看见我们在Github上创建的主页，理论上和&lt;a href=&quot;https://link.jianshu.com?t=http:/username.github.com&quot;&gt;http://username.github.com&lt;/a&gt; 访问的应该是一模一样的。&lt;/p&gt;

&lt;h3 id=&quot;本地jekyll站点部署到github-pages上相当于线上环境&quot;&gt;本地Jekyll站点部署到Github Pages上（相当于线上环境）&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git add --all       #添加到暂存区 

git commit -m &quot;提交jekyll默认页面&quot; #提交到本地仓库

git push origin master     #线上的站点是部署在master下面的

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;稍等10分钟左右，Github Pages有一定时间缓存,我们刷新username.github.io看看,已经ok了！&lt;/p&gt;

&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;

&lt;h3 id=&quot;jekyll因missingdependencyexception启动失败&quot;&gt;Jekyll因MissingDependencyException启动失败&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/jekyll_start_failed.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主要是这一句：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;The jekyll-theme-cayman theme could not be found
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那就使用gem去安装它&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;gem install jekyll-theme-cayman
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/install_jekyll-theme-cayman.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功安装后，再次启动Jekyll&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/start_jekyll_again.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后续如果缺失其他模块，可根据trace信息，使用gem进行安装。&lt;/p&gt;

&lt;h1 id=&quot;参考文档&quot;&gt;参考文档&lt;/h1&gt;

&lt;p&gt;https://jekyllrb.com/docs/installation/ubuntu/&lt;/p&gt;

&lt;p&gt;https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-14-04&lt;/p&gt;

&lt;p&gt;https://blog.csdn.net/sinat_34439107/article/details/78440836&lt;/p&gt;

&lt;p&gt;https://www.jianshu.com/p/f37a96f83d51&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Jekyll" /><summary type="html">Jekyll本地搭建开发环境以及Github部署流程</summary></entry><entry><title type="html">使用shell实现节点间ssh互信</title><link href="http://172.17.73.80:4000/2015/09/22/Shell-implements-ssh-key-mutual-trust-between-hosts/" rel="alternate" type="text/html" title="使用shell实现节点间ssh互信" /><published>2015-09-22T00:00:00+08:00</published><updated>2015-09-22T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2015/09/22/Shell-implements-ssh-key-mutual-trust-between-hosts</id><content type="html" xml:base="http://172.17.73.80:4000/2015/09/22/Shell-implements-ssh-key-mutual-trust-between-hosts/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;说假设有一个100台节点的Hadoop集群，要配置节点之间的SSH免密码登录，该如何用shell脚本实现？&lt;/p&gt;

&lt;h2 id=&quot;方案1脚本实现&quot;&gt;方案1：脚本实现&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;#!/bin/expect
#循环100台机器的IP地址，生成密钥文件authorized_keys

for ip in {cat ip.list}
do
  ssh user@$ip ssh-keygen -t rsa  &amp;amp;&amp;gt;/dev/null
  expect{
​        &quot;yes/no&quot; { send &quot;yes\r&quot;;exp_continue}
​        &quot;password:&quot;{send &quot;$passwd\r&quot;;exp_continue}
​       }

  cat ~/.ssh/id_rsa.pub &amp;gt; ~/.ssh/authorized_keys &amp;amp;&amp;gt; /dev/null  
  exit

  if [ !-f ~/.ssh/authorized_keys ];&amp;lt;br&amp;gt;   then
​    touch ~/.ssh/authorized_keys&amp;lt;br&amp;gt;   fi
  ssh user@$ip cat ~/.ssh/authorized_keys &amp;gt;&amp;gt; ~/.ssh/authorized_keys  &amp;amp;&amp;gt; /dev/null
  expect{
​        &quot;yes/no&quot; { send &quot;yes\r&quot;;exp_continue}
​        &quot;password:&quot;{send &quot;$passwd\r&quot;;exp_continue}
​       }  
done

 
#scp authorized_keys 文件到各台机器上面。
for ip in {cat ip.list}
do
  scp ~/.ssh/authorized_keys user@$ip:~/.ssh/ 
  expect{
​        &quot;yes/no&quot; { send &quot;yes\r&quot;;exp_continue}
​        &quot;password:&quot;{send &quot;$passwd\r&quot;;exp_continue}
​       }  
done
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;方案2所有node使用相同key&quot;&gt;方案2：所有node使用相同key&lt;/h2&gt;

&lt;p&gt;将第一个node上生成的dsa public key（一般是/root/.ssh/id_dsa.pub），scp到其他节点的/root/.ssh/目录下，即所有节点的dsa public key都一样，自然就实现ssh的互信了。&lt;/p&gt;

&lt;p&gt;这里介绍个快速传递ssh key的命令，ssh-copy-id ：&lt;/p&gt;

&lt;p&gt;ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中，ssh-copy-id也能让你到远程机器的home, ~./ssh , 和 ~/.ssh/authorized_keys的权利。&lt;/p&gt;

&lt;p&gt;语法格式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; ssh-copy-id -i .ssh/id_rsa.pub 用户名字@192.168.x.xxx
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="ssh" /><category term="shell" /><summary type="html">概述</summary></entry><entry><title type="html">oracle RMAN自动备份</title><link href="http://172.17.73.80:4000/2011/03/11/rman-auto-backup/" rel="alternate" type="text/html" title="oracle RMAN自动备份" /><published>2011-03-11T00:00:00+08:00</published><updated>2011-03-11T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2011/03/11/rman-auto-backup</id><content type="html" xml:base="http://172.17.73.80:4000/2011/03/11/rman-auto-backup/">&lt;p&gt;通过rman，实现定期自动备份，直接上脚本&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;mailto:oracle@mmsc103:~/rmanbak&quot;&gt;oracle@mmsc103:~/rmanbak&lt;/a&gt;&amp;gt; vi backup.pl&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;##################################################&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;###    作用：rman定时任务脚本         ###&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;###    日期：2011-03-11           ###&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;###    作者：wyz              ###&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;##################################################&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#获取系统当前时间&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;localtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%02d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$year$month$day$hour$min$sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/opt/oracle/product/11g/bin/rman  cmdfile = '/opt/oracle/rmanbak/everydaybak.rman' msglog=/opt/oracle/rmanbak/everydaybak_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$daytime&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;oracle@mmsc103:~/rmanbak](mailto:oracle@mmsc103:~/rmanbak)&amp;gt; more everydaybak.rman
#script.:fullbakup.rman
# creater:wangyunzeng
# date:2011-03-11
# desc:backup all database datafile in archive with rman
# connect database
connect target rman/rman;
connect catalog [rman/rman@mmsgdb](mailto:rman/rman@mmsgdb);

#start backup database
run
{
allocate channel t1 type disk; 
configure controlfile autobackup format for device type disk to '/opt/oracle/rmanbak/controlfile_bak_%F';            
backup database format 'fullbak_%s_%p_%u'  (archivelog all );
crosscheck backupset;
delete noprompt obsolete;
delete noprompt archivelog until time &quot;sysdate -3&quot;;
release channel t1;     
}
#end
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="rman" /><category term="oracle" /><summary type="html">通过rman，实现定期自动备份，直接上脚本</summary></entry><entry><title type="html">Appium+python自动化安装指南</title><link href="http://172.17.73.80:4000/0205/07/23/Appium+python-automaion-guide/" rel="alternate" type="text/html" title="Appium+python自动化安装指南" /><published>0205-07-23T00:01:26+08:05</published><updated>0205-07-23T00:01:26+08:05</updated><id>http://172.17.73.80:4000/0205/07/23/Appium+python-automaion-guide</id><content type="html" xml:base="http://172.17.73.80:4000/0205/07/23/Appium+python-automaion-guide/">&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;如果作为服务端，请参考软件安装和Python与python开发环境配置章节；&lt;/p&gt;

&lt;p&gt;如果仅作为Client，请参考client安装章节。&lt;/p&gt;

&lt;h1 id=&quot;软件安装&quot;&gt;软件安装&lt;/h1&gt;

&lt;h2 id=&quot;安装nodejs&quot;&gt;安装Nodejs&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载并安装nodejs&quot;&gt;步骤1、下载并安装nodejs&lt;/h3&gt;

&lt;p&gt;下载nodejs安装包（http://nodejs.org/download/）并进行安装，&lt;strong&gt;安装的时候有选项，记得把环境变量添加到&lt;/strong&gt;&lt;strong&gt;path&lt;/strong&gt;&lt;strong&gt;路径&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下图红框中表示要下载的版本：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/current_version.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤2测试nodejs安装是否成功&quot;&gt;步骤2、测试nodejs安装是否成功&lt;/h3&gt;

&lt;p&gt;在cmd中输入node –v，如果出现如下结果，则表明安装成功&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/node_success.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装android的skd&quot;&gt;&lt;strong&gt;安装android的SKD&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载skd包&quot;&gt;步骤1、下载SKD包&lt;/h3&gt;

&lt;p&gt;安装android的sdk包，(http://developer.android.com/sdk/index.html),运行依赖 sdk中的 ‘android’工具，并确保你安装了Level17或以上的版本 api。&lt;/p&gt;

&lt;h3 id=&quot;步骤2设置环境变量&quot;&gt;步骤2、设置环境变量&lt;/h3&gt;

&lt;p&gt;（1）解压压缩包到某个目录，如&lt;strong&gt;C:\adt-bundle-windows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（2）配置系统环境变量&lt;/p&gt;

&lt;p&gt;变量名：&lt;strong&gt;ANDROID_HOME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;变量值：&lt;strong&gt;C:\adt-bundle-windows\sdk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ad_home.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（3）添加系统path路径&lt;/p&gt;

&lt;p&gt;变量名：&lt;strong&gt;Path&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;变量值：&lt;strong&gt;%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/plat_path.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤3sdk包更新&quot;&gt;步骤3、SDK包更新&lt;/h3&gt;

&lt;p&gt;由于谷歌服务器连接不是很稳定， SDK更新或安装其他工具时候会出现无法连接、连接超时、无法下载等问题，针对这个问题，可通过如下方法进行解决：&lt;/p&gt;

&lt;p&gt;（1）启动 Android SDK Manager ，打开主界面，依次选择「Tools」、「Options…」，弹出『Android SDK Manager - Settings』窗口；&lt;/p&gt;

&lt;p&gt;（2）在『Android SDK Manager - Settings』窗口中，在「HTTP Proxy Server」和「HTTP Proxy Port」输入框内填入mirrors.neusoft.edu.cn和80，并且选中「Force https://… sources to be fetched using http://…」复选框。&lt;/p&gt;

&lt;p&gt;（3）设置完成后单击「Close」按钮，关闭『Android SDK Manager - Settings』窗口返回到主界面；依次选择「Packages」、「Reload」。&lt;/p&gt;

&lt;h2 id=&quot;jdk安装&quot;&gt;JDK安装&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载并安装jdk&quot;&gt;步骤1、下载并安装JDK&lt;/h3&gt;

&lt;p&gt;安装oracle的JDK，本文以jdk1.7为示例，下载地址：&lt;/p&gt;

&lt;p&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html&lt;/p&gt;

&lt;h3 id=&quot;步骤2设置java_home&quot;&gt;步骤2、设置JAVA_HOME&lt;/h3&gt;

&lt;p&gt;成功下载并安装后，设置环境变量JAVA_HOME：&lt;/p&gt;

&lt;p&gt;变量名：&lt;strong&gt;JAVA_HOME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;变量值：&lt;strong&gt;C:\Program Files\Java\jdk1.7.0_13&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/java_home.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤3验证jdk是否安装成功&quot;&gt;步骤3、验证jdk是否安装成功&lt;/h3&gt;

&lt;p&gt;在&lt;strong&gt;cmd&lt;/strong&gt;中输入&lt;strong&gt;java -version&lt;/strong&gt;，如果出现下图结果，表明jdk1.7安装成功。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/jdk_success.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装apache-ant&quot;&gt;&lt;strong&gt;安装Apache&lt;/strong&gt; &lt;strong&gt;Ant&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载apache-ant&quot;&gt;步骤1、下载Apache Ant&lt;/h3&gt;

&lt;p&gt;下载地址：http://ant.apache.org/bindownload.cgi）&lt;/p&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;​    如果不使用jenkins进行CI操作，则不需要安装它。&lt;/p&gt;

&lt;h3 id=&quot;步骤2设置环境变量-1&quot;&gt;步骤2、设置环境变量&lt;/h3&gt;

&lt;p&gt;到C盘，创建apache文件夹，并将下载后的ant解压后，拷贝到此目录下（C:\apache\apache-ant-1.9.4）&lt;/p&gt;

&lt;p&gt;然后设置环境变量：&lt;/p&gt;

&lt;p&gt;​     变量名： &lt;strong&gt;ANT_HOME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​     变量值： 你刚解压到的路径： &lt;strong&gt;C:\apache\apache-ant-1.9.4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ant_home.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置Path:&lt;/p&gt;

&lt;p&gt;变量名：&lt;strong&gt;Path&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;变量值：&lt;strong&gt;%ANT_HOME%\bin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ant_bin.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤3测试ant环境安装成功&quot;&gt;步骤3、测试ant环境安装成功&lt;/h3&gt;

&lt;p&gt;运行cmd，输入ant，如果没有指定build.xml就会输出：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ant_success.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看ant版本&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ant_version.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上信息表明ant已经成功安装。&lt;/p&gt;

&lt;h2 id=&quot;安装net-framework组件&quot;&gt;&lt;strong&gt;安装.net framework组件&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载net-framework&quot;&gt;步骤1、下载.net framework&lt;/h3&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;如果不安装，在进行下一步安装appium时，会报如下错误信息：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/start_error_appium.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于Microsoft Windows Studio 2008和Windows SDK for Windows Server 2008 and .NET Framework 3.5都比较大，很多东西用不到，以及考虑到后期appium更新后对更高版本的邀请，这里选择安装Microsoft .NET Framework 4.5。&lt;/p&gt;

&lt;p&gt;Microsoft .NET Framework 4.5 下载地址：http://www.microsoft.com/en-us/download/details.aspx?id=30653&lt;/p&gt;

&lt;h3 id=&quot;步骤2安装net-framework-45&quot;&gt;步骤2、安装.NET Framework 4.5&lt;/h3&gt;

&lt;p&gt;步骤略。&lt;/p&gt;

&lt;h2 id=&quot;安装appium&quot;&gt;&lt;strong&gt;安装appium&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1安装appium&quot;&gt;步骤1、安装appium&lt;/h3&gt;

&lt;p&gt;使用npm安装appium，在cmd中使用命令&lt;strong&gt;npm install  -g appium&lt;/strong&gt; 下载appium（整个过程稍慢，请耐心等待）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果安装过程中报如下错：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/install_appium_error.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;请到“C:\Users\Administrator\AppData\Roaming”目录下，创建npm目录，然后再运行“npm install -g appium”命令即可。&lt;/p&gt;

&lt;h3 id=&quot;步骤2校验appium是否安装成功&quot;&gt;步骤2、校验appium是否安装成功&lt;/h3&gt;

&lt;p&gt;安装成功后，在cmd输入&lt;strong&gt;appium&lt;/strong&gt;出现以下信息表明安装成功：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/install_appium_success.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装wd&quot;&gt;&lt;strong&gt;安装wd&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;启动cmd，在窗口输入npm install wd命令，继续wd的安装：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/wd.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;环境检测&quot;&gt;环境检测&lt;/h1&gt;

&lt;p&gt;运行cmd， 输入&lt;strong&gt;appium-doctor&lt;/strong&gt;检查你的环境是不是都配置好了。 如图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/env_check_success.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体的环境变量已经配置完毕，接下来要进行 python和selenium的安装、配置。&lt;/p&gt;

&lt;h1 id=&quot;python和selenium的安装配置&quot;&gt;Python和selenium的安装配置&lt;/h1&gt;

&lt;h2 id=&quot;安装python&quot;&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;strong&gt;python&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载并安装python275&quot;&gt;步骤1、下载并安装python2.7.5&lt;/h3&gt;

&lt;p&gt;链接地址：https://www.python.org/download/releases/2.7.5/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;本文选择python版本为2.7.5，该版本较其他版本比较稳定。&lt;/p&gt;

&lt;h3 id=&quot;步骤2设置python环境变量&quot;&gt;步骤2、设置python环境变量&lt;/h3&gt;

&lt;p&gt;变量名：&lt;strong&gt;Path&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;变量值：&lt;strong&gt;C:\Python27&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/python_path.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装setuptools&quot;&gt;&lt;strong&gt;安装setuptools&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载ez_setuppy&quot;&gt;步骤1、下载ez_setup.py&lt;/h3&gt;

&lt;p&gt;参考地址如下：&lt;/p&gt;

&lt;p&gt;https://pypi.python.org/pypi/setuptools#windows-7-or-graphical-install&lt;/p&gt;

&lt;p&gt;在链接页面中，找到&lt;strong&gt;ez_setup.py&lt;/strong&gt;，入下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ez_setup1.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;右击下载&lt;/strong&gt;&lt;strong&gt;ez_setup.py&lt;/strong&gt;&lt;strong&gt;文件到本地&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ez_setup2.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ez_setup.py&lt;/strong&gt;&lt;strong&gt;文件要存放在不包含中文以及空格目录中！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤2安装setuptools&quot;&gt;步骤2、安装setuptools&lt;/h3&gt;

&lt;p&gt;（1）启动cmd，进入ez_setup.py所在目录&lt;/p&gt;

&lt;p&gt;（2）执行python ez_setup.py install进行下载安装setuptools：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/download_setup.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后就会在python的安装目录中生成scripts目录，其中有easy_install.exe&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/easy_install_package.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;步骤3、设置环境变量&lt;/p&gt;

&lt;p&gt;将C:\Python27\Scripts 设置到系统环境变量中：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/python_path.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装pip&quot;&gt;&lt;strong&gt;安装pip&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;启动cmd进入命令行，把目录切换到python的安装目录下的Script文件夹下，运行 &lt;strong&gt;easy_inatall pip&lt;/strong&gt;命令进行pip在线安装，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/install_pip.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装python依赖包&quot;&gt;&lt;strong&gt;安装python依赖包&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;依赖包，如下：&lt;/p&gt;

&lt;p&gt;nose&lt;/p&gt;

&lt;p&gt;selenium&lt;/p&gt;

&lt;p&gt;Appium-Python-Client&lt;/p&gt;

&lt;p&gt;启动cmd，分别输入&lt;/p&gt;

&lt;p&gt;pip install nose&lt;/p&gt;

&lt;p&gt;pip install selenium&lt;/p&gt;

&lt;p&gt;pip install Appium-Python-Client&lt;/p&gt;

&lt;p&gt;进行安装操作, 如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/appium_client_setup.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果系统中已经安装过了，再次进行安装时，会出现类似如下界面所展示的信息：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/install_nose.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其他依赖包的安装&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;包名&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;mysqldb&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;用于Mysql操作使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;详见目录; pythond.3rd.lib中可执行文件，双击安装即可。&lt;/p&gt;

&lt;h1 id=&quot;eclipse与python开发环境配置&quot;&gt;Eclipse与python开发环境配置&lt;/h1&gt;

&lt;h2 id=&quot;eclipse下载与安装&quot;&gt;&lt;strong&gt;Eclipse下载与安装&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1下载eclipse&quot;&gt;步骤1、下载eclipse&lt;/h3&gt;

&lt;p&gt;链接地址：&lt;/p&gt;

&lt;p&gt;http://www.eclipse.org/downloads/&lt;/p&gt;

&lt;h3 id=&quot;步骤2安装eclipse&quot;&gt;步骤2、安装eclipse&lt;/h3&gt;

&lt;p&gt;下载下来是个压缩包，比如：eclipse-standard-luna-R-win32.zip，无需安装，直接解压即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eclipse&lt;/strong&gt;&lt;strong&gt;解压后所在目录不能含有中文、空格。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;pydev插件安装&quot;&gt;&lt;strong&gt;P&lt;/strong&gt;&lt;strong&gt;ydev插件安装&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1打开eclipse工具&quot;&gt;步骤1、打开Eclipse工具&lt;/h3&gt;

&lt;h3 id=&quot;步骤2市场中安装pydev&quot;&gt;步骤2、市场中安装pydev&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;在eclipse&lt;/strong&gt;工具，点击Help，选择Eclipse Marketplace，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/market.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在弹出界面中Find出，输入pydev，点击GO进行搜索：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/go.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;上图表明我已经安装过了，所以是Uninstall状态，未安装状态应该是install。&lt;/p&gt;

&lt;p&gt;点击“install“进行pydev插件的安装。&lt;/p&gt;

&lt;h3 id=&quot;步骤3配置pydev&quot;&gt;步骤3、配置pydev&lt;/h3&gt;

&lt;p&gt;在Window –&amp;gt; Preferences中，点击”Quick Atuo-Config”，并点击OK即可，如下图所示步骤操作：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/auto_config.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;建立python工程&quot;&gt;&lt;strong&gt;建立python工程&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1创建pydev-project&quot;&gt;步骤1、创建PyDev Project&lt;/h3&gt;

&lt;p&gt;选择PyDev Project，直接点击Next：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/project_next.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命名工程名称（如mpsAutotest），并点击finish，出现提示框后，点击“yes“：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/next_ok.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤2在工程中新建一个python-package&quot;&gt;步骤2、在工程中新建一个Python Package&lt;/h3&gt;

&lt;p&gt;右键点击src, New&amp;gt;Pydev Package，选择源文件路径及输入包名：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/pvdev_package.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3 id=&quot;步骤3测试工程是否创建正常&quot;&gt;步骤3、测试工程是否创建正常&lt;/h3&gt;

&lt;p&gt;在testCase目录下新创建个test.py文件，输入脚本内容：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#/usr/bin/env python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#-*- coding:UTF-8 -*-&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import os,sys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def nameInfo(name=None):&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name = nameInfo('Gikoo')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​    &lt;code class=&quot;highlighter-rouge&quot;&gt;print sys.platform&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print os.path.sep&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;按F9即可看到输出结果：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/example.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，说明开发环境安装成功&lt;/p&gt;

&lt;h1 id=&quot;appium启动篇&quot;&gt;appium启动篇&lt;/h1&gt;

&lt;h2 id=&quot;启动appium&quot;&gt;&lt;strong&gt;启动appium&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;步骤1启动cmd窗口&quot;&gt;步骤1、启动cmd窗口&lt;/h3&gt;

&lt;h3 id=&quot;步骤2执行appium--a-127001--p-4723命令&quot;&gt;步骤2、执行appium -a 127.0.0.1 -p 4723命令&lt;/h3&gt;

&lt;p&gt;在cmd中输入 appium -a 127.0.0.1 -p 4723 (-a表示ip，-p表示端口， 可以通过appium -h查看更多命令)，启动appium服务。&lt;/p&gt;

&lt;p&gt;如果如下图所示 就表示 appium服务启动成功了：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/start_appium_success.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个窗口不要关闭 因为这是appium的服务，关了就相当于关了服务，后面过程无法执行，而且这个窗口也是 日志输出的窗口，用于排错。&lt;/p&gt;

&lt;h1 id=&quot;client安装&quot;&gt;client安装&lt;/h1&gt;

&lt;h2 id=&quot;客户端安装步骤如下&quot;&gt;&lt;strong&gt;客户端&lt;/strong&gt;&lt;strong&gt;安装步骤如下：&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;安装python并设置python环境变量&quot;&gt;安装python并设置python环境变量&lt;/h3&gt;

&lt;p&gt;详请参考Python和selenium的安装配置章节中安装python与设置环境变量操作&lt;/p&gt;

&lt;h3 id=&quot;安装setuptools-1&quot;&gt;安装setuptools&lt;/h3&gt;

&lt;p&gt;详请参考Python和selenium的安装配置章节中安装setuptools操作&lt;/p&gt;

&lt;h3 id=&quot;安装pip后&quot;&gt;安装pip后&lt;/h3&gt;

&lt;p&gt;详请参考Python和selenium的安装配置章节中安装pip操作&lt;/p&gt;

&lt;h3 id=&quot;安装client&quot;&gt;安装client&lt;/h3&gt;

&lt;p&gt;启动cmd，分别输入&lt;/p&gt;

&lt;p&gt;pip install Appium-Python-Client&lt;/p&gt;

&lt;p&gt;pip install selenium&lt;/p&gt;

&lt;p&gt;安装selenium ide&lt;/p&gt;

&lt;p&gt;安装selenium ide，是为了通过ide录制web界面操作，并通过导出转换为需要的语言代码，进而修改以节约web界面用例开发时间。&lt;/p&gt;

&lt;h2 id=&quot;下载ide文件&quot;&gt;&lt;strong&gt;下载ide文件&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;打开火狐浏览器，输入如下网址&lt;/p&gt;

&lt;p&gt;http://release.seleniumhq.org/selenium-ide/2.0.0/selenium-ide-2.0.0.xpi&lt;/p&gt;

&lt;h2 id=&quot;安装xpi文件&quot;&gt;&lt;strong&gt;安装xpi文件&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;火狐浏览器会自动下载xpi文件，成功安装后弹出类似如下提示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/firefox_noty1.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;重启firefox&quot;&gt;&lt;strong&gt;重启firefox&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;点击“立即安装”即可进行安装操作。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/after_restart_firefox.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击“立即重启”，以加载新安装的ide插件。&lt;/p&gt;

&lt;h2 id=&quot;确认安装是否成功&quot;&gt;&lt;strong&gt;确认安装是否成功&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/ide_plug.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，appium iede安装完毕。&lt;/p&gt;

&lt;p&gt;其他插件，比如firebug、firepath等，直接将下载的文件拖入firefox进行安装即可。或者直接在组建中搜索，然后点击安装即可。&lt;/p&gt;

&lt;h1 id=&quot;参考文档&quot;&gt;参考文档&lt;/h1&gt;

&lt;p&gt;示例参考：http://testerhome.com/topics/153&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Appium" /><category term="Automation" /><category term="APP" /><summary type="html">说明：</summary></entry></feed>