<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2023-11-17T21:46:31+08:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Gavin Blog</title><subtitle>关于软件测试, 与你一起发现更大的世界</subtitle><entry><title type="html">python监听日志变化</title><link href="http://0.0.0.0:4000/2023/11/13/Monitor_ERROR_log/" rel="alternate" type="text/html" title="python监听日志变化" /><published>2023-11-13T00:00:00+08:00</published><updated>2023-11-13T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/11/13/Monitor_ERROR_log</id><content type="html" xml:base="http://0.0.0.0:4000/2023/11/13/Monitor_ERROR_log/"><![CDATA[<h1 id="概述">概述</h1>

<p>测试过程中需要监控多个日志内容，防止有异常信息在测试过程中被错过，于是构思了这支Script，用于监控给定的Log，当发现list kws中定义的关键字时，自动发送钉钉告警到群组。</p>

<h1 id="代码示例">代码示例</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">requests</span>


<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Monitor exception from log files'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"file_full_path"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">send_notification</span><span class="p">(</span><span class="n">content</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">"https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx"</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">"msgtype"</span><span class="p">:</span> <span class="s">"text"</span><span class="p">,</span>
        <span class="s">"text"</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">"content"</span><span class="p">:</span> <span class="s">"监控报警: 在[{}]中发现异常日志：[{}]"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">file_full_path</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
         <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">follow</span><span class="p">(</span><span class="n">file_handler</span><span class="p">):</span>
    <span class="n">file_handler</span><span class="p">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">file_handler</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>
            <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
            <span class="k">continue</span>
        <span class="k">yield</span> <span class="n">line</span>



<span class="k">if</span> <span class="n">__name__</span>  <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">kws</span> <span class="o">=</span> <span class="p">[</span><span class="s">"ERROR"</span><span class="p">,</span> <span class="s">"exception ="</span><span class="p">,</span> <span class="s">"INFO"</span><span class="p">,</span> <span class="s">"DEBUG"</span><span class="p">]</span>  <span class="c1"># Level of INFO and DEBUG, just for debug the script
</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Monitor log : {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">file_full_path</span><span class="p">))</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">file_full_path</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="n">log_file</span><span class="p">:</span>
        <span class="n">log_lines</span> <span class="o">=</span> <span class="n">follow</span><span class="p">(</span><span class="n">log_file</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">log_lines</span><span class="p">:</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">kw</span> <span class="ow">in</span> <span class="n">line</span> <span class="k">for</span> <span class="n">kw</span> <span class="ow">in</span> <span class="n">kws</span><span class="p">)):</span>
                <span class="c1"># print(line)
</span>                <span class="n">send_notification</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>执行过程示例如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>[qatest@iZbp1fl8ef9wkdizi6soq1Z ~]$ python monitor_debug_log.py "/mnt/logs/marketingservice/debug.log"
/usr/lib/python2.7/site-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.25.3) or chardet (2.2.1) doesn't match a supported version!
  RequestsDependencyWarning)
Monitor log : /mnt/logs/marketingservice/debug.log

</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Gavin</name></author><category term="python" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">python3 升级pip后找不到pip模块</title><link href="http://0.0.0.0:4000/2023/11/09/No_module_named_pip_after_upgrade/" rel="alternate" type="text/html" title="python3 升级pip后找不到pip模块" /><published>2023-11-09T00:00:00+08:00</published><updated>2023-11-09T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/11/09/No_module_named_pip_after_upgrade</id><content type="html" xml:base="http://0.0.0.0:4000/2023/11/09/No_module_named_pip_after_upgrade/"><![CDATA[<h1 id="概述">概述</h1>

<p>原本未打算写这个文档的，之前碰到过，但是今天运维同事碰到了此问题，想起以前也碰到过，记录一下。</p>

<p>就目前碰到状况而言，此问题只在python3中发生过，并未在python2中遇见。</p>

<p>言归正传，此次使用的python3环境，提示要升级pip版本，按照要求进行了版本的升级，升级失败，再次尝试安装，提示pip缺失，如下图所示：</p>

<p><img class="shadow" src="/img/in-post/pip_module_error.png" width="1200" /></p>

<p>上图提示python “No module named pip”，升级后导致不能使用pip命令。</p>

<h1 id="原因">原因</h1>

<p>可能是新旧版本冲突或路径空格导致，尚未找到root cause。</p>

<h1 id="解决方法">解决方法</h1>

<h2 id="方案1">方案1</h2>

<p>适用于windows/Mac/Linux系统</p>

<p><code class="highlighter-rouge">python -m ensurepip</code></p>

<p>如下图所示(Windows下结果)：</p>

<p><img class="shadow" src="/img/in-post/pip_reinstall.png" width="1200" /></p>

<h2 id="方案2">方案2</h2>

<p>输入如下命令：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python get-pip.py --force-reinstall
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="方案3">方案3</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>apt install --fix-missing python3-pip
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="验证安装">验证安装</h1>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>pip show pip
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Gavin</name></author><category term="python" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">pytest fixture of ids/name</title><link href="http://0.0.0.0:4000/2023/11/02/pytest_fixture_of_ids_name/" rel="alternate" type="text/html" title="pytest fixture of ids/name" /><published>2023-11-02T00:00:00+08:00</published><updated>2023-11-02T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/11/02/pytest_fixture_of_ids_name</id><content type="html" xml:base="http://0.0.0.0:4000/2023/11/02/pytest_fixture_of_ids_name/"><![CDATA[<h1 id="概述">概述</h1>

<p>pytest fixture 的ids，需要结合fixture的param使用，其作用是给测试用例名字增加标识，语法格式如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>@pytest.fixture(scope="", params="", autouse="", ids="", name="")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>本文重点讲述一下ids，顺带介绍下name的用途。</p>

<h1 id="示例">示例</h1>

<p>未使用ids情况下</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="o">@</span><span class="n">pytest</span><span class="p">.</span><span class="n">fixture</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">[</span><span class="s">'Parameter1'</span><span class="p">,</span> <span class="s">'Parameter2'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">my_fixture</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">request</span><span class="p">.</span><span class="n">param</span>


<span class="k">def</span> <span class="nf">test_fixtures_01</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s"> Run test_fixtures_01'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">test_fixtures_02</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s"> Run test_fixtures_02'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>运行效果如下：</p>

<p><img class="shadow" src="/img/in-post/ids_no_ids.png" width="1200" /></p>

<p>带上ids</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="o">@</span><span class="n">pytest</span><span class="p">.</span><span class="n">fixture</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">[</span><span class="s">'Parameter1'</span><span class="p">,</span> <span class="s">'Parameter2'</span><span class="p">],</span> <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s">"id-01"</span><span class="p">,</span> <span class="s">"id-02"</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">my_fixture</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">request</span><span class="p">.</span><span class="n">param</span>


<span class="k">def</span> <span class="nf">test_fixtures_03</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s"> Run test_fixtures_03'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">)</span>


</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<p><img class="shadow" src="/img/in-post/ids_with_ids.png" width="1200" /></p>

<p>从输出结果来看，”PASSED”前的中括号里的内容，如第一张图的<code class="highlighter-rouge">[Parameter1]</code> ，未携带ids情况下；而携带了ids后，会被ids对应值替换掉。</p>

<h1 id="利用ids实现测试需求">利用ids实现测试需求</h1>

<h2 id="场景描述">场景描述</h2>

<p>购买AI智能体，支付状态有三种：</p>

<ul>
  <li>下单未支付</li>
  <li>成功支付</li>
  <li>支付失败/放弃支付</li>
</ul>

<p>这三种状态对应数据库中三种值，分别为0，1，2。 利用ids方式，来简化测试用例。</p>

<h2 id="代码示例">代码示例</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="k">def</span> <span class="nf">init_data</span><span class="p">(</span><span class="n">fixture_value</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">fixture_value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"NoPay"</span>
    <span class="k">elif</span> <span class="n">fixture_value</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"PaySuccess"</span>
    <span class="k">elif</span> <span class="n">fixture_value</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"DropPay"</span>


<span class="o">@</span><span class="n">pytest</span><span class="p">.</span><span class="n">fixture</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="n">ids</span><span class="o">=</span><span class="n">init_data</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_AI_fixture</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">req_param</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">param</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Parameter : [{}], status is : [{}]"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">req_param</span><span class="p">,</span> <span class="n">req_param</span><span class="p">))</span>
    <span class="k">yield</span> <span class="n">req_param</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">----------------------------------------"</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">test_case_01</span><span class="p">(</span><span class="n">my_AI_fixture</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Run [{}] test case"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">my_AI_fixture</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>运行结果：</p>

<p><img class="shadow" src="/img/in-post/without_-k_parameter.png" width="1200" /></p>

<p>利用 -k 参数，指定要指定的测试用例：</p>

<p><img class="shadow" src="/img/in-post/with_-k_parameter.png" width="1200" /></p>

<p>注意：</p>

<p>-k 后面，字符串一定要使用双引号，单引号不可以。</p>

<p>-k的意思如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  -k EXPRESSION    Only run tests which match the given substring expression. An expression is a Python evaluatable expression where all names are substring-matched against test names and their parent classes.
Example: -k 'test_method or test_other' matches all test functions and classes whose name contains 'test_method' or 'test_other', while -k 'not test_method' matches those that don't contain 'test_method' in their names. -k 'not test_method and not test_other' will eliminate the matches. Additionally keywords are matched to classes and functions containing extra names in their 'extra_keyword_matches' set, as well as functions which have names assigned directly to them. The matching is case-insensitive.
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="说一下-name-参数">说一下 name 参数</h1>

<p>name参数实用性不大，用于给fixture设置别名，或者描述一下这个fixture的用途，示例如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="o">@</span><span class="n">pytest</span><span class="p">.</span><span class="n">fixture</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">[</span><span class="s">'Parameter1'</span><span class="p">,</span> <span class="s">'Parameter2'</span><span class="p">],</span> <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s">"id-01"</span><span class="p">,</span> <span class="s">"id-02"</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="s">"Test_Fixture_Name_Daemon"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_fixture</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">request</span><span class="p">.</span><span class="n">param</span>


<span class="k">def</span> <span class="nf">test_fixtures_03</span><span class="p">(</span><span class="n">Test_Fixture_Name_Daemon</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s"> Run test_fixtures_03'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>如上图所示，函数传递的fixture，变更成了name。</p>

<h2 id="问题如果fixture中使用了name参数测试函数中是否可以传递fixture-函数名而非name对应值">问题：如果fixture中使用了name参数，测试函数中是否可以传递fixture 函数名而非name对应值？</h2>

<p>答案是否定的，测试如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="o">@</span><span class="n">pytest</span><span class="p">.</span><span class="n">fixture</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">[</span><span class="s">'Parameter1'</span><span class="p">,</span> <span class="s">'Parameter2'</span><span class="p">],</span> <span class="n">ids</span><span class="o">=</span><span class="p">[</span><span class="s">"id-01"</span><span class="p">,</span> <span class="s">"id-02"</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="s">"Test_Fixture_Name_Daemon"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_fixture</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">request</span><span class="p">.</span><span class="n">param</span>


<span class="k">def</span> <span class="nf">test_fixtures_03</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s"> Run test_fixtures_03'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">my_fixture</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如上，代码执行时报如下错误信息：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre>C:\Users\Wang&gt;pytest -vrs C:\Users\Wang\Desktop\test_0.py
================================================= test session starts =================================================
platform win32 -- Python 3.11.4, pytest-7.4.2, pluggy-1.3.0 -- C:\Users\Wang\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Wang
plugins: allure-pytest-2.13.2, order-1.1.0, progress-1.2.5, repeat-0.9.1, timeout-2.1.0
collected 1 item

Desktop/test_0.py::test_fixtures_03 ERROR                                                                        [100%]

======================================================= ERRORS ========================================================
_________________________________________ ERROR at setup of test_fixtures_03 __________________________________________
file C:\Users\Wang\Desktop\test_0.py, line 39
  def test_fixtures_03(my_fixture):
E       fixture 'my_fixture' not found
&gt;       available fixtures: Test_Fixture_Name_Daemon, __pytest_repeat_step_number, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\Wang\Desktop\test_0.py:39
================================================== 1 error in 0.02s ===================================================

C:\Users\Wang&gt;
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Gavin</name></author><category term="pytest" /><category term="Automation" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">pytest fixture.mark.parametrize</title><link href="http://0.0.0.0:4000/2023/10/30/pytest_mark_parametrize/" rel="alternate" type="text/html" title="pytest fixture.mark.parametrize" /><published>2023-10-30T00:00:00+08:00</published><updated>2023-10-30T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/10/30/pytest_mark_parametrize</id><content type="html" xml:base="http://0.0.0.0:4000/2023/10/30/pytest_mark_parametrize/"><![CDATA[<h1 id="概述">概述</h1>

<p>pytest中装饰器 <font color="red">```@pytest.mark.parametrize```</font> 可以实现测试用例参数化，类似DDT。</p>

<p>pytest在几个级别上支持测试参数化：</p>

<ul>
  <li>pytest.fixture()允许对fixture函数进行参数化</li>
  <li>@pytest.mark.parametrize允许在测试函数或类中定义多组参数和fixture</li>
  <li>pytest_generate_tests允许自定义参数化方案或扩展</li>
</ul>

<p>语法格式如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>@pytest.mark.parametrize('参数名',list) 
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>第一个参数是字符串，多个参数中间用逗号隔开</p>
  </li>
  <li>
    <p>第二个参数是list多组数据用元组类型;传三个或更多参数也是这样传。list的每个元素都是一个元组，元组里的每个元素和按参数顺序 一 一 对应</p>
  </li>
</ul>

<p>示例：</p>

<ul>
  <li>
    <p>传一个参数 @pytest.mark.parametrize(‘参数名’，list) 进行参数化</p>
  </li>
  <li>
    <p>传两个参数@pytest.mark.parametrize(‘参数名1，参数名2’，[(参数1_data1, 参数2_data1),(参数1_data2, 参数2_data2)]) 进行参数化</p>
  </li>
</ul>

<p>详细信息，请继续阅读下文。</p>

<h1 id="使用示例">使用示例</h1>

<h2 id="只传递一个参数">只传递一个参数</h2>

<h3 id="一个参数一个值">一个参数一个值</h3>

<p>示例代码如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>#!/usr/bin/env python
# -*- coding:UTF-8 -*-

import pytest


@pytest.mark.parametrize("name", ["Gavin"])
def test_case1(name):
    print("\n" + name)
    assert name.lower() == "gavin"
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>C:\Users\Wang&gt;pytest -vrs --show-progress --cache-clear --full-trace C:\Users\Wang\Desktop\test_4.py
================================================= test session starts =================================================
platform win32 -- Python 3.11.4, pytest-7.4.2, pluggy-1.3.0 -- C:\Users\Wang\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Wang
plugins: allure-pytest-2.13.2, order-1.1.0, progress-1.2.5, repeat-0.9.1, timeout-2.1.0
collected 1 item

Desktop/test_4.py::test_case1[Gavin] PASSED                                                                      [100%]
____________________ 1 of 1 completed, 1 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _____________________

================================================== 1 passed in 0.02s ==================================================

C:\Users\Wang&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="一个参数多个值">一个参数多个值</h3>

<p>这种比较常见，示例代码如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>#!/usr/bin/env python
# -*- coding:UTF-8 -*-

import pytest


@pytest.mark.parametrize("name", ["Gavin","Json","Bruce","Andy"])
def test_case1(name):
    print("\n" + name)
    assert name.lower() == "gavin"
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td><td class="rouge-code"><pre>C:\Users\Wang&gt;pytest -vrs --show-progress --cache-clear C:\Users\Wang\Desktop\test_4.py
============================================================================================= test session starts ==============================================================================================
platform win32 -- Python 3.11.4, pytest-7.4.2, pluggy-1.3.0 -- C:\Users\Wang\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Wang
plugins: allure-pytest-2.13.2, order-1.1.0, progress-1.2.5, repeat-0.9.1, timeout-2.1.0
collected 4 items

Desktop/test_4.py::test_case1[Gavin] PASSED                                                                                                                                                               [ 25%]
_________________________________________________________________ 1 of 4 completed, 1 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_4.py::test_case1[Json] FAILED                                                                                                                                                                [ 50%]
_______________________________________________________________________________________________ test_case1[Json] _______________________________________________________________________________________________

name = 'Json'

    @pytest.mark.parametrize("name", ["Gavin","Json","Bruce","Andy"])
    def test_case1(name):
        print("\n" + name)
&gt;       assert name.lower() == "gavin"
E       AssertionError: assert 'json' == 'gavin'
E         - gavin
E         + json

Desktop\test_4.py:10: AssertionError
--------------------------------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------------------------------

Json
_________________________________________________________________ 2 of 4 completed, 1 Pass, 1 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_4.py::test_case1[Bruce] FAILED                                                                                                                                                               [ 75%]
______________________________________________________________________________________________ test_case1[Bruce] _______________________________________________________________________________________________

name = 'Bruce'

    @pytest.mark.parametrize("name", ["Gavin","Json","Bruce","Andy"])
    def test_case1(name):
        print("\n" + name)
&gt;       assert name.lower() == "gavin"
E       AssertionError: assert 'bruce' == 'gavin'
E         - gavin
E         + bruce

Desktop\test_4.py:10: AssertionError
--------------------------------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------------------------------

Bruce
_________________________________________________________________ 3 of 4 completed, 1 Pass, 2 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_4.py::test_case1[Andy] FAILED                                                                                                                                                                [100%]
_______________________________________________________________________________________________ test_case1[Andy] _______________________________________________________________________________________________

name = 'Andy'

    @pytest.mark.parametrize("name", ["Gavin","Json","Bruce","Andy"])
    def test_case1(name):
        print("\n" + name)
&gt;       assert name.lower() == "gavin"
E       AssertionError: assert 'andy' == 'gavin'
E         - gavin
E         + andy

Desktop\test_4.py:10: AssertionError
--------------------------------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------------------------------

Andy
_________________________________________________________________ 4 of 4 completed, 1 Pass, 3 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

========================================================================================= 3 failed, 1 passed in 0.06s ==========================================================================================

C:\Users\Wang&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="多个参数">多个参数</h2>

<h3 id="多个参数多个值">多个参数多个值</h3>

<p>下面是官网的示例：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre># content of test_expectation.py
import pytest


@pytest.mark.parametrize("test_input,expected", [("3+5", 8), ("2+4", 6), ("6*9", 42)])
def test_eval(test_input, expected):
    assert eval(test_input) == expected
</pre></td></tr></tbody></table></code></pre></div></div>

<p>此示例，参考官网给出的另外一个方案：</p>

<p><code class="highlighter-rouge">https://docs.pytest.org/en/stable/how-to/parametrize.html</code> 下 “To parametrize all tests in a module, you can assign to the <a href="https://docs.pytest.org/en/stable/reference/reference.html#globalvar-pytestmark"><code class="highlighter-rouge">pytestmark</code></a> global variable:”</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>import pytest

pytestmark = pytest.mark.parametrize("test_input, expected", [("3+5", 8), ("2+4", 6), ("6*9", 42)])


def test_eval(test_input, expected):
    assert eval(test_input) == expected
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre>C:\Users\Wang&gt;pytest -vrs --show-progress --cache-clear C:\Users\Wang\Desktop\test_expectation.py
============================================================================================= test session starts ==============================================================================================
platform win32 -- Python 3.11.4, pytest-7.4.2, pluggy-1.3.0 -- C:\Users\Wang\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Wang
plugins: allure-pytest-2.13.2, order-1.1.0, progress-1.2.5, repeat-0.9.1, timeout-2.1.0
collected 3 items

Desktop/test_expectation.py::test_eval[3+5-8] PASSED                                                                                                                                                      [ 33%]
_________________________________________________________________ 1 of 3 completed, 1 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_expectation.py::test_eval[2+4-6] PASSED                                                                                                                                                      [ 66%]
_________________________________________________________________ 2 of 3 completed, 2 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_expectation.py::test_eval[6*9-42] FAILED                                                                                                                                                     [100%]
______________________________________________________________________________________________ test_eval[6*9-42] _______________________________________________________________________________________________

test_input = '6*9', expected = 42

    @pytest.mark.parametrize("test_input,expected", [("3+5", 8), ("2+4", 6), ("6*9", 42)])
    def test_eval(test_input, expected):
&gt;       assert eval(test_input) == expected
E       AssertionError: assert 54 == 42
E        +  where 54 = eval('6*9')

Desktop\test_expectation.py:7: AssertionError
_________________________________________________________________ 3 of 3 completed, 2 Pass, 1 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

========================================================================================= 1 failed, 2 passed in 0.03s ==========================================================================================

C:\Users\Wang&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="多个参数的混合使用">多个参数的混合使用</h3>

<p>示例代码如下（在官方示例代码上做了调整）：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>import pytest


@pytest.mark.parametrize("x", [0, 1])
@pytest.mark.parametrize("y", [2, 3])
def test_foo(x, y):
    print("Generate new combinations : {},{}".format(x, y))
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上面示例会产生4个测试用例，输出结果参考如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>C:\Users\Wang&gt;pytest -vrs --show-progress --cache-clear C:\Users\Wang\Desktop\test_5.py
============================================================================================= test session starts ==============================================================================================
platform win32 -- Python 3.11.4, pytest-7.4.2, pluggy-1.3.0 -- C:\Users\Wang\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Wang
plugins: allure-pytest-2.13.2, order-1.1.0, progress-1.2.5, repeat-0.9.1, timeout-2.1.0
collected 4 items

Desktop/test_5.py::test_foo[2-0] PASSED                                                                                                                                                                   [ 25%]
_________________________________________________________________ 1 of 4 completed, 1 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_5.py::test_foo[2-1] PASSED                                                                                                                                                                   [ 50%]
_________________________________________________________________ 2 of 4 completed, 2 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_5.py::test_foo[3-0] PASSED                                                                                                                                                                   [ 75%]
_________________________________________________________________ 3 of 4 completed, 3 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_5.py::test_foo[3-1] PASSED                                                                                                                                                                   [100%]
_________________________________________________________________ 4 of 4 completed, 4 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

============================================================================================== 4 passed in 0.02s ===============================================================================================

C:\Users\Wang&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>再看个示例：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>data1 = [1, 2]
data2 = ["python", "Shell"]
data3 = ["Software", "Test", Engineer", "from", "Gavin"]


@pytest.mark.parametrize("a", data1)
@pytest.mark.parametrize("b", data2)
@pytest.mark.parametrize("c", data3)
def test_case3(a, b, c):
    print("[{a} {b} {c}]")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如上示例，会产生20个测试用例。</p>

<h2 id="参数化">参数化</h2>

<h3 id="传入字典数据">传入字典数据</h3>

<p>示例代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>import pytest


json=({"username":"Json","password":"Python@123!"},{"username":"Alex","password":"226699"},{"username":"Rita","password":"123456"})

@pytest.mark.parametrize('json', json)
def test_pytest_parametrize(json):
    print(f'dit : \n{json}')
    print(f'username : {json["username"]}, password : {json["password"]}')
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre>C:\Users\Wang&gt;pytest -vs --show-progress --cache-clear C:\Users\Wang\Desktop\test_pytest_parameter.py
============================================================================================= test session starts ==============================================================================================
platform win32 -- Python 3.11.4, pytest-7.4.2, pluggy-1.3.0 -- C:\Users\Wang\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Wang
plugins: allure-pytest-2.13.2, order-1.1.0, progress-1.2.5, repeat-0.9.1, timeout-2.1.0
collected 3 items

Desktop/test_pytest_parameter.py::test_pytest_parametrize[json0] dit :
{'username': 'Json', 'password': 'Python@123!'}
username : Json, password : Python@123!
PASSED
_________________________________________________________________ 1 of 3 completed, 1 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_pytest_parameter.py::test_pytest_parametrize[json1] dit :
{'username': 'Alex', 'password': '226699'}
username : Alex, password : 226699
PASSED
_________________________________________________________________ 2 of 3 completed, 2 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_pytest_parameter.py::test_pytest_parametrize[json2] dit :
{'username': 'Rita', 'password': '123456'}
username : Rita, password : 123456
PASSED
_________________________________________________________________ 3 of 3 completed, 3 Pass, 0 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

============================================================================================== 3 passed in 0.02s ===============================================================================================

C:\Users\Wang&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="集合标记">集合标记</h3>

<p>示例代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>import pytest


@pytest.mark.parametrize("username,password",
                         [("Json", "123456"), ("Jack", "654321"),
                          pytest.param("Bruce", "123456", marks=pytest.mark.xfail),
                          pytest.param("Alex", "123456", marks=pytest.mark.skip)])
def test_login(username, password):
    print(username + " : " + password)
    assert username == "Jack"
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre>C:\Users\Wang&gt;pytest -vs --show-progress --cache-clear C:\Users\Wang\Desktop\test_multi_parameter.py
============================================================================================= test session starts ==============================================================================================
platform win32 -- Python 3.11.4, pytest-7.4.2, pluggy-1.3.0 -- C:\Users\Wang\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Wang
plugins: allure-pytest-2.13.2, order-1.1.0, progress-1.2.5, repeat-0.9.1, timeout-2.1.0
collected 4 items

Desktop/test_multi_parameter.py::test_login[Json-123456] Json : 123456
FAILED
___________________________________________________________________________________________ test_login[Json-123456] ____________________________________________________________________________________________

username = 'Json', password = '123456'

    @pytest.mark.parametrize("username,password",
                             [("Json", "123456"), ("Jack", "654321"),
                              pytest.param("Bruce", "123456", marks=pytest.mark.xfail),
                              pytest.param("Alex", "123456", marks=pytest.mark.skip)])
    def test_login(username, password):
        print(username + " : " + password)
&gt;       assert username == "Jack"
E       AssertionError: assert 'Json' == 'Jack'
E         - Jack
E         + Json

Desktop\test_multi_parameter.py:10: AssertionError
_________________________________________________________________ 1 of 4 completed, 0 Pass, 1 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_multi_parameter.py::test_login[Jack-654321] Jack : 654321
PASSED
_________________________________________________________________ 2 of 4 completed, 1 Pass, 1 Fail, 0 Skip, 0 XPass, 0 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_multi_parameter.py::test_login[Bruce-123456] Bruce : 123456
XFAIL
_________________________________________________________________ 3 of 4 completed, 1 Pass, 1 Fail, 0 Skip, 0 XPass, 1 XFail, 0 Error, 0 ReRun _________________________________________________________________

Desktop/test_multi_parameter.py::test_login[Alex-123456] SKIPPED (unconditional skip)
_________________________________________________________________ 4 of 4 completed, 1 Pass, 1 Fail, 1 Skip, 0 XPass, 1 XFail, 0 Error, 0 ReRun _________________________________________________________________

=========================================================================================== short test summary info ============================================================================================
FAILED Desktop/test_multi_parameter.py::test_login[Json-123456] - AssertionError: assert 'Json' == 'Jack'
============================================================================== 1 failed, 1 passed, 1 skipped, 1 xfailed in 0.05s ===============================================================================

C:\Users\Wang&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="项目实践">项目实践</h1>

<p>如下为在产品测试中使用到的 parameter 实战示例：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre>    @pytest.mark.parametrize('object_quota',
                             [-1, 0, 1, 1000, 1000000, 1000000000, 1000000000000, 1000000000000000, 1000000000000000000,
                              7168000000000000000])
    @pytest.mark.parametrize('size_quota',
                             [-1,0, 1024, 1048576, 1073741824, 1099511627776, 1125899906842624, 8070450532247928832])
    #@pytest.mark.parametrize('object_quota', [-1, 1])
    #@pytest.mark.parametrize('size_quota',[-1])
    def test_8_0_10647(self, object_quota, size_quota):
        logger.info("8_0-10647:Set value on User Max Size, User Max Objects, Bucket Max Size, Bucket Max Objects fielAccount Quota")
        TestClass.AccountCount = TestClass.AccountCount + 1
        account = "test_8_0_10604_" + str(self.rand_num) + "_" + str(TestClass.AccountCount)
        logger.info("Account: %s", account)
        self.cluster_api.Create_Account(account)
        self.radows.Set_Account_Quota(account, object_quota, size_quota)
        self.radows.Set_Account_Bucket_Quota(account, object_quota, size_quota)
        self.check_cluster_api.Check_Account_Quota(account, object_quota, size_quota)
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Gavin</name></author><category term="Automation" /><category term="pytest" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">pytest 之 conftest.py</title><link href="http://0.0.0.0:4000/2023/10/29/pytest_conftest/" rel="alternate" type="text/html" title="pytest 之 conftest.py" /><published>2023-10-29T00:00:00+08:00</published><updated>2023-10-29T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/10/29/pytest_conftest</id><content type="html" xml:base="http://0.0.0.0:4000/2023/10/29/pytest_conftest/"><![CDATA[<h1 id="概述">概述</h1>

<p><code class="highlighter-rouge">conftest.py</code>文件是pytest框架里面一个很重要的东西，它可以在这个文件里面编写fixture函数，这个fixture函数的作用，就相当于Unittest框架里面的<code class="highlighter-rouge">setup()</code>前置函数和<code class="highlighter-rouge">teardown()</code>后置函数，虽然pytest框架也有<code class="highlighter-rouge">setup()</code>前置函数和<code class="highlighter-rouge">teardown()</code>后置函数，但是在实际工作中没必要写在测试用例文件中，直接写在<code class="highlighter-rouge">conftests.py</code>里面就好了，pytest框架会自动去找<code class="highlighter-rouge">conftest.py</code>文件里面的东西，这样更灵活。</p>

<p>可以看出 conftest.py是 fixture函数的一个集合， 提取公共部分放在这个文件里，然后供其它模块调用。不同于普通被调用的模块，conftest.py使用时不需要导入，pytest会自动查找。</p>

<p>在实际工作中，通常<code class="highlighter-rouge">conftest.py</code>和<code class="highlighter-rouge">@pytest.fixture()</code>结合使用，实现全局的前后置应用。</p>

<h1 id="conftestpy使用场景">conftest.py使用场景</h1>

<ul>
  <li>每个接口用例需共用到的token/session/cookie</li>
  <li>每个接口用例需共用到的测试用例数据</li>
  <li>每个接口用例需共用到的配置信息</li>
</ul>

<p>​    ….</p>

<p>简而言之：</p>

<p>​    多个py文件使用同一个前/后置函数，一个fixture函数，在很多case模块中都要用到。</p>

<h1 id="conftestpy中fixture的作用域">conftest.py中fixture的作用域</h1>

<p>fixture的scope参数也适用<code class="highlighter-rouge">conftest.py</code>文件中fixture的特性，即有如下范围：</p>

<table>
  <thead>
    <tr>
      <th>取值</th>
      <th>范围</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>function</td>
      <td>函数级</td>
      <td>每个函数或方法都会调用</td>
    </tr>
    <tr>
      <td>class</td>
      <td>类级别</td>
      <td>每个测试类只运行一次</td>
    </tr>
    <tr>
      <td>module</td>
      <td>模块级别</td>
      <td>每一个.py文件只调用一次</td>
    </tr>
    <tr>
      <td>package</td>
      <td>包级</td>
      <td>每一个python包只调用一次</td>
    </tr>
    <tr>
      <td>session</td>
      <td>会话级</td>
      <td>每次会话只需要运行一次，会话内所有方法及类、模块都共享这个方法</td>
    </tr>
  </tbody>
</table>

<h2 id="不同位置conftestpy文件的优先级">不同位置conftest.py文件的优先级</h2>

<p><strong>其作用范围是当前目录包括子目录里的测试模块。</strong></p>

<ul>
  <li>比如在测试框架的根目录创建<code class="highlighter-rouge">conftest.py</code>文件，文件中的fixture的作用范围是所有测试模块</li>
  <li>比如在某个单独的测试文件夹里创建<code class="highlighter-rouge">conftest.py</code>文件，文件中fixture的作用范围，就仅局限于该测试文件夹里的测试模块；该测试文件夹外的测试模块，或者该测试文件夹外的测试文件夹，是无法调用到这个<code class="highlighter-rouge">conftest.py</code>文件中的fixture。</li>
  <li>如果测试框架的根目录和子包中都有<code class="highlighter-rouge">conftest.py</code>文件，并且这两个<code class="highlighter-rouge">conftest.py</code>文件中都有一个同名的fixture，实际生效的是测试框架中子包目录下的<code class="highlighter-rouge">conftest.py</code>文件中配置的fixture（即此场景下子目录下的conftest.py会覆盖父目录的conftest.py）</li>
</ul>

<h1 id="示例">示例</h1>

<p>代码目录结构：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>root@Gavin:~/src# tree
.
├── clear_pyc.py
├── conftest.py
├── __init__.py
├── pytest.ini
└── testcase
    ├── account
    │   ├── conftest.py
    │   ├── __init__.py
    │   └── test_account.py
    ├── __init__.py
    └── ldap
        ├── __init__.py
        └── test_ldap.py

3 directories, 10 files
root@Gavin:~/src# 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>两个conftest.py内容参考如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre>root@Gavin:~/src# cat conftest.py 
import os
import pytest
import logging


@pytest.fixture(scope='package', autouse=True)
def testsuite_setup_teardown():
    logging.info('------------------------------------- Start to run test case ---------------------------------\n')
    yield
    logging.info('------------------------------------- End to run test case -----------------------------------')


@pytest.fixture(scope='function', autouse=True)
def testcase_setup_teardown():
    case_name = os.environ.get('PYTEST_CURRENT_TEST').split(':')[-1].split(' ')[0]

    logging.info('----------------------------------- Begin ----------------------------------------')
    logging.info('Current test case name : (%s)', case_name)
    yield
    logging.info('----------------------------------- End ------------------------------------------\n')
root@Gavin:~/src# cat testcase/account/conftest.py 
import pytest
import logging


@pytest.fixture(scope='function', autouse="true")
def testsuit_env_check():
    logging.info('----------- [testsuit_env_check] Begin ------------')

    logging.info('--------------- [testsuit_env_check] End ----------------\n')

root@Gavin:~/src# 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>执行用例记录的日志：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre>root@Gavin:~/src# cat ../report/pytest_autotest.log 
2023-10-30 06:50:48 [conftest.py:8   ] [ INFO] ------------------------------------- Start to run test case ---------------------------------

2023-10-30 06:50:48 [conftest.py:17  ] [ INFO] ----------------------------------- Begin ----------------------------------------
2023-10-30 06:50:48 [conftest.py:18  ] [ INFO] Current test case name : (test_account_01)
2023-10-30 06:50:48 [conftest.py:7   ] [ INFO] ----------- [testsuit_env_check] Begin ------------
2023-10-30 06:50:48 [conftest.py:9   ] [ INFO] --------------- [testsuit_env_check] End ----------------

2023-10-30 06:50:48 [conftest.py:20  ] [ INFO] ----------------------------------- End ------------------------------------------

2023-10-30 06:50:48 [conftest.py:17  ] [ INFO] ----------------------------------- Begin ----------------------------------------
2023-10-30 06:50:48 [conftest.py:18  ] [ INFO] Current test case name : (test_account_02)
2023-10-30 06:50:48 [conftest.py:7   ] [ INFO] ----------- [testsuit_env_check] Begin ------------
2023-10-30 06:50:48 [conftest.py:9   ] [ INFO] --------------- [testsuit_env_check] End ----------------

2023-10-30 06:50:48 [conftest.py:20  ] [ INFO] ----------------------------------- End ------------------------------------------

2023-10-30 06:50:48 [conftest.py:17  ] [ INFO] ----------------------------------- Begin ----------------------------------------
2023-10-30 06:50:48 [conftest.py:18  ] [ INFO] Current test case name : (test_ldap_01)
2023-10-30 06:50:48 [conftest.py:20  ] [ INFO] ----------------------------------- End ------------------------------------------

2023-10-30 06:50:48 [conftest.py:17  ] [ INFO] ----------------------------------- Begin ----------------------------------------
2023-10-30 06:50:48 [conftest.py:18  ] [ INFO] Current test case name : (test_ldap_02)
2023-10-30 06:50:48 [conftest.py:20  ] [ INFO] ----------------------------------- End ------------------------------------------

2023-10-30 06:50:48 [conftest.py:10  ] [ INFO] ------------------------------------- End to run test case -----------------------------------
root@Gavin:~/src#
</pre></td></tr></tbody></table></code></pre></div></div>

<p>从测试log看：</p>

<p><img class="shadow" src="/img/in-post/conftest_scope.png" width="400" /></p>

<h1 id="结语">结语</h1>

<ul>
  <li>conftest.py文件名字是固定的，不能做任何修改，把hook或者fixture写在这个文件里，就会自动去调用</li>
  <li>文件和用例文件在同一个目录下，那么conftest.py作用于整个目录，即所有同目录测试文件运行前都会执行conftest.py文件</li>
  <li>conftest.py文件不能被其他文件导入</li>
  <li>pytest框架中的<code class="highlighter-rouge">setup()/teardown()</code>函数，<code class="highlighter-rouge">setup_class()/teardown_class()</code>函数，他们是作用于所有用例或者所有类的</li>
  <li><code class="highlighter-rouge">@pytest.fixtrue()</code>的作用域是既可以部分用例，也可以全部用例的前后置</li>
  <li><code class="highlighter-rouge">conftest.py</code>文件和<code class="highlighter-rouge">@pytest.fxtrue()</code>装饰器结合使用，作用于全局用例的前后置</li>
</ul>]]></content><author><name>Gavin</name></author><category term="Automation" /><category term="pytest" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">pylint 静态代码检查之 .pylintrc</title><link href="http://0.0.0.0:4000/2023/10/27/pylintrc_file/" rel="alternate" type="text/html" title="pylint 静态代码检查之 .pylintrc" /><published>2023-10-27T00:00:00+08:00</published><updated>2023-10-27T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/10/27/pylintrc_file</id><content type="html" xml:base="http://0.0.0.0:4000/2023/10/27/pylintrc_file/"><![CDATA[<h1 id="概述">概述</h1>

<p>平时在vim中编写pytest用例和base class代码时，为了规范化代码风格与一些基本错误的静态代码检查，会借助pylint做代码检查，避免出现一些低级错误。</p>

<h1 id="pylintrc内容示例参考">.pylintrc内容示例参考</h1>

<p>如下是我自己常用的pylintrc file，pylint的详细信息，请参考官网： <code class="highlighter-rouge">https://docs.pylint.org/#command-line-options</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
</pre></td><td class="rouge-code"><pre>[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=netifaces,xattr,lxml,rados,posix_ipc,

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=CVS,nas-migrate

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint.
jobs=1

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Specify a configuration file.
#rcfile=

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
disable=blacklisted-name,invalid-name,missing-docstring,empty-docstring,unneeded-not,singleton-comparison,misplaced-comparison-constant,unidiomatic-typecheck,consider-using-enumerate,consider-iterating-dictionary,bad-classmethod-argument,bad-mcs-method-argument,bad-mcs-classmethod-argument,single-string-used-for-slots,line-too-long,too-many-lines,trailing-whitespace,missing-final-newline,trailing-newlines,multiple-statements,superfluous-parens,bad-whitespace,mixed-line-endings,unexpecte-dline-ending-format,bad-continuation,wrong-spelling-in-comment,wrong-spelling-in-docstring,invalid-characters-in-docstring,multiple-imports,wrong-import-order,ungrouped-imports,wrong-import-position,old-style-class,len-as-condition,print-statement,parameter-unpacking,unpacking-in-except,old-raise-syntax,backtick,long-suffix,old-ne-operator,old-octal-literal,import-star-module-level,raw-checker-failed,bad-inline-option,locally-disabled,locally-enabled,file-ignored,suppressed-message,useless-suppression,deprecated-pragma,literal-comparison,no-self-use,no-classmethod-decorator,no-staticmethod-decorator,cyclic-import,duplicate-code,too-many-ancestors,too-many-instance-attributes,too-few-public-methods,too-many-public-methods,too-many-return-statements,too-many-branches,too-many-arguments,too-many-locals,too-many-statements,too-many-boolean-expressions,consider-merging-isinstance,too-many-nested-blocks,simplifiable-if-statement,redefined-argument-from-local,no-else-return,consider-using-ternary,trailing-comma-tuple,unreachable,dangerous-default-value,pointless-statement,pointless-string-statement,expression-not-assigned,unnecessary-pass,unnecessary-lambda,duplicate-key,deprecated-lambda,assign-to-new-keyword,useless-else-on-loop,exec-used,eval-used,confusing-with-statement,using-constant-test,lost-exception,assert-on-tuple,attribute-defined-outside-init,bad-staticmethod-argument,protected-access,arguments-differ,signature-differs,abstract-method,super-init-not-called,no-init,non-parent-init-called,useless-super-delegation,unnecessary-semicolon,bad-indentation,mixed-indentation,lowercase-l-suffix,wildcard-import,deprecated-module,relative-import,reimported,import-self,misplaced-future,fixme,invalid-encoded-data,global-variable-undefined,global-variable-not-assigned,global-statement,global-at-module-level,unused-import,unused-variable,unused-argument,unused-wildcard-import,redefined-outer-name,redefined-builtin,redefine-in-handler,undefined-loop-variable,cell-var-from-loop,bare-except,broad-except,duplicate-except,nonstandard-exception,binary-op-exception,property-on-old-class,logging-not-lazy,logging-format-interpolation,bad-format-string-key,unused-format-string-key,bad-format-string,missing-format-argument-key,unused-format-string-argument,format-combined-specification,missing-format-attribute,invalid-format-index,anomalous-backslash-in-string,anomalous-unicode-escape-in-string,bad-open-mode,boolean-datetime,redundant-unittest-assert,deprecated-method,apply-builtin,basestring-builtin,buffer-builtin,cmp-builtin,coerce-builtin,execfile-builtin,file-builtin,long-builtin,raw_input-builtin,reduce-builtin,standarderror-builtin,unicode-builtin,xrange-builtin,coerce-method,delslice-method,getslice-method,setslice-method,no-absolute-import,old-division,dict-iter-method,dict-view-method,next-method-called,metaclass-assignment,indexing-exception,raising-string,reload-builtin,oct-method,hex-method,nonzero-method,cmp-method,input-builtin,round-builtin,intern-builtin,unichr-builtin,map-builtin-not-iterating,zip-builtin-not-iterating,range-builtin-not-iterating,filter-builtin-not-iterating,using-cmp-argument,eq-without-hash,div-method,idiv-method,rdiv-method,exception-message-attribute,invalid-str-codec,sys-max-int,bad-python3-import,deprecated-string-function,deprecated-str-translate-call,assigning-non-slot,inconsistent-return-statements

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=


[REPORTS]

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio).You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages
reports=yes

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,future.builtins


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?&lt;?https?://\S+&gt;?$

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=80

# Maximum number of lines in a module
max-module-lines=1000

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=trailing-comma,dict-separator

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent,sys,requests

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=SQLObject,Connection,_socketobject

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=pyinotify,rados,rbd,_ped,xattr,snack,parted,ceph_argparse,pylibmc,gobject,dbus,ldap,avahi,rrdtool,prctl,common.tools,requests.packages.urllib3.exceptions,src.common.tools.trivial

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1


[SIMILARITIES]

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

# Minimum lines number of a similarity.
min-similarity-lines=4


[SPELLING]

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no


[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging


[BASIC]

# Naming hint for argument names
argument-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$

# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for attribute names
attr-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$

# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Naming hint for class attribute names
class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Regular expression matching correct class attribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Naming hint for class names
class-name-hint=[A-Z_][a-zA-Z0-9]+$

# Regular expression matching correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Naming hint for constant names
const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming hint for function names
function-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$

# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# Naming hint for inline iteration names
inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$

# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Naming hint for method names
method-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$

# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for module names
module-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
property-classes=abc.abstractproperty

# Naming hint for variable names
variable-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$

# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$


[IMPORTS]

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant


[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in a if statement
max-bool-expr=5

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of statements in function / method body
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception

</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Gavin</name></author><category term="python" /><category term="Automation" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">pytest 之 pytest.ini</title><link href="http://0.0.0.0:4000/2023/10/27/pytest_pytest.ini/" rel="alternate" type="text/html" title="pytest 之 pytest.ini" /><published>2023-10-27T00:00:00+08:00</published><updated>2023-10-27T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/10/27/pytest_pytest.ini</id><content type="html" xml:base="http://0.0.0.0:4000/2023/10/27/pytest_pytest.ini/"><![CDATA[<h1 id="概述">概述</h1>

<p>pytest 配置文件可以改变 pytest 的运行方式，它是一个固定的文件（名称固定，只能是 pytest.ini），读取配置信息，按指定的方式去运行。</p>

<p>pytest.ini 放在项目的根目录下。</p>

<p>简而言之，如果 pytest.ini 有该参数值，在执行的时候，先读取配置文件中的参数，然后取其他地方的（主函数/命令行中）。</p>

<h1 id="注意点">注意点</h1>

<p>pytest.ini 不能使用任何中文符号，包括汉字、空格、引号、冒号等等。</p>

<p>pytest 里面有些文件是非 test 文件</p>

<ul>
  <li>pytest.ini：pytest 的主配置文件，可以改变 pytest 的默认行为</li>
  <li>conftest.py：测试用例的一些 fixture 配置</li>
  <li><em>init</em>.py：识别该文件夹为 python 的 package 包</li>
  <li>tox.ini 与 pytest.ini 类似，用 tox 工具时候才有用</li>
  <li>setup.cfg 也是 ini 格式文件，影响 setup.py 的行为</li>
</ul>

<h1 id="哪些内容可以放在-pytestini-文件中">哪些内容可以放在 pytest.ini 文件中</h1>

<p>pytest.ini 文件中的内容，来自于 <code class="highlighter-rouge">pytest --help</code>， 具体信息，请查阅help，每个参数都有描述说明。</p>

<h1 id="pytestini示例">pytest.ini示例</h1>

<p>以下为我的project中使用的 pytest.ini 文件内容，参考如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>[pytest]
log_cli = false
log_level = NOTSET
log_file = ../report/pytest_autotest.log
log_format = %(asctime)s [%(filename)s:%(lineno)-4s] [%(levelname)5s] %(message)s
log_date_format=%Y-%m-%d %H:%M:%S
log_file_format = %(asctime)s [%(filename)s:%(lineno)-4s] [%(levelname)5s] %(message)s
log_file_date_format=%Y-%m-%d %H:%M:%S
log_cli_level = INFO
log_cli_format = %(asctime)s [%(filename)s:%(lineno)-4s] [%(levelname)5s] %(message)s
log_cli_date_format=%Y-%m-%d %H:%M:%S

norecursedirs = .svn .git
console_output_style = count
addopts =-vrs --show-progress --cache-clear --full-trace -p no:warnings
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这里我主要使用：</p>

<p>(1) log记录日志，规定了log level&amp;format&amp;path</p>

<p>(2) 要忽略扫描测试用例的目录（如上，忽略了.svn 和 .git 目录，因为pytest会全目录扫描，指定忽略相关目录，避免无效扫描）</p>

<p>(3) colsole output style</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>[pytest]
console_output_style = classic  #经典样式
console_output_style = progress #带有进度指示器的经典演示
console_output_style = count    #像progress,但将进度显示为已完成的测试数，而不是百分比
</pre></td></tr></tbody></table></code></pre></div></div>

<p>(4) addopts 更改默认命令行选项，经常要用到某些参数，又不想重复输入</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>addopts =  -vv        #以更详细的显示运行结果
           -m smoke   #被标记为 smoke 的用例
          --disable-warnings           # 禁用所有warnings，不建议使用，禁用范围过大, 等同于上面的 “-p no:warnings”
          --alluredir allure_results   # allure报告路径
          --maxfail=2 -rf              # 2个用例失败后退出，并给出详细信息
          --full-trace                 # 不截断任何的tracebacks，打印更详细的错误堆栈信息，默认是截断

</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="关于-warnning">关于 warnning</h1>

<p>官网（https://docs.pytest.org/en/7.4.x/how-to/capture-warnings.html#pytest-mark-filterwarnings）给的示例：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>import warnings
import pytest


def api_v1():
    warnings.warn(UserWarning("api v1, should use functions from v2"))
    return 1


# @pytest.mark.filterwarnings("ignore:api v1")
def test_one():
    assert api_v1() == 1

</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="禁用warnings的方式">禁用warnings的方式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre># 禁用所有warnings，通常不使用，禁用范围过大
pytest  --disable-warnings

# 使用-W选项忽略warning， :: 表示具体的警告类名称   :表示匹配告警中msg的子串
pytest -W ignore::UserWarning
pytest -W "ignore:api v1"   # 这里的 "api v1"，为上面示例代码中 'warnings.warn(UserWarning("api v1, should use functions from v2"))' 的子串，下同
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="使用装饰器pytestmarkfilterwarnings">使用装饰器@pytest.mark.filterwarnings</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre># : 表示匹配告警信息中的msg的子串
@pytest.mark.filterwarnings("ignore:api v1") 

# :: 表示匹配告警信息中的告警类的类名，例如给出代码示例中的告警即可使用如下方式过滤告警

@pytest.mark.filterwarnings("ignore::UserWarning")
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="在pytestini中进行告警过滤该文件需要存放到项目根目录">在pytest.ini中进行告警过滤，该文件需要存放到项目根目录</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>[pytest]
filterwarnings =
    ignore::UserWarning
    ignore::urllib3.exceptions.InsecureRequestWarning
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="pytestini-中禁用warnings插件方式">pytest.ini 中禁用warnings插件方式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>[pytest]
addopts = -p no:warnings
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Gavin</name></author><category term="pytest" /><category term="Automation" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">pytest 之 fixture</title><link href="http://0.0.0.0:4000/2023/10/25/pytest_fixture_guide/" rel="alternate" type="text/html" title="pytest 之 fixture" /><published>2023-10-25T00:00:00+08:00</published><updated>2023-10-25T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/10/25/pytest_fixture_guide</id><content type="html" xml:base="http://0.0.0.0:4000/2023/10/25/pytest_fixture_guide/"><![CDATA[<h1 id="概述">概述</h1>

<h2 id="pytest的fixture是什么">pytest的fixture是什么？</h2>

<p>fixture是pytest的大杀器，是pytest特有的功能，是精髓所在，fixture有两种实现方式：</p>

<ul>
  <li>
    <p>xunit-style，跟unittest框架的机制非常相似，即setup/teardown系列</p>
  </li>
  <li>
    <p>自己的fixture机制，以@pytest.fixture装饰器来申明</p>
  </li>
</ul>

<p>主要的目的是为了提供一种可靠和可重复性的手法去运行那些最基本的测试内容。</p>

<h2 id="pytest优势">pytest优势</h2>

<p>从功能上看来，它与setup、teardown相似，但是优势明显，如下：</p>

<h3 id="命令灵活"><strong>命令灵活</strong></h3>

<p>​        对于setup.teardown，可以不起这两个名字，即不局限于setup和teardown这几个命名</p>

<h3 id="数据共享"><strong>数据共享</strong></h3>

<p>​    （1）在conftest.py配置里写的方法可以实现数据共享，不需要import导入，就能自动找到一些配置，可以跨文件共享</p>

<p>​    （2）按模块化的方式实现，每个fixture都可以互相调用</p>

<h3 id="实现参数化"><strong>实现参数化</strong></h3>

<p>​    @pytest.fixture()有5个参数，如下：</p>

<p><code class="highlighter-rouge">@pytest.fixture(scope="", params="", autouse="", ids="", name="")</code></p>

<p><strong>(1) scope</strong></p>

<p>scope的层次及神奇的yield组合相当于各种setup和teardown，可以跨函数function，类class，模块module或整个测试session范围</p>

<table>
  <thead>
    <tr>
      <th>取值</th>
      <th>范围</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>function</td>
      <td>函数级</td>
      <td>每个函数或方法都会调用</td>
    </tr>
    <tr>
      <td>class</td>
      <td>类级别</td>
      <td>每个测试类只运行一次</td>
    </tr>
    <tr>
      <td>module</td>
      <td>模块级别</td>
      <td>每一个.py文件只调用一次</td>
    </tr>
    <tr>
      <td>package</td>
      <td>包级</td>
      <td>每一个python包只调用一次</td>
    </tr>
    <tr>
      <td>session</td>
      <td>会话级</td>
      <td>每次会话只需要运行一次，会话内所有方法及类、模块都共享这个方法</td>
    </tr>
  </tbody>
</table>

<p><strong>(2) params</strong></p>

<p>参数化（支持，列表，元组，字典列表[{},{},{}]，字典元组({},{},{}) )</p>

<p>params将在下一篇文章中进行描述。</p>

<p><strong>(3) autouse</strong></p>

<p>自动执行fixture，默认False表示不开启，可以设置为True开启自动使用fixture功能，这样用例就不用每次都去传参了(自动调用fixture功能)。</p>

<p>使用autouse时，需要慎重，避免范围失控。</p>

<p><strong>(4) ids</strong></p>

<p>参数化时，给每一个值设置一个变量名</p>

<p>ids将在下篇文章，和params一起进行描述。</p>

<p><strong>(5) name</strong></p>

<p>给@pytest.fixture()标记的方法取一个别名，意义不大</p>

<h1 id="xunit-style-风格">xunit-style 风格</h1>

<p>官方文档：</p>

<p><code class="highlighter-rouge">https://docs.pytest.org/en/stable/how-to/xunit_setup.html#xunitsetup</code></p>

<p>总结如下：</p>

<ul>
  <li>每个级别的setup/teardown都可以多次复用</li>
  <li>如果相应的初始化函数执行失败或者被跳过则不会执行teardown方法</li>
</ul>

<h2 id="function级别">function级别</h2>

<p>示例：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="k">def</span> <span class="nf">setup_function</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Do something before function'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">teardown_function</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Do something after function'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">test_case_1</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'  Test function-1'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">test_case_2</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'  Test function-2'</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>文件命名为test_functionLevel.py</p>

<p><strong>输出结果：</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre># pytest -sq test_functionLevel.py

Do something before function
  Test function-1
.Do something after function

Do something before function
  Test function-2
.Do something after function

2 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>说明</strong>：</p>

<p>通过输出结果我们可以总结：</p>

<ul>
  <li>setup_function会在每一个测试函数前执行初始化操作</li>
  <li>teardown_function会在每一个测试函数执行后执行销毁工作</li>
</ul>

<h2 id="method级别">method级别</h2>

<p>示例:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="k">class</span> <span class="nc">TestMethod</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">setup_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">method</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Before'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">teardown_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">method</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'After'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_case_1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Test case1'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_case_2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Test case2'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>文件命名为test_methodLevel.py</p>

<p><strong>输出结果</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>Before
Test case1
.After

Before
Test case2
.After

2 passed in 0.00s
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>说明</strong>：</p>

<p>通过输出结果我们可以总结：</p>

<ul>
  <li>setup_method会在每一个测试方法前执行初始化操作</li>
  <li>teardown_method会在每一个测试方法执行后执行销毁工作，且方法级别的fixture是作用在测试类中的方法上的</li>
</ul>

<h2 id="class级别">class级别</h2>

<p>示例</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="k">class</span> <span class="nc">TestClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="o">@</span><span class="nb">classmethod</span>
    <span class="k">def</span> <span class="nf">setup_class</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">setup_class() for {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cls</span><span class="p">.</span><span class="n">__name__</span><span class="p">))</span>

    <span class="o">@</span><span class="nb">classmethod</span>
    <span class="k">def</span> <span class="nf">teardown_class</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'teardown_class() for {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cls</span><span class="p">.</span><span class="n">__name__</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">test_case_1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'self.test_case_1()'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_case_2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'self.test_case_2()'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>文件命名为test_classLevel.py</p>

<p><strong>输出结果</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre># pytest -sq test_classLevel.py

setup_class() for TestClass
self.test_case_1()
.self.test_case_2()
.teardown_class() for TestClass

2 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>说明:</strong></p>

<p>通过输出结果我们可以总结：</p>

<ul>
  <li>setup_class会在测试类执行前执行一次初始化操作</li>
  <li>teardown_class会在测试类执行后执行一次销毁工作，且class级别的fixture需要使用@classmethod装饰</li>
</ul>

<h2 id="module级别">module级别</h2>

<p>示例</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
# -*- coding:UTF-8 -*-
</span>
<span class="kn">import</span> <span class="nn">pytest</span>


<span class="k">def</span> <span class="nf">setup_module</span><span class="p">(</span><span class="n">module</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">setup_module() for {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">module</span><span class="p">.</span><span class="n">__name__</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">teardown_module</span><span class="p">(</span><span class="n">module</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'teardown_module() for {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">module</span><span class="p">.</span><span class="n">__name__</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">test_case_1</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'test_case_1()'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">test_case_2</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'test_case_2()'</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">TestClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">test_case_3</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'self.test_case_3()'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_case_4</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'self.test_case_4()'</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>文件命名为test_moduleLevel.py</p>

<p><strong>输出结果</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre># pytest -sq test_moduleLevel.py

setup_module() for test_moduleLevel
test_case_1()
.test_case_2()
.self.test_case_3()
.self.test_case_4()
.teardown_module() for test_moduleLevel

4 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>说明:</strong></p>

<p>通过输出结果我们可以总结：</p>

<ul>
  <li>setup_module会在测试函数或类执行前执行一次初始化操作</li>
  <li>teardown_module会在测试函数或类执行后执行一次销毁工作</li>
</ul>

<h1 id="pytest的fixture实现方式">pytest的fixture实现方式</h1>

<p>通过@pytest.fixture装饰器来定义fixture，一个函数被@pytest.fixture装饰，那么这个函数就是fixture。</p>

<p>使用fixture时，分为二个部分：fixture定义、fixture调用。</p>

<p>除此之外，还有fixture的共享机制，嵌套调用机制。</p>

<h2 id="定义fixture">定义fixture</h2>

<ul>
  <li>
    <p>fixture通过函数实现</p>
  </li>
  <li>
    <p>使用@pytest.fixture进行装饰</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>import pytest
  
@pytest.fixture()
def login_init():
    print("Start login option")
    yield 
    print("End of login")
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>前置准备工作代码和后置清理工作代码，都写在一个函数里面</p>
  </li>
  <li>
    <p>通过yeild关键字，区分前置代码和后置代码 。yeild之前的代码为前置代码，yeild之后的代码为后置代码</p>
  </li>
</ul>

<p>​        在实际应用场景当中，可以只有前置准备工作代码，也可以只有后置清理工作代码。</p>

<ul>
  <li>
    <p>fixture有4个作用域</p>

    <p>测试会话(session)、测试模块(module)、测试类(class)、测试用例(function)</p>
  </li>
</ul>

<p>​       测试会话：pytest执行测试用例的整个过程，称为会话。</p>

<p>​       比如pytest收集到了20条用例并执行完成，这个过程称为测试会话。</p>

<p>​       设置fixture的作用域：通过@pytest.fixture(scope=作用域)来设置。默认情况下，scope=function</p>

<ul>
  <li>fixture的返回值设置：yeild 返回值</li>
</ul>

<p>​        当测试用例当中，要使用fixture里生成的数据时，则需要fixture返回数据。</p>

<p>​        若有数据返回则：yeild 返回值</p>

<h2 id="调用fixture">调用fixture</h2>

<p>在fixture定义好之后，可以明确：</p>

<ul>
  <li>fixture处理了哪些前置准备工作、哪些后置清理工作</li>
  <li>fixture作用在哪个范围(是测试函数？还是测试类？还是测试会话？还是测试模块？)</li>
</ul>

<p>在以上两点都定下来了之后，接下来就是在测试用例当中，根据需要调用不同的fixture。</p>

<p>调用方法有两种：</p>

<ul>
  <li>在测试用例/测试类上面加上：@pytest.mark.usefixture(“fixture的函数名字”)</li>
  <li>将fixture函数名，作为测试用例函数的参数</li>
</ul>

<p>第2种用法，主要是用参数来接收fixture的返回值，以便在测试用例中使用。</p>

<p>第一种方式案例如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>import pytest

@pytest.fixture()
def login_init():
    print("Start login option")
    yield 
    print("End of login")


@pytest.mark.usefixtures("login_init")
def test_login_case():
    print("This is a test case")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>第二种方案如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By

URL = "www.google.com"


@pytest.fixture()
def fixture_driver():
    driver = webdriver.Chrome()
    driver.get(URL)
    yield driver
    driver.close()


def test_case(fixture_driver):
    # fixture_driver 作为参数传入测试用例，接收此函数的返回值driver
    # 即在当前测试用例内部，fixture_driver就是fixture返回的driver对象
    driver.find_elements(By.XPATH, 'item1').click()
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上例中只传递一个fixture 函数作为参数，也可传递多个fixture作为参数：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre>@pytest.fixture()
def user():
    user = "Gavin"
    return user


@pytest.fixture()
def pwd():
    pwd = "123456"
    return pwd


@pytest.fixture()
def role():
    role = 'QA'
    return role


def test_trans_fixture(user, pwd, role):
    """   pass more than one fixture function   """
    print(user, pwd, role)
    assert "Gavin" in str(user)
    assert pwd == "123456"
    assert role == 'Software Tester Enginer'
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="fixture嵌套"><strong>fixture嵌套</strong></h2>

<p>fixture不但支持共享 ，还支持嵌套使用。<strong>嵌套使用即：一个fixture，可以做另外一个fixture的参数。</strong></p>

<p>如下图所示：名为init2的fixture，可以作为init的参数。</p>

<p>并且，init当中，将init2的返回值，同样返回。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre>import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By

URL = "www.google.com"


@pytest.fixture()
def fixture_driver():
    driver = webdriver.Chrome()
    driver.get(URL)
    yield driver
    driver.close()


@pytest.fixture()
def fixture_button(fixture_driver):
    # fixture_driver 作为 fixture_button 的参数，当用例中调用 fixture_button 时，
    # fixture_button 会自动调用 fixture_driver
    print("I'm fixture_button, start")
    yield fixture_driver
    print("I'm fixture_button, end")
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="fixture的其他用法">Fixture的其他用法</h2>

<h3 id="提供灵活的类似setup和teardown功能">提供灵活的类似setup和teardown功能</h3>

<p>pytest的fixture另一个强大的功能就是在函数执行前后增加操作，类似setup和teardown操作，但是比setup和teardown的操作更加灵活。具体使用方式是同样定义一个函数，然后用装饰器标记为fixture，然后在此函数中使用一个yield语句，yield语句之前的就会在测试用例之前使用，yield之后的语句就会在测试用例执行完成之后再执行。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre>import pytest

@pytest.fixture()
def run_function():
    print("Run before function...")
    yield
    print("Run after function...")

def test_case_1(run_function):
    print("case 1")

def test_case_2():
    print("case 2")

def test_case_3(run_function):
    print("case 3")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre># pytest -sq test_fixture.py
Run before function...
case 1
.Run after function...
case 2
.Run before function...
case 3
.Run after function...

3 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<p>从结果可以看出，”test case 2” 并没有执行 run_function 这个fixture，因为没有传递这个fixture作为函数到 test_case_2；还有另外一个原因：run_function  这个fixture中没有携带autouse和scope参数，默认请看下 autouse=False, scope=”function”，如果更改成如下示例，就是另外一番场景了:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre>import pytest

@pytest.fixture(autouse=True, scope='function')
def run_function():
    print("Run before function...")
    yield
    print("Run after function...")

def test_case_1(run_function):
    print("case 1")

def test_case_2():
    print("case 2")

def test_case_3(run_function):
    print("case 3")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre># pytest -sq test_fixture.py
Run before function...
case 1
.Run after function...
Run before function...
case 2
.Run after function...
Run before function...
case 3
.Run after function...

3 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<p>下文会介绍到autouse的用法，此处不做更详细描述。</p>

<h3 id="利用pytestmarkusefixtures叠加调用多个fixture">利用pytest.mark.usefixtures叠加<strong>调用多个fixture</strong></h3>

<p>如果一个方法或者一个class用例想要同时调用多个fixture，可以使用@pytest.mark.usefixtures()进行叠加。注意叠加顺序，先执行的放底层，后执行的放上层。需注意：</p>

<p>① 与直接传入fixture不同的是，@pytest.mark.usefixtures无法获取到被fixture装饰的函数的返回值；</p>

<p>② @pytest.mark.usefixtures的使用场景是：被测试函数需要多个fixture做前后置工作时使用；</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre>import  pytest


@pytest.fixture()
def fixture_func_1():
    print("Before Function 1")
    yield
    print("After Function 1")

@pytest.fixture()
def fixture_func_2():
    print("Before function 2")
    yield
    print("After Function 2")

@pytest.fixture()
def fixture_func_3():
    print("Before Function 3")
    yield
    print("After Function 3")


@pytest.mark.usefixtures("fixture_func_3")  # 最后执行fixture_func_3
@pytest.mark.usefixtures("fixture_func_2")  # 再执行fixture_func_2
@pytest.mark.usefixtures("fixture_func_1")  # 先执行fixture_func_1
def test_func():
    print("This is test case")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre># pytest -sq test_fixture3.py
Before Function 1
Before function 2
Before Function 3
This is test case
.After Function 3
After Function 2
After Function 1

1 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="fixture自动使用autousetrue">fixture自动使用autouse=True</h3>

<p>当用例很多的时候，每次都传这个参数，会很麻烦。fixture里面有个参数autouse，默认是False没开启的，可以设置为True开启自动使用fixture功能，这样用例就不用每次都去传参了。</p>

<p>autouse设置为True，自动调用fixture功能，所有用例都会生效，<strong>包括类中的测试用例和类以外的测试用例</strong>。</p>

<p>示例：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre>import pytest


@pytest.fixture(autouse=True, scope="function")
def function_autouse():
    """   When autouse is True, each test case, this applies to every test case   """
    print("\n---Before---")
    yield
    print("---After---")

# function_autouse 函数的autouse=True时，无论是否使用usefixtures引用function_autouse, 
# 还是传递 function_autouse 到测试用例，都会执行function_autouse
@pytest.mark.usefixtures("function_autouse")
def test_case01():
    print("Test case 1")

def test_case02():
    print("Test case 2")

class Test:
    def test_case03(self):
        print("Test case 3")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre># pytest -sq test_fixture4.py

---Before---
Test case 1
.---After---

---Before---
Test case 2
.---After---

---Before---
Test case 3
.---After---

3 passed in 0.00s
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="pytest-fixture四种作用域">Pytest fixture四种作用域</h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>fixture(scope='function'，params=None，autouse=False，ids=None，name=None)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上文有提到fixture的5种作用域，这里直接展示示例。</p>

<h4 id="function级别-1">function级别</h4>

<p>function默认模式为@pytest.fixture() 函数级别，即scope=”function”，scope可以不写。每一个函数或方法都会调用，每个测试用例执行前都会执行一次function级别的fixture。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>import pytest


# @pytest.fixture(scope="function")等价于@pytest.fixture()
@pytest.fixture(scope="function")
def function_scope():
    """   Use-case level fixtures that scope individual test cases  """
    print("\nBefore function Level")
    yield
    print("After function Level")

# test_01会引用function_autouse函数，test_02没有用修饰器修饰，故不会引用
def test_case01(function_scope):
    print("func 1 print")

def test_case02():
    print("func 2 print")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre># pytest -sq test_fixture_scope_function.py

Before function Level
func 1 print
.After function Level
func 2 print
.
2 passed in 0.01s
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="class级别-1">class级别</h4>

<p>fixture的scope值还可以是class，此时则fixture定义的动作就会在测试类class的所有用例之前和之后运行。</p>

<p><strong>注意：</strong></p>

<p>测试类中只要有一个测试用例的参数中使用了class级别的fixture，则在整个测试类的所有测试用例都会调用fixture函数。</p>

<h5 id="用例类中的测试用例调用fixture">用例类中的测试用例调用fixture</h5>

<p>执行fixture定义的动作，以及此测试类的所有用例结束后同样要运行fixture指定的动作</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>import pytest


@pytest.fixture(scope="class")
def class_level_autouse():
    """  A class-level fixture that scopes the entire class  """
    print("\n class Before")
    yield
    print("class after")


class TestClassAutoFixture:
    # class级别的fixture任意一个用例引用即可
    def test_class_auto_fixture_1(self, class_level_autouse):
        print("class 1 print")


    def test_class_auto_fixture_2(self):
        print("class 2 print")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>测试类中的第1条测试用例引用了fixture修饰的函数，则整个测试类的所有测试用例都会执行fixture函数的前置操作，在所有用例执行完成后，都会执行fixture函数的后置操作。</p>

<p>输出结果如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre># pytest -sq test_class_level_autouse1.py

 class Before
class 1 print
.class 2 print
.class after

2 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="用例类外的测试用例调用fixture">用例类外的测试用例调用fixture</h5>

<p>如果在类外的函数中去使用class级别的fixture，则此时在测试类外每个测试用例中，fixture跟function级别的fixture作用是一致的，即在类外的函数中引用了class级别的fixture，则在此函数之前和之后同样去执行fixture定义的对应的操作。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>import pytest


@pytest.fixture(scope="class")
def class_scope():
    """  A class-level fixture that scopes the entire class  """
    print("\n class Before")
    yield
    print("class after")


class TestClassAutoFixture:
    # class级别的fixture任意一个用例引用即可
    def test_class_auto_fixture_1(self, class_scope):
        print("class 1 print")


    def test_class_auto_fixture_2(self):
        print("class 2 print")


def test_class_auto_fixture(class_scope):
    print("class 3 print")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如下文所示，测试类外的函数引用了class级别的fixture，则它的作用会等同于function级别的fixture，运行结果如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre># pytest -sq test_class_level_autouse2.py

 class Before
class 1 print
.class 2 print
.class after

 class Before
class 3 print
.class after

3 passed in 0.02s
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="module级别-1">module级别</h4>

<p>在Python中module即.py文件（可以理解为当前的.py文件为一个测试suit，因为这个.py文件里含有一个或多个测试用例集合），当fixture定义为module时，则此fixture将在当前文件中起作用。</p>

<p>这里需要特别说明的是，当fixture的scope定义为module时，只要当前文件中有一个测试用例使用了fixture，不管这个用例是在类外，还是在类中，都会在当前文件（模块）的所有测试用例执行之前去执行fixture定义的行为以及当前文件的所有用例结束之后同样去执行fixture定义的对应操作。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre>import pytest


@pytest.fixture(scope="module")
def module_scope():
    """  Applies to the entire py file  """
    print("\nBefore module Level")
    yield
    print("After module Level-")
    
    
# 测试类外和测试类内的函数方法都调用了module级别的fixture，但整个py文件只会生效一次fixture。
def test_module_scope_out_class(module_scope):
    print("Yest case of scope")


class TestScope1:
    def test_scope_01(self):
        print("case scope 01")

    def test_scope_02(self, module_scope):
        print("case scope 02")

    def test_scope_03(self):
        print("case scope 03")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre># pytest -sq test_module_scope.py

Before module Level
Yest case of scope
.case scope 01
.case scope 02
.case scope 03
.After module Level-

4 passed in 0.01s

</pre></td></tr></tbody></table></code></pre></div></div>

<p>若类中的方法分别调用了class级别的fixture和module级别的fixture，则会两个fixture都生效：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre># 顺序在前面fixture会先执行
def test_scope_01(self, module_scope, class_scope): 
    print("case scope 01")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>若类中的方法同时调用了function级别、class级别、module级别的fixture，则3种fixture会同时生效：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre># 顺序在前面fixture会先执行
def test_scope_02(self, module_scope, class_scope, function_scope):  
    print("case scope 02")
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="session级别使用conftestpy共享fixture">session级别(使用conftest.py共享fixture)</h4>

<p>当fixture的scope定义为session时，是指在当前目录下的所有用例之前和之后执行fixture对应的操作。</p>

<p><strong>fixture为session级别是可以跨.py模块调用</strong>的，也就是当我们有多个.py文件的用例的时候，如果多个用例只需调用一次fixture，那就可以设置为scope=”session”，并且写到conftest.py文件里。</p>

<p>使用方式：</p>

<ul>
  <li>定义测试用例文件</li>
  <li>构建conftest.py内容</li>
</ul>

<p><strong>说明：</strong></p>

<p>在指定目录下创建<strong>conftest.py（固定命名，不可修改）</strong>文件，然后在conftest.py文件中定义fixture方法，将scope指定为session，此时在当前目录下只要有一个用例使用了此fixture，则就会在当前目录下所有用例之前和之后会执行fixture定义的对应的操作。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>import pytest

@pytest.fixture(scope="session")
def session_scope():
    """  A session-level fixture that works for all test cases in that directory  """
    print("\nUse case pre-operations at the session level")
    yield
    print("Post-operation of use cases at the session level")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>定义了session级别的fixture，存放于该用例文件的同一个目录下的conftest.py文件中，该目录下的任一用例文件中的任一测试用例，引用了这个session级别的fixture，则这个session级别的fixture会针对这整个用例文件会生效。若存放在根目录下，则针对整个工程的所有用例都会生效。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>class TestSessionScopeFixture:
    # session级别的fixture任意一个用例引用即可
    def test_session_scope_fixture_1(self, session_scope):
        print("session 1 print")

    def test_session_scope_fixture_2(self):
        print("session 2 print")


def test_session_scope_fixture():
    print("session 3 print")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>运行结果如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre># pytest -sq test_fixture_session_scope.py

Use case pre-operations at the session level
session 1 print
.session 2 print
.session 3 print
.Post-operation of use cases at the session level

3 passed in 0.01s
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="ids参数-修改用例结果名称">ids参数-修改用例结果名称</h4>

<p>将在下一篇文字中，结合@pytest.mark.parametrize() 进行描述，本文忽略。</p>

<h4 id="name参数-重命名fixture函数名称">name参数-重命名fixture函数名称</h4>

<p>将在下一篇文字中，结合@pytest.mark.parametrize() 进行描述，本文忽略。</p>

<h4 id="params参数-提供返回值供测试函数调用">params参数-提供返回值供测试函数调用</h4>

<p>将在下一篇文字中，结合@pytest.mark.parametrize() 进行描述，本文忽略。</p>

<h4 id="内置fixture">内置fixture</h4>

<h5 id="tmpdir和tmpdir_factory">tmpdir和tmpdir_factory</h5>

<p>内置的tmpdir和tmpdir_factory负责在测试开始运行前创建临时文件目录，并在测试结束后删除。</p>

<p>如果测试代码要对文件进行读/写操作，那么可以使用tmpdir或tmpdir_factory来创建文件或目录。单个测试使用tmpdir，多个测试使用tmpdir_factory。tmpdir的作用范围是函数级别，tmpdir_factory的作用范围是会话级别。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="rouge-code"><pre>def test_tmpdir(tmpdir):
    # tmpdir already has a path name associated with it
    # join() extends the path to include a filename
    # the file is created when it's written to
    a_file = tmpdir.join('something.txt')

    # you can create directories
    a_sub_dir = tmpdir.mkdir('anything')

    # you can create files in directories (created when written)
    another_file = a_sub_dir.join('something_else.txt')

    # this write creates 'something.txt'
    a_file.write('contents may settle during shipping')

    # this write creates 'anything/something_else.txt'
    another_file.write('something different')

    # you can read the files as well
    assert a_file.read() == 'contents may settle during shipping'
    assert another_file.read() == 'something different'


def test_tmpdir_factory(tmpdir_factory):
    # you should start with making a directory
    # a_dir acts like the object returned from the tmpdir fixture
    a_dir = tmpdir_factory.mktemp('mydir')

    # base_temp will be the parent dir of 'mydir'
    # you don't have to use getbasetemp()
    # using it here just to show that it's available
    base_temp = tmpdir_factory.getbasetemp()
    print('base:', base_temp)

    # the rest of this test looks the same as the 'test_tmpdir()'
    # example except I'm using a_dir instead of tmpdir

    a_file = a_dir.join('something.txt')
    a_sub_dir = a_dir.mkdir('anything')
    another_file = a_sub_dir.join('something_else.txt')

    a_file.write('contents may settle during shipping')
    another_file.write('something different')

    assert a_file.read() == 'contents may settle during shipping'
    assert another_file.read() == 'something different'
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="pytestconfig">pytestconfig</h5>

<p>内置的pytestconfig可以通过命令行参数、选项、配置文件、插件、运行目录等方式来控制pytest。</p>

<p>pytestconfig是request.config的快捷方式，它在pytest文档里有时候被称为“pytest配置对象”。</p>

<p>要理解pytestconfig如何工作，可以添加一个自定义的命令行选项，然后在测试中读取该选项。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>def pytest_addoption(parser):
    """  Add a command line option  """
    parser.addoption(
        "--env", default="test", choices=["dev", "test", "pre"], help="enviroment parameter")
</pre></td></tr></tbody></table></code></pre></div></div>

<p>以 pytest_addoption 添加的命令行选项必须通过插件来实现，或者在项目顶层目录的conftest.py文件中完成。它所在的conftest.py不能处于测试子目录下。</p>

<p>上述是一个传入测试环境的命令行选项，接下来可以在测试用例中使用这些选项。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>def test_option(pytestconfig):
    print('the current environment is:', pytestconfig.getoption('env'))

pytest -sq test_config.py::test_option
</pre></td></tr></tbody></table></code></pre></div></div>

<p>由于前面的 pytest_addoption 中定义的env的默认参数是test，所以通过 pytestconfig.getoption 获取到的env的值就是test。</p>]]></content><author><name>Gavin</name></author><category term="Automation" /><category term="pytest" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">借助pytest fixture优化测试用例</title><link href="http://0.0.0.0:4000/2023/10/24/pytest_testcase_optimization/" rel="alternate" type="text/html" title="借助pytest fixture优化测试用例" /><published>2023-10-24T00:00:00+08:00</published><updated>2023-10-24T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/10/24/pytest_testcase_optimization</id><content type="html" xml:base="http://0.0.0.0:4000/2023/10/24/pytest_testcase_optimization/"><![CDATA[<h1 id="概述">概述</h1>

<p>近期碰到一个问题，信息如下:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre>from selenium import webdriver
from selenium.webdriver.common.by import By

URL = "www.google.com"

def test_click_1():
    driver = webdriver.Chrome()
    driver.get(URL)
    driver.find_element(
        By.XPATH,
        "div[contains(@class, 'item1')]"
    ).click()
    driver.close()


def test_click_2():
    driver = webdriver.Chrome()
    driver.get(URL)
    driver.find_element(
        By.XPATH,
        "div[contains(@class, 'item2')]"
    ).click()
    driver.close()


def test_click_3():
    driver = webdriver.Chrome()
    driver.get(URL)
    driver.find_element(
        By.XPATH,
        "div[contains(@class, 'item3')]"
    ).click()
    driver.close()
</pre></td></tr></tbody></table></code></pre></div></div>

<p>问：上述测试用例，如何优化？</p>

<h1 id="分析">分析</h1>

<p>从示例用例来看，每个test_case中，都有driver的初始化和URL的get动作，以及close()动作；另外就是find_elements要做的事情，除了传递的XPATH元素不一样外，其他动作都一样，所以优化的点有：</p>

<ul>
  <li>封装driver初始化与URL的get动作</li>
  <li>封装close动作</li>
  <li>优化find_elements，借助pytest.mark.parametrize实现参数化</li>
</ul>

<h1 id="优化结果">优化结果</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By

URL = "www.google.com"


@pytest.fixture()
def fixture_driver():
    driver = webdriver.Chrome()
    driver.get(URL)
    yield driver
    driver.close()


@pytest.mark.parametrize('item', ['item'+str(x) for x in range(1,4)])
def test_case(fixture_driver, item):
    driver.find_elements(By.XPATH, item).click()
</pre></td></tr></tbody></table></code></pre></div></div>

<p>经过优化后，测试用例更简洁、更契合pytest要求。</p>

<h1 id="结语">结语</h1>

<p>这里的优化使用pytest的fixture特性，以及借助parametrize实现参数化。</p>

<p>对于pytest的fixture与pytest.mark.parametrize，近期会抽空整理一份示例并做说明。</p>]]></content><author><name>Gavin</name></author><category term="Automation" /><category term="pytest" /><summary type="html"><![CDATA[概述]]></summary></entry><entry><title type="html">mysql 增量备份</title><link href="http://0.0.0.0:4000/2023/08/22/mysql_auto_backup/" rel="alternate" type="text/html" title="mysql 增量备份" /><published>2023-08-22T00:00:00+08:00</published><updated>2023-08-22T00:00:00+08:00</updated><id>http://0.0.0.0:4000/2023/08/22/mysql_auto_backup</id><content type="html" xml:base="http://0.0.0.0:4000/2023/08/22/mysql_auto_backup/"><![CDATA[<h1 id="概述">概述</h1>

<p>本文介绍使用python开发一自动备份MySQL数据库工具，完成MySQL数据库定期备份动作。</p>

<h1 id="环境">环境</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>root@ubuntu:~# hostnamectl 
   Static hostname: ubuntu
         Icon name: computer-vm
           Chassis: vm
        Machine ID: 2e28c320b7b64edcb7b039f56050833c
           Boot ID: 928ff3a2a9ef430ba5b923b0d119902f
    Virtualization: vmware
  Operating System: Ubuntu 18.04.6 LTS
            Kernel: Linux 5.4.0-84-generic
      Architecture: x86-64
root@ubuntu:~# mysql --version
mysql  Ver 14.14 Distrib 5.7.42, for Linux (x86_64) using  EditLine wrapper
root@ubuntu:~# 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>并创建了一个名称为 ‘test’的数据库，存放一张表（user）和一个视图（user_view）：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre>mysql&gt; create table user (name VARCHAR(25), age INT(3));
Query OK, 0 rows affected (0.02 sec)

mysql&gt; insert into user(name, age) values('zhangsan', 30);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into user(name, age) values('lisi', 31);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into user(name, age) values('wangwu', 38);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into user(name, age) values('cat', 2);
Query OK, 1 row affected (0.00 sec)

mysql&gt; create view user_view as select * from user;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; show tables;
+----------------+
| Tables_in_test |
+----------------+
| user           |
| user_view      |
+----------------+
2 rows in set (0.00 sec)

mysql&gt; select * from tables;
ERROR 1146 (42S02): Table 'test.tables' doesn't exist
mysql&gt; select * from user;
+----------+------+
| name     | age  |
+----------+------+
| zhangsan |   30 |
| lisi     |   31 |
| wangwu   |   38 |
| cat      |    2 |
+----------+------+
4 rows in set (0.00 sec)

mysql&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>说明：</p>

<p>本文只是示例，所以创建的数据库test中表、视图无论结构还是数据量，都非常小，仅做示例使用。</p>

<h1 id="备份策略">备份策略</h1>

<ul>
  <li>借助innobackupex实现数据库的备份动作</li>
  <li>每天凌晨两点自动进行备份</li>
  <li>每周日进行一次全量备份，其他周天则进行增量备份</li>
  <li>备份目录保留30天</li>
</ul>

<p>如下图所示：</p>

<p><img class="shadow" src="/img/in-post/backup_mysql.bmp" width="1200" /></p>

<h1 id="备份脚本">备份脚本</h1>

<p><code class="highlighter-rouge">mysql_backup.py</code> 内容如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
</pre></td><td class="rouge-code"><pre>root@ubuntu:~# cat mysql_backup.py 
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import datetime
import os
import sys
import commands 
import time
import logging
import subprocess

# Set log format
log_file = "/var/log/backup_mysql.log"
logging.basicConfig(format='%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s:%(message)s',
                            level=logging.INFO, filename=log_file, filemode='a')

mysql_username = 'root'
mysql_password = 'p@ssw0rd'
incremental_backup_path = '/backup/mysql/incremental'
incremental_backup_base_path = '/backup/mysql/base/'
keep_days = 30
mysql_cnf = "/etc/mysql/my.cnf"


def mkdir_if_not_exists(path):
    if not os.path.exists(path):
        os.makedirs(path)
        logging.info("Creating backup folder %s", path)
    else:
        logging.info("Path %s exists, no need to create it", path)


def juge_weekday():
    cur_day = datetime.datetime.now().strftime("%Y-%m-%d")
    weeks = datetime.datetime.fromtimestamp(time.mktime(time.strptime(cur_day, "%Y-%m-%d"))).weekday() + 1

    return weeks


def full_backup_database(db='mysql'):
    complete_ok = False
    backup_base_path = ''
    full_backup_cmd = "innobackupex  --defaults-file={} --user={} --password={} " \
                      "--databases={} --backup {}".format(mysql_cnf, mysql_username,
                                                          mysql_password, db,
                                                          incremental_backup_base_path)

    logging.info("Start to full backup database : (%s)", db)

    output =  commands.getoutput(full_backup_cmd).strip()

    if 'completed OK' in output:
        complete_ok = True

    for each_line in output.split("\n"):
        if 'Backup created in directory' in each_line:
            backup_base_path = each_line.split()[-1].replace("'", '')

    if not os.path.exists(backup_base_path):
        logging.error("Not find backup base path, exit!!!")
        sys.exit(1)

    if complete_ok:
        logging.info("Full backup database : (%s) success", db)
    else:
        logging.error("Full backup database : (%s) failed, please view log : (%s)", db, output)
        sys.exit(1)


def get_latest_subdir():
    all_subdirs = [incremental_backup_base_path + os.sep + d for d in os.listdir(incremental_backup_base_path) if os.path.isdir(incremental_backup_base_path + os.sep + d)]
    if len(all_subdirs):
        latest_subdir = max(all_subdirs, key=os.path.getmtime)
        return latest_subdir
    else:
        logging.error("Not get apply log path!")
        return

def apply_log(backup_base_path, db='mysql'):
    complete_ok = False
    apply_cmd = "innobackupex --apply-log {}".format(backup_base_path)

    logging.info("Start to apply log")

    output =  commands.getoutput(apply_cmd).strip()
    if 'completed OK' in output:
        complete_ok = True

    if complete_ok:
        logging.info("Apply log : (%s) success", backup_base_path)
    else:
        logging.error("Apply log : (%s) failed, please view log : (%s)", backup_base_path, output)
        sys.exit(1)


def incremental_backup(backup_base_path, db='mysql'):
    complete_ok = False
    incremental_cmd = "innobackupex --defaults-file={} --user={}" \
                      "--password={} --databases={} --incremental {} " \
                      "--incremental-basedir={}".format(mysql_cnf, mysql_username,
                                                        mysql_password, db,
                                                        incremental_backup_path,
                                                        backup_base_path)

    logging.info("Start incremental backup database")

    output =  commands.getoutput(incremental_cmd).strip()
    if 'completed OK' in output:
        complete_ok = True

    if complete_ok:
        logging.info("Incremental backup database : (%s) success", db)
    else:
        logging.error("Incremental backup database : (%s) failed, please view log : (%s)", db, output)
        sys.exit(1)

    logging.info("Success to backup database : (%s)", db)


def del_old_backup(path):
    old_folder = subprocess.Popen("find {}  -maxdepth 3  -mindepth 2 -mtime +{} -type d".format(path, keep_days),stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True).communicate()
    if None not in old_folder:  # Find the folder
        logging.info('Now delete file : (%s)', old_folder)

        # str_old_folder = old_folder[0].decode("utf-8", errors="ignore")
        str_old_folder = old_folder[0]
        logging.info("%s", str_old_folder)
        list_lid_folder = str_old_folder.split('\n')

        for folder in list_lid_folder:
            if folder.strip():
                logging.info("Delete %s", folder)
                os.system("rm -rf {}".format(folder))
    else: #old_folder like this ('', None) if not find folders
        logging.info("No folders find under [{}] to delete, skip".format(path))


def loop_backup_mysql(db):
    weeks = juge_weekday()
    apply_log_path = get_latest_subdir()

    if apply_log_path:
        if weeks == 7:
            full_backup_database(db)
            new_apply_log_path = get_latest_subdir()
            if apply_log_path == new_apply_log_path:
                apply_log(apply_log_path, db)
            else:
                apply_log(new_apply_log_path, db)
        else:
            new_apply_log_path = get_latest_subdir()
            if apply_log_path == new_apply_log_path:
                incremental_backup(apply_log_path, db)
            else:
                incremental_backup(new_apply_log_path, db)
    else:
        # First time to backup, so run full backup
        full_backup_database(db)
        apply_log_path = get_latest_subdir()


if __name__ == '__main__':
    logging.info("-" * 80)
    # If path not exist, create it
    if not os.path.exists(incremental_backup_base_path):
        mkdir_if_not_exists(incremental_backup_base_path)

    if not os.path.exists(incremental_backup_path):
        mkdir_if_not_exists(incremental_backup_path)

    # Backup database
    db = 'test'
    loop_backup_mysql(db)

    # Delete old folders
    del_old_backup(incremental_backup_path)
    del_old_backup(incremental_backup_base_path)

root@ubuntu:~#
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>说明：</strong></p>

<ul>
  <li>日志记录/var/log/backup_mysql.log 文件中</li>
  <li>‘/backup/mysql/base/’ 存放全量备份的数据库备份信息</li>
  <li>‘/backup/mysql/incremental’ 存放增量数据库的备份信息</li>
  <li>判断当前日期是星期几，如果结果是7表明为周日，则进行全量备份，否则进行增量备份</li>
  <li>无论是全量备份还是增量备份，备份目录下只保留30天的备份记录，过期目录将被清理掉（先备份后清理）</li>
</ul>

<h1 id="定时任务设置">定时任务设置</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>0 2 * * * python /usr/local/bin/mysql_backup.py 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>每天凌晨两点执行备份操作，备份脚本自动识别当前日期是星期几，如果是星期日，则进行全量备份；否则进行增量备份。</p>

<h1 id="恢复">恢复</h1>

<p>建议手工进行恢复，参考命令如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>root@ubuntu:~# innobackupex 
	--apply-log /mysql_backup/2023-08-21_23-19-39/
	--incremental-dir=/mysql_backup/2023-08-21_23-19-39/
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>Gavin</name></author><category term="python" /><category term="mysql" /><summary type="html"><![CDATA[概述]]></summary></entry></feed>