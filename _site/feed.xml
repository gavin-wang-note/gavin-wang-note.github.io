<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://172.17.73.80:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://172.17.73.80:4000/" rel="alternate" type="text/html" /><updated>2022-06-08T18:33:41+08:00</updated><id>http://172.17.73.80:4000/feed.xml</id><title type="html">Gavin Blog</title><subtitle>关于软件测试, 与你一起发现更大的世界</subtitle><entry><title type="html">CentOS7设置netconsole</title><link href="http://172.17.73.80:4000/2022/06/08/centos7_config_netconsole/" rel="alternate" type="text/html" title="CentOS7设置netconsole" /><published>2022-06-08T00:00:00+08:00</published><updated>2022-06-08T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/06/08/centos7_config_netconsole</id><content type="html" xml:base="http://172.17.73.80:4000/2022/06/08/centos7_config_netconsole/">&lt;h1 id=&quot;netconsole简述&quot;&gt;Netconsole简述&lt;/h1&gt;

&lt;p&gt;将内核打印的日志信息通过UDP方式发送至另一台服务器。&lt;/p&gt;

&lt;p&gt;本文概述的是基于CentOS7的配置设定，Ubuntu的设定会右差别，请参考之前的另外一篇博文。&lt;/p&gt;

&lt;h1 id=&quot;配置内核日志发送端client端&quot;&gt;配置内核日志发送端（Client端）&lt;/h1&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;这里的client端，表明的是当前哪台机器要将kernel log上报到rsyslog server去。&lt;/p&gt;

&lt;h2 id=&quot;写入rtcrclocal中开机自动设置&quot;&gt;写入/rtc/rc.local中，开机自动设置&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;dmesg -n 7
modprobe configfs
modprobe netconsole
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置netconsole&quot;&gt;配置netconsole&lt;/h2&gt;

&lt;p&gt;Server端，配置远程接收ip地址、远程接收端口（默认514）、远程接收MAC（可选）、本地发送设备名、本地发送端口&lt;/p&gt;

&lt;p&gt;vi /etc/sysconfig/netconsole&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# 取消SYSLOGPORT、SYSLOGPORT、SYSLOGMACADDR注释并添加相关参数
#--------------------------------------------------------
#也可执行如下命令插入所需的ip、port、mac
#端口为接收端服务器rsyslog服务的接收端口
ip=&quot;192.168.1.161&quot;
echo -e &quot;SYSLOGADDR=$ip\nSYSLOGPORT=514\nSYSLOGMACADDR=$(ping -c 1 $ip&amp;gt;/dev/null&amp;amp;&amp;amp;arp|grep $ip|tr -s ' '|cut -f3 -d ' ')&quot;&amp;gt;&amp;gt;/etc/sysconfig/netconsole
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置etcsysconfignetconsole-中dev设备&quot;&gt;配置/etc/sysconfig/netconsole 中DEV设备&lt;/h2&gt;

&lt;p&gt;vi /etc/sysconfig/netconsole&lt;/p&gt;

&lt;p&gt;修改上述配置文件中的 DEV的值，如果配置了bond，需设置为bondX;否则设置为具体网口名称。&lt;/p&gt;

&lt;h2 id=&quot;重启netconsole服务&quot;&gt;重启netconsole服务&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;systemctl restart netconsole
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;启用netconsole自启动&quot;&gt;启用netconsole自启动&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;systemctl enable netconsole
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;配置内核日志接收端server端&quot;&gt;配置内核日志接收端（Server端）&lt;/h1&gt;

&lt;h2 id=&quot;修改rsyslog配置文件接收来自udp的日志&quot;&gt;修改rsyslog配置文件接收来自UDP的日志&lt;/h2&gt;

&lt;p&gt;vi /etc/rsyslog.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;#取消$ModLoad imudp和$UDPServerRun 514注释并修改514为需要监听接收udp的端口
#或者执行如下命令
sed -i 's/^#$Mod.*udp$/$ModLoad imudp/g;s/^#$UDP.*/$UDPServerRun 514/g' /etc/rsyslog.conf	#端口替换为自己所需要的
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;重启rsyslog服务&quot;&gt;重启rsyslog服务&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;systemctl restart rsyslog

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;检查是否正常监听指定端口&quot;&gt;检查是否正常监听指定端口&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;lsof -i:514
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如下所示即为正常监听中:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@centos-7 ~]# lsof -i:514
COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
rsyslogd 1735 root    3u  IPv4  43816      0t0  UDP *:syslog 
rsyslogd 1735 root    4u  IPv6  43817      0t0  UDP *:syslog 
[root@centos-7 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;查看来自远程服务器发送的内核日志&quot;&gt;查看来自远程服务器发送的内核日志&lt;/h1&gt;

&lt;p&gt;在Client端，尝试down与up某个网口，然后在Server端，执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;tail -f /var/log/messages
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;来跟踪日志，检查Client端的kernel log是否将kernel log 上报到当然rsyslog server的messages 文件中&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><category term="netconsole" /><summary type="html">Netconsole简述</summary></entry><entry><title type="html">使用edac工具来检测服务器内存故障</title><link href="http://172.17.73.80:4000/2022/06/08/edac_to_check_memory/" rel="alternate" type="text/html" title="使用edac工具来检测服务器内存故障" /><published>2022-06-08T00:00:00+08:00</published><updated>2022-06-08T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/06/08/edac_to_check_memory</id><content type="html" xml:base="http://172.17.73.80:4000/2022/06/08/edac_to_check_memory/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;随着虚拟化，Redis,BDB内存数据库等应用的普及，现在越来越多的服务器配置了大容量内存，拿DELL的R620来说在配置双路CPU下，其24个内存插槽，支持的内存高达960GB。对于ECC,REG这些带有纠错功能的内存故障检测是一件很头疼的事情，出现故障，还是可以连续运行几个月甚至几年，但如果运气不好，随时都会挂掉，好在linux中提供了一个edac-utils 内存纠错诊断工具，可以用来检查服务器内存潜在的故障。&lt;/p&gt;

&lt;h1 id=&quot;实战&quot;&gt;实战&lt;/h1&gt;

&lt;p&gt;下面以CentOS为例，介绍下edac-utils 工具的使用。&lt;/p&gt;

&lt;p&gt;在使用edac-utils 工具之前，需要先了解服务器的硬件架构，以DELL R620为例，(其它如HP DL360P G8，IBM X3650 M4 机型都使用了 E5-2600 系列CPU，C600 系列芯片组.大致相同)  其CPU内存控制器对应通道，内存槽关系，如下所示。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;处理器0 (对应一个内存控制器)
通道0：内存插槽A1、A5 和A9
通道1：内存插槽A2、A6 和A10
通道2：内存插槽A3、A7 和A11
通道3：内存插槽A4、A8 和A12

处理器1 (对应一个内存控制器)
通道0：内存插槽B1、B5 和B9
通道1：内存插槽B2、B6 和B10
通道2：内存插槽B3、B7 和B11
通道3：内存插槽B4、B8 和B12
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装-edac-utils-工具&quot;&gt;安装 edac-utils 工具&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;yum install -y libsysfs edac-utils
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;行检测命令可查看纠错提示如下&quot;&gt;行检测命令，可查看纠错提示如下&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@dbhost ~]# edac-util -v
mc0: 0 Uncorrected Errors with no DIMM info
mc0: 0 Corrected Errors with no DIMM info
mc0: csrow0: 0 Uncorrected Errors
mc0: csrow0: CPU_SrcID#0_Channel#0_DIMM#0: 6312 Corrected Errors    A1槽
mc0: csrow1: 0 Uncorrected Errors
mc0: csrow1: CPU_SrcID#0_Channel#0_DIMM#1: 0 Corrected Errors         A5槽
mc0: csrow2: 0 Uncorrected Errors
mc0: csrow2: CPU_SrcID#0_Channel#1_DIMM#0: 0 Corrected Errors         A2槽
mc0: csrow3: 0 Uncorrected Errors
mc0: csrow3: CPU_SrcID#0_Channel#1_DIMM#1: 0 Corrected Errors         A6槽
mc0: csrow4: 0 Uncorrected Errors
mc0: csrow4: CPU_SrcID#0_Channel#2_DIMM#0: 0 Corrected Errors         A3槽
mc0: csrow5: 0 Uncorrected Errors
mc0: csrow5: CPU_SrcID#0_Channel#2_DIMM#1: 0 Corrected Errors         A7槽
mc0: csrow6: 0 Uncorrected Errors
mc0: csrow6: CPU_SrcID#0_Channel#3_DIMM#0: 0 Corrected Errors         A4槽
mc1: 0 Uncorrected Errors with no DIMM info
mc1: 0 Corrected Errors with no DIMM info
mc1: csrow0: 0 Uncorrected Errors
mc1: csrow0: CPU_SrcID#1_Channel#0_DIMM#0: 6459 Corrected Errors     B1槽
mc1: csrow1: 0 Uncorrected Errors
mc1: csrow1: CPU_SrcID#1_Channel#0_DIMM#1: 0 Corrected Errors          B5槽
mc1: csrow2: 0 Uncorrected Errors
mc1: csrow2: CPU_SrcID#1_Channel#1_DIMM#0: 0 Corrected Errors          B2槽
mc1: csrow3: 0 Uncorrected Errors
mc1: csrow3: CPU_SrcID#1_Channel#1_DIMM#1: 0 Corrected Errors          B6槽
mc1: csrow4: 0 Uncorrected Errors
mc1: csrow4: CPU_SrcID#1_Channel#2_DIMM#0: 535 Corrected Errors       B3槽
mc1: csrow5: 0 Uncorrected Errors
mc1: csrow5: CPU_SrcID#1_Channel#2_DIMM#1: 0 Corrected Errors          B7槽
mc1: csrow6: 0 Uncorrected Errors
mc1: csrow6: CPU_SrcID#1_Channel#3_DIMM#0: 0 Corrected Errors          B4槽
[root@dbhost ~]#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 mc0 表示 表示内存控制器0,  CPU_Src_ID#0表示源CPU0 , Channel#0 表示通道0
DIMM#0 标示内存槽0，Corrected Errors 代表已经纠错的次数，根据前面列出的CPU通
道和内存槽对应关系即可给edac-utils 返回的信息进行编号。
即可得出 A1槽 6312 次纠错，B1槽 6459次纠错，B3槽 535次纠错. 3条内存出现潜在故障，接下来联系供应商进行更换即可。&lt;/p&gt;

&lt;p&gt;如果没有侦测到错误，显示信息如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node163 ~]# edac-util -v
mc0: 0 Uncorrected Errors with no DIMM info
mc0: 0 Corrected Errors with no DIMM info
mc0: csrow0: 0 Uncorrected Errors
mc0: csrow0: mc#0memory#0: 0 Corrected Errors
mc0: csrow10: 0 Uncorrected Errors
mc0: csrow10: mc#0memory#10: 0 Corrected Errors
mc0: csrow12: 0 Uncorrected Errors
mc0: csrow12: mc#0memory#12: 0 Corrected Errors
mc0: csrow14: 0 Uncorrected Errors
mc0: csrow14: mc#0memory#14: 0 Corrected Errors
mc0: csrow2: 0 Uncorrected Errors
mc0: csrow2: mc#0memory#2: 0 Corrected Errors
mc0: csrow4: 0 Uncorrected Errors
mc0: csrow4: mc#0memory#4: 0 Corrected Errors
mc0: csrow6: 0 Uncorrected Errors
mc0: csrow6: mc#0memory#6: 0 Corrected Errors
mc0: csrow8: 0 Uncorrected Errors
mc0: csrow8: mc#0memory#8: 0 Corrected Errors
mc1: 0 Uncorrected Errors with no DIMM info
mc1: 0 Corrected Errors with no DIMM info
edac-util: No errors to report.
[root@node163 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="Linux" /><category term="edac" /><summary type="html">概述</summary></entry><entry><title type="html">在linux中查看端口号是哪个进程在占用</title><link href="http://172.17.73.80:4000/2022/06/02/get_port_used_by_which_process/" rel="alternate" type="text/html" title="在linux中查看端口号是哪个进程在占用" /><published>2022-06-02T00:00:00+08:00</published><updated>2022-06-02T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/06/02/get_port_used_by_which_process</id><content type="html" xml:base="http://172.17.73.80:4000/2022/06/02/get_port_used_by_which_process/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;今天升级一套存储，碰到了80端口被占用，导致RGW bind 80 port时bind失败，最终导致RGW服务启用失败，造成S3 业务不可用问题。&lt;/p&gt;

&lt;h1 id=&quot;查看端口信息&quot;&gt;查看端口信息&lt;/h1&gt;

&lt;p&gt;Linux 上的 /etc/services 文件可以查看到更多关于保留端口的信息。&lt;/p&gt;

&lt;p&gt;可以使用以下三种方法查看端口信息。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ss：可以用于转储套接字统计信息&lt;/li&gt;
  &lt;li&gt;netstat：可以显示打开的套接字列表&lt;/li&gt;
  &lt;li&gt;lsof：可以列出打开的文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下我们将找出端口号为80,被哪个守护进程所使用。&lt;/p&gt;

&lt;h2 id=&quot;方法1使用-ss-命令&quot;&gt;方法1：使用 ss 命令&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node167:/var/log/ceph# ss -tlnp | grep ':80'
LISTEN     0      128          *:8080                     *:*                   users:((&quot;apache2&quot;,pid=2771,fd=3),(&quot;apache2&quot;,pid=2770,fd=3),(&quot;apache2&quot;,pid=2769,fd=3),(&quot;apache2&quot;,pid=2768,fd=3),(&quot;apache2&quot;,pid=2767,fd=3),(&quot;apache2&quot;,pid=2760,fd=3))
LISTEN     0      128          *:80                       *:*                   users:((&quot;haproxy&quot;,pid=2473,fd=4))
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;方法2使用-netstat-命令&quot;&gt;方法2：使用 netstat 命令&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node167:/var/log/ceph# netstat -lntp | grep ':80'
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      2760/apache2    
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      2473/haproxy    
root@node167:/var/log/ceph# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;方法3使用-lsof-命令&quot;&gt;方法3：使用 lsof 命令&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node167:/var/log/ceph# lsof -i:80
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
haproxy 2473 root    4u  IPv4   1766      0t0  TCP *:http (LISTEN)
root@node167:/var/log/ceph# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;此次事故概述&quot;&gt;此次事故概述&lt;/h1&gt;

&lt;p&gt;此次碰到的问题，是升级过程中未对新增功能相关port bind做处理，详情如下：&lt;/p&gt;

&lt;p&gt;Parts of ceph-client.radosgw.0.log:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;2022-06-02 17:05:38.709761 7fec78874040  0 deferred set uid:gid to 0:0 (root:root)
2022-06-02 17:05:38.709778 7fec78874040  0 ceph version 12.2.10-903-g0149c5ceafe (0149c5ceafe1c541f0a5044e1c5c9e4fbc71c64e) luminous (stable), process radosgw, pid 104451
2022-06-02 17:05:38.713450 7fec78874040  0 stack NetworkStack max thread limit is 24, switching to this now. Higher thread values are unnecessary and currently unsupported.
2022-06-02 17:05:38.807429 7fec78874040  0 starting handler: civetweb
2022-06-02 17:05:38.808117 7fec78874040  0 civetweb: 0x55d2cd1be0c0: cannot bind to 80: 98 (Address already in use)
2022-06-02 17:05:38.808143 7fec78874040  0 civetweb: 0x55d2cd1be0c0: cannot bind to 443s: 98 (Address already in use)
2022-06-02 17:05:38.808175 7fec78874040 -1 ERROR: failed run
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other log:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node167:/var/log/ceph# netstat -tnlp | grep ':80'
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      2760/apache2    
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      2473/haproxy    
root@node167:/var/log/ceph# cat /etc/ceph/ceph.conf | grep -i 'rgw frontends'
rgw frontends = civetweb port=80+443s ssl_certificate=/etc/ezs3/ssl/ezs3_server.pem num_threads=1024 ssl_cipher_list=HIGH:!aNULL:!MD5:!3DES ssl_protocol_version=4
rgw frontends = civetweb port=80+443s ssl_certificate=/etc/ezs3/ssl/ezs3_server.pem num_threads=1024 ssl_cipher_list=HIGH:!aNULL:!MD5:!3DES ssl_protocol_version=4
root@node167:/var/log/ceph# cat /etc/haproxy/haproxy.cfg
frontend https
        bind *:80
        bind *:443 ssl crt /etc/ezs3/ssl/ezs3_server.pem
        mode http
        option http-keep-alive
        option http-server-close
        timeout http-keep-alive 10s
        option forwardfor
        reqadd X-Forwarded-Proto:\ https
        default_backend rgw_cluster

backend rgw_cluster
        mode http
        balance roundrobin
       server localhost 127.0.0.1:7480 check
root@node167:/var/log/ceph# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里可以清晰看到，haproxy占用了RGW的80端口， /etc/haproxy/haproxy.cfg中&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;server localhost 127.0.0.1:7480 check
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;是告知ceph.conf中的rgw，你要使用的是7480这个port，而不是/etc/ceph/ceph.conf使用的却是80 port&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;rgw frontends = civetweb port=80+443s ssl_certificate=/etc/ezs3/ssl/ezs3_server.pem num_threads=1024 ssl_cipher_list=HIGH:!aNULL:!MD5:!3DES ssl_protocol_version=4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题的解决方法是修改/etc/ceph/ceph.conf中的80 port为 7480。&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry><entry><title type="html">获取OSD与CPU绑定关系</title><link href="http://172.17.73.80:4000/2022/05/19/bind_relationship_between_OSD_CPUS/" rel="alternate" type="text/html" title="获取OSD与CPU绑定关系" /><published>2022-05-19T00:00:00+08:00</published><updated>2022-05-19T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/05/19/bind_relationship_between_OSD_CPUS</id><content type="html" xml:base="http://172.17.73.80:4000/2022/05/19/bind_relationship_between_OSD_CPUS/">&lt;h1 id=&quot;代码&quot;&gt;代码&lt;/h1&gt;

&lt;p&gt;这里代码转自&lt;code class=&quot;highlighter-rouge&quot;&gt;https://blog.51cto.com/zphj1987/3212869&lt;/code&gt;，在他基础上增加了+号的颜色显示(高亮)，表明当前ceph-osd运行在对应On-line CPU(s)上.&lt;/p&gt;

&lt;h2 id=&quot;cpu信息&quot;&gt;CPU信息&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node163 ~]# lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                48
On-line CPU(s) list:   0-47
Thread(s) per core:    2
Core(s) per socket:    12
Socket(s):             2
NUMA node(s):          2
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 85
Model name:            Intel(R) Xeon(R) Gold 5118 CPU @ 2.30GHz
Stepping:              4
CPU MHz:               2244.518
BogoMIPS:              4600.00
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              1024K
L3 cache:              16896K
NUMA node0 CPU(s):     0-11,24-35
NUMA node1 CPU(s):     12-23,36-47
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti intel_ppin ssbd mba ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm mpx rdt_a avx512f avx512dq rdseed adx smap clflushopt clwb intel_pt avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts pku ospke md_clear flush_l1d
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码块&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
# -*- coding: UTF-8 -*-
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psutil&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;commands&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;prettytable&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrettyTable&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printosdcputable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;process&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printosdcputable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printosdcputable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrettyTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cpulist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OSD\CPU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;corelist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Core ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;phylist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Physical ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emplist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-----------&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpupro&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;psutil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cpulist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpupro&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;coreid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'egrep &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;processor|physical id|core id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /proc/cpuinfo | cut -d : -f 2 | paste - - -  | awk  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$1==%s {print $3 }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpupro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;corelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coreid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;phyid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'egrep &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;processor|physical id|core id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /proc/cpuinfo | cut -d : -f 2 | paste - - -  | awk  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$1==%s {print $2 }&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpupro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;phylist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phyid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpulist&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phylist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/var/run/ceph/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;osd&quot;&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osdlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osdthlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osdcpu&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;psutil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;osdlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;osdthlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pidfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osdid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ls  %s|cut -d &quot;.&quot; -f 2 2&amp;gt;/dev/null'&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidfile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osdpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cat %s  2&amp;gt;/dev/null'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osd_runcpu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ps -o  psr -p %s |grep -v PSR 2&amp;gt;/dev/null'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;th_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ps -o  psr -L  -p %s |grep -v PSR|awk &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gsub(/^ *| *$/,&quot;&quot;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  2&amp;gt;/dev/null'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osdpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;osdname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;osd.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdid&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osdlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osd_runcpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\033&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[31m+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\033&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[0m&quot;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osdth&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;osdthlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdthlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osdlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;osdthlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;process&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;osdthlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;运行结果&quot;&gt;运行结果&lt;/h1&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/osd_cpu_bind_relationship.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;</content><author><name>Gavin</name></author><category term="ceph" /><summary type="html">代码</summary></entry><entry><title type="html">获取ceph PG 分布</title><link href="http://172.17.73.80:4000/2022/05/19/ceph-PG-allocate/" rel="alternate" type="text/html" title="获取ceph PG 分布" /><published>2022-05-19T00:00:00+08:00</published><updated>2022-05-19T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/05/19/ceph-PG-allocate</id><content type="html" xml:base="http://172.17.73.80:4000/2022/05/19/ceph-PG-allocate/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;h1 id=&quot;第一版&quot;&gt;第一版&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;ceph_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ceph &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\{\{print \$3\}\}'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ceph_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s1&quot;&gt;'10.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pg_stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pg_stat&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;up&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ceph_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s1&quot;&gt;'12.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pg_stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PG_STAT&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UP&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;ceph pg dump | egrep &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^[0-9]*  &quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
/^'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pg_stat&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/ { col=1; while($col!=&quot;'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$up&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;) {col++}; col++ }
/^[0-9a-f]+.[0-9a-f]+/ { match($0,/^[0-9a-f]+/); pool=substr($0, RSTART, RLENGTH); poollist[pool]=0;
up=$col; i=0; RSTART=0; RLENGTH=0; delete osds; while(match(up,/[0-9]+/)&amp;gt;0) { osds[++i]=substr(up,RSTART,RLENGTH); up = substr(up, RSTART+RLENGTH) }
for(i in osds) {array[osds[i],pool]++; osdlist[osds[i]];}
}
END {
printf(&quot;\n&quot;);
printf(&quot;pool :\t&quot;); for (i in poollist) printf(&quot;%s\t&quot;,i); printf(&quot;| SUM \n&quot;);
for (i in poollist) printf(&quot;--------&quot;); printf(&quot;-------------\n&quot;);
for (i in osdlist) { printf(&quot;osd.%i\t&quot;, i); sum=0;
for (j in poollist) { printf(&quot;%i\t&quot;, array[i,j]); sum+=array[i,j]; poollist[j]+=array[i,j] }; printf(&quot;| %i\n&quot;,sum) }
for (i in poollist) printf(&quot;--------&quot;); printf(&quot;--------------\n&quot;);
printf(&quot;SUM :\t&quot;); for (i in poollist) printf(&quot;%s\t&quot;,poollist[i]); printf(&quot;|\n&quot;);
}'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果展示如下：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/pg_allocate_v1.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;第二版&quot;&gt;第二版&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;ceph_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ceph &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\{\{print \$3\}\}'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ceph_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s1&quot;&gt;'10.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pg_stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pg_stat&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;up&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ceph_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s1&quot;&gt;'12.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pg_stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PG_STAT&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UP&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;ceph pg dump | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
 /^'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pg_stat&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/ { col=1; while($col!=&quot;UP&quot;) {col++}; col++ }
 /^[0-9a-f]+\.[0-9a-f]+/ { match($0,/^[0-9a-f]+/); pool=substr($0, RSTART, RLENGTH); poollist[pool]=0;
 up=$col; i=0; RSTART=0; RLENGTH=0; delete osds; while(match(up,/[0-9]+/)&amp;gt;0) { osds[++i]=substr(up,RSTART,RLENGTH); up = substr(up, RSTART+RLENGTH) }
 for(i in osds) {array[osds[i],pool]++; osdlist[osds[i]];}
}
END {
 printf(&quot;\n&quot;);
 slen=asorti(poollist,newpoollist);
 printf(&quot;pool :\t&quot;);for (i=1;i&amp;lt;=slen;i++) {printf(&quot;%s\t&quot;, newpoollist[i])}; printf(&quot;| SUM \n&quot;);
 for (i in poollist) printf(&quot;--------&quot;); printf(&quot;----------------\n&quot;);
 slen1=asorti(osdlist,newosdlist)
 delete poollist;
 for (j=1;j&amp;lt;=slen;j++) {maxpoolosd[j]=0};
 for (j=1;j&amp;lt;=slen;j++) {for (i=1;i&amp;lt;=slen1;i++){if (array[newosdlist[i],newpoollist[j]] &amp;gt;0  ){minpoolosd[j]=array[newosdlist[i],newpoollist[j]] ;break } }}; 
 for (i=1;i&amp;lt;=slen1;i++) { printf(&quot;osd.%i\t&quot;, newosdlist[i]); sum=0; 
 for (j=1;j&amp;lt;=slen;j++)  { printf(&quot;%i\t&quot;, array[newosdlist[i],newpoollist[j]]); sum+=array[newosdlist[i],newpoollist[j]]; poollist[j]+=array[newosdlist[i],newpoollist[j]];if(array[newosdlist[i],newpoollist[j]] != 0){poolhasid[j]+=1 };if(array[newosdlist[i],newpoollist[j]]&amp;gt;maxpoolosd[j]){maxpoolosd[j]=array[newosdlist[i],newpoollist[j]];maxosdid[j]=newosdlist[i]};if(array[newosdlist[i],newpoollist[j]] != 0){if(array[newosdlist[i],newpoollist[j]]&amp;lt;=minpoolosd[j]){minpoolosd[j]=array[newosdlist[i],newpoollist[j]];minosdid[j]=newosdlist[i]}}}; printf(&quot;| %i\n&quot;,sum)} for (i in poollist) printf(&quot;--------&quot;); printf(&quot;----------------\n&quot;);
 slen2=asorti(poollist,newpoollist);
 printf(&quot;SUM :\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;%s\t&quot;,poollist[i]); printf(&quot;|\n&quot;);
 printf(&quot;Osd :\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;%s\t&quot;,poolhasid[i]); printf(&quot;|\n&quot;);
 printf(&quot;AVE :\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;%.2f\t&quot;,poollist[i]/poolhasid[i]); printf(&quot;|\n&quot;);
 printf(&quot;Max :\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;%s\t&quot;,maxpoolosd[i]); printf(&quot;|\n&quot;);
 printf(&quot;Osdid :\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;osd.%s\t&quot;,maxosdid[i]); printf(&quot;|\n&quot;);
 printf(&quot;per:\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;%.1f%\t&quot;,100*(maxpoolosd[i]-poollist[i]/poolhasid[i])/(poollist[i]/poolhasid[i])); printf(&quot;|\n&quot;);
 for (i=1;i&amp;lt;=slen2;i++) printf(&quot;--------&quot;);printf(&quot;----------------\n&quot;);
 printf(&quot;min :\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;%s\t&quot;,minpoolosd[i]); printf(&quot;|\n&quot;);
 printf(&quot;osdid :\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;osd.%s\t&quot;,minosdid[i]); printf(&quot;|\n&quot;);
 printf(&quot;per:\t&quot;); for (i=1;i&amp;lt;=slen;i++) printf(&quot;%.1f%\t&quot;,100*(minpoolosd[i]-poollist[i]/poolhasid[i])/(poollist[i]/poolhasid[i])); printf(&quot;|\n&quot;);
}'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果显示如下图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/PG_ALLOCATE_V2.png&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;语法的解释&quot;&gt;语法的解释&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/^pg_stat/ { col=1; while($col!=&quot;up&quot;) {col++}; col++ }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个是匹配pg dump 的输出结果里面pg_stat那个字段，开始计数为1，不是up值就将col的值加1，这个匹配到的就是我们经常看到的[1,10]这个值最后的col++是将col值+1,因为字段里面有up,up_primary,我们需要的是up_primary&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/?[1]+.[0-9a-f]+/ { match($0,/?[2]+/); pool=substr($0, RSTART, RLENGTH); poollist[pool]=0;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个是匹配前面的 1.17a pg号 ，使用自带的match函数 做字符串的过滤统计匹配.号前面的存储池ID， 并得到 RSTART, RLENGTH 值，这个是取到前面的存储池ID，使用substr 函数，就可以得到pool的值了，poollist[pool]=0，是将数组的值置为0&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;up=$col; i=0; RSTART=0; RLENGTH=0; delete osds; while(match(up,/[0-9]+/)&amp;gt;0) { osds[++i]=substr(up,RSTART,RLENGTH); up = substr(up, RSTART+RLENGTH) }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先将变量置0，然后将osd编号一个个输入到osds[i]的数组当中去&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for(i in osds) {array[osds[i],pool]++; osdlist[osds[i]];}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;将osds数组中的值输入到数组当中去，并且记录成osdlist，和数组array[osd[i],pool]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;printf(&quot;\n&quot;);
printf(&quot;pool :\t&quot;); for (i in poollist) printf(&quot;%s\t&quot;,i); printf(&quot;| SUM \n&quot;);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打印osd pool的编号&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for (i in poollist) printf(&quot;--------&quot;); printf(&quot;----------------\n&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;根据osd pool的长度打印—-&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for (i in osdlist) { printf(&quot;osd.%i\t&quot;, i); sum=0;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打印osd的编号&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for (j in poollist) { printf(&quot;%i\t&quot;, array[i,j]); sum+=array[i,j]; poollist[j]+=array[i,j] }; printf(&quot;| %i\n&quot;,sum) }&lt;/code&gt;
打印对应的osd的pg数目，并做求和的统计&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (i in poollist) printf(&quot;--------&quot;); printf(&quot;----------------\n&quot;);
printf(&quot;SUM :\t&quot;); for (i in poollist) printf(&quot;%s\t&quot;,poollist[i]); printf(&quot;|\n&quot;);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打印新的poollist里面的求和的值,修改版本里面用到的函数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slen1=asorti(osdlist,newosdlist)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个是将数组里面的下标进行排序，这里是对osd和poollist的编号进行排序 slen1是拿到数组的长度，使用for进行遍历输出&lt;/p&gt;</content><author><name>Gavin</name></author><category term="ceph" /><summary type="html">概述</summary></entry><entry><title type="html">解决 Log output is incomplete or unavailable 问题</title><link href="http://172.17.73.80:4000/2022/04/08/Log_output_is_incomplete_or_unavailable/" rel="alternate" type="text/html" title="解决 Log output is incomplete or unavailable 问题" /><published>2022-04-08T00:00:00+08:00</published><updated>2022-04-08T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/04/08/Log_output_is_incomplete_or_unavailable</id><content type="html" xml:base="http://172.17.73.80:4000/2022/04/08/Log_output_is_incomplete_or_unavailable/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;今天碰到客户反馈通过systemctl status 查看某daemon状态时，显示如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/in-post/daemon_journal_log_warn.jpg&quot; width=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;客户询问，这个warn是否有影响？&lt;/p&gt;

&lt;h1 id=&quot;根因&quot;&gt;根因&lt;/h1&gt;

&lt;p&gt;客户现场的这个daemon已经长久运行有些年头了，journal会统计log大小，到了某种程度就自动删掉。&lt;/p&gt;

&lt;h1 id=&quot;解决方法&quot;&gt;解决方法&lt;/h1&gt;

&lt;p&gt;放大journal，比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl --vacuum-size=1G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;示例的意思是：最大可存放1GB journal。&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry><entry><title type="html">自动化交互式格式化文件系统</title><link href="http://172.17.73.80:4000/2022/02/10/auto_yes_to_mkfs/" rel="alternate" type="text/html" title="自动化交互式格式化文件系统" /><published>2022-02-10T00:00:00+08:00</published><updated>2022-02-10T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/02/10/auto_yes_to_mkfs</id><content type="html" xml:base="http://172.17.73.80:4000/2022/02/10/auto_yes_to_mkfs/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;当格式化文件系统时，尤其是在脚本或代码中做这个操作，一旦出现需要输入’y’的时候，脚本或者代码就会卡住或者timeout，造成程序失败。&lt;/p&gt;

&lt;p&gt;本文介绍几种方法，在format时自动填写yes or y，让format持续进行下去.&lt;/p&gt;

&lt;h1 id=&quot;实践&quot;&gt;实践&lt;/h1&gt;

&lt;h2 id=&quot;方法1&quot;&gt;方法1&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yes | mkfs.ext4 /dev/sdb&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法2&quot;&gt;方法2&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo -e &quot;y\n&quot; | mkfs.ext4 /dev/sdx&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法3&quot;&gt;方法3&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkfs.ext4 -F /dev/sdb&lt;/code&gt;&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry><entry><title type="html">Linux 输出格式化成Json</title><link href="http://172.17.73.80:4000/2022/02/09/Linux_json_format_output/" rel="alternate" type="text/html" title="Linux 输出格式化成Json" /><published>2022-02-09T00:00:00+08:00</published><updated>2022-02-09T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/02/09/Linux_json_format_output</id><content type="html" xml:base="http://172.17.73.80:4000/2022/02/09/Linux_json_format_output/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;工作中经常会将Linux输出进行格式化，方便阅读。本文罗列几个常用的将输出转换为Json格式的方法。&lt;/p&gt;

&lt;h1 id=&quot;实践&quot;&gt;实践&lt;/h1&gt;

&lt;h2 id=&quot;方法1-python--mjsontool&quot;&gt;方法1 ‘python -mjson.tool’&lt;/h2&gt;

&lt;p&gt;此适用于多种OS&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ceph config-key get gateway_groups | python -mjson.tool&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法2-json_pp-or-jq&quot;&gt;方法2 ‘json_pp’ or ‘jq’&lt;/h2&gt;

&lt;p&gt;适用于Debin系OS&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ceph config-key get gateway_groups | json_pp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;适用于RedHat系OS，带颜色&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ceph config-key get gateway_groups | jq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;e.g:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@CVM01:~# ceph config-key get gateway_groups | json_pp
obtained 'gateway_groups'
{
   &quot;groups&quot; : {
      &quot;Default&quot; : {
         &quot;member&quot; : [
            &quot;10.10.101.102&quot;,
            &quot;10.10.101.103&quot;,
            &quot;10.10.101.101&quot;,
            &quot;10.10.101.104&quot;
         ],
         &quot;type&quot; : &quot;standard&quot;,
         &quot;zerocopy&quot; : false
      },
      &quot;!!!not used!!!&quot; : {
         &quot;type&quot; : &quot;standard&quot;,
         &quot;member&quot; : []
      }
   },
   &quot;virtual_gateways&quot; : {},
   &quot;_ver&quot; : &quot;5.2&quot;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry><entry><title type="html">Linux下显示文件隶属于哪个包</title><link href="http://172.17.73.80:4000/2022/02/08/Show_which_package_the_file_belongs_to/" rel="alternate" type="text/html" title="Linux下显示文件隶属于哪个包" /><published>2022-02-08T00:00:00+08:00</published><updated>2022-02-08T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/02/08/Show_which_package_the_file_belongs_to</id><content type="html" xml:base="http://172.17.73.80:4000/2022/02/08/Show_which_package_the_file_belongs_to/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;RD在定位问题的时候，需要QA告知当前文件隶属于哪个包，方便到对应包下查询源码来定位问题，故本文介绍一下Ubuntu和CentOS两种OS下查看文件隶属于哪个包。&lt;/p&gt;

&lt;h1 id=&quot;查看当前文件隶属于哪个package&quot;&gt;查看当前文件隶属于哪个package&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;CentOS&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@83fc1 bin]# rpm -qf zerocopy_setup.py 
ezgateway-8.3-211.git09ae02f.x86_64
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@CVM01:/usr/local/bin# dpkg -S ezcopy
ezgateway: /usr/local/bin/ezcopy
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry><entry><title type="html">自动部署cosbench并提交任务与结果处理解析</title><link href="http://172.17.73.80:4000/2022/01/28/auto_deploy_submit_analyser_cosbench_task/" rel="alternate" type="text/html" title="自动部署cosbench并提交任务与结果处理解析" /><published>2022-01-28T00:00:00+08:00</published><updated>2022-01-28T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/01/28/auto_deploy_submit_analyser_cosbench_task</id><content type="html" xml:base="http://172.17.73.80:4000/2022/01/28/auto_deploy_submit_analyser_cosbench_task/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;每次跑S3 Performance时，总要花费蛮多时间在构造xml以及xml调测上，避免xml内容有误影响测试。&lt;/p&gt;

&lt;p&gt;此次直接将整个过程（部署jre，部署cosbench，提交任务，自动收集存储信息以及对cosbench测试结果处理），整合成一套完整测试script，提高下工作效率。&lt;/p&gt;

&lt;h2 id=&quot;script-directory-structure&quot;&gt;Script directory structure&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node243 bak_cosbench]# tree ./
./
├── 00_run.sh
├── 01_check_expect_installed.sh
├── 02_deploy_jre.sh
├── 03_deploy_cosbench.sh
├── 04_deplay_nmon.sh
├── 05_submit_cosbench_task.sh
├── 06_collect_result.sh
├── 07_analyser_cosbench_result.sh
├── 08_restart_cosbench.sh
├── config
│   ├── 100M_size_object_write_read_mix_files.xml.ini
│   ├── 10M_size_object_write_read_mix_files.xml.ini
│   ├── 120Million_only_write.xml.ini
│   ├── 1G_size_object_write_read_mix_files.xml.ini
│   ├── 1M_size_object_write_read_mix_files.xml.ini
│   ├── 500M_size_object_write_read_mix_files.xml.ini
│   ├── controller_template.conf
│   ├── dry_run.xml
│   ├── parameters.conf
│   └── small_object_write_read_mix_files.xml.ini
├── packages
│   ├── 0.4.2.c4.tar.gz
│   ├── binfmt-support_2.1.6-1_amd64.deb
│   ├── expect-5.44.1.15-5.el6_4.x86_64.rpm
│   ├── jre-8u171-linux-x64.tar.gz
│   ├── ksh-20120801-143.el7_9.x86_64.rpm
│   ├── ksh-2020.0.0-4.ky10.x86_64.rpm
│   ├── ksh_93u+20120801-2ubuntu0.16.04.1_amd64.deb
│   ├── nmon_14g+debian-1build1_amd64.deb
│   ├── nmon-16g-3.el7.x86_64.rpm
│   ├── nmonchart40.tar
│   └── tcl-8.5.7-6.el6.x86_64.rpm
├── README.md
├── subin
│   ├── expect_scp.sh
│   └── expect_ssh.sh
└── xml_files
    └── 60workers_4KB_workload.xml

4 directories, 34 files
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;sop&quot;&gt;SOP&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Prepare test environment&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Install Kylin V10 or CentOS 7 or Ubuntu 16.04 as clients, client number is suggested same as that of gateways&lt;/li&gt;
  &lt;li&gt;The IP address of clients must be sequential&lt;/li&gt;
  &lt;li&gt;Yum/apt-get install some packages, including expect under packages dir(00_run.sh done)&lt;/li&gt;
  &lt;li&gt;Install nmon,ksh on each storage nodes(00_run.sh done)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Create a S3 account in web UI&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Only support S3&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Create a pool, then set as S3 pool&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Not care EC pool or Replicate pool&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Enable ssh for root on Storage nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;vim /etc/ssh/sshd_config to enable ssh for root(Default, after create cluster, forbidden root account to ssh)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;content&quot;&gt;Content&lt;/h1&gt;

&lt;h2 id=&quot;parameterconf&quot;&gt;parameter.conf&lt;/h2&gt;

&lt;p&gt;This conf defines items below:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Info of clients and storage nodes&lt;/li&gt;
  &lt;li&gt;Config nmonchart result path&lt;/li&gt;
  &lt;li&gt;Some parameter for generating cosbench XML, such as workers, runtime, ini xml files, mix ratio and so on&lt;/li&gt;
  &lt;li&gt;S3 AKEY&amp;amp;SKEY&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;script-info&quot;&gt;Script info&lt;/h2&gt;

&lt;p&gt;Scripts are usually executed by order of the number prefixed to the filename.&lt;/p&gt;

&lt;h3 id=&quot;00_runsh&quot;&gt;00_run.sh:&lt;/h3&gt;

&lt;p&gt;This script can be treated as a set which is constituted by the following scripts. You can modify the steps to fill the concrete requirements.&lt;/p&gt;

&lt;h3 id=&quot;01_check_expect_installedsh&quot;&gt;01_check_expect_installed.sh&lt;/h3&gt;

&lt;p&gt;This scripe is used to install some packages on each cosbench client, such as expect, tcl, nc, net-tools and sshpass.&lt;/p&gt;

&lt;h3 id=&quot;02_deploy_jresh&quot;&gt;02_deploy_jre.sh&lt;/h3&gt;

&lt;p&gt;This script is used to copy jre(jre-8u171-linux-x64.tar.gz) to all clients according to parameter.conf.
Since this script uses expect to interact, it is requested to install expect has not been installed on this client.&lt;/p&gt;

&lt;h3 id=&quot;03_deploy_cosbenchsh&quot;&gt;03_deploy_cosbench.sh&lt;/h3&gt;

&lt;p&gt;Execute it to install cosbench on all clients if have no cosbench installed before.
If has been installed cosbench, if cosbench in running status, do nothing; if not running, will replace controller.conf then start cosbench.
The first client as cosbench controller and driver, other nodes run driver.
Will stop and disable firewall, if firewall in running status, each cosbench node can’t connect to each other.&lt;/p&gt;

&lt;h3 id=&quot;04_deplay_nmonsh&quot;&gt;04_deplay_nmon.sh&lt;/h3&gt;

&lt;p&gt;Execute it to install nmon,ksh,nmonchart on all clients if have no nmon installed before.
Use nmon to collect monitor data from each storage node.
nmonchart needs ksh, so install ksh on each storage node.
Use nmonchart to chart nmon data on each storage node. 
    (1) After charted, mush be opened by Google browser
    (2) Needs to be able to access Google because needs Google plug-ins online(Can use nmon analyser to save excel)&lt;/p&gt;

&lt;h3 id=&quot;05_submit_cosbench_tasksh&quot;&gt;05_submit_cosbench_task.sh&lt;/h3&gt;

&lt;p&gt;Execute it to generate cosbench xml, then submit cosbench task, then run nmon to monitor storage on each storage node.
Support dry run or not, suggest to dry run, prevent problems in direct running, and run completely after ensuring that there are no problems in the whole process.&lt;/p&gt;

&lt;h3 id=&quot;06_collect_resultsh&quot;&gt;06_collect_result.sh&lt;/h3&gt;

&lt;p&gt;Execute it to collect nmon result from storage nodes&lt;/p&gt;

&lt;h3 id=&quot;07_analyser_cosbench_resultsh&quot;&gt;07_analyser_cosbench_result.sh&lt;/h3&gt;

&lt;p&gt;Execute it to analyser cosbench rest result on cosbench controller node&lt;/p&gt;

&lt;h3 id=&quot;08_restart_cosbenchsh&quot;&gt;08_restart_cosbench.sh&lt;/h3&gt;

&lt;p&gt;If wants to restart all of cosbench service, you can run this script to do it.
This action will not clean archive and log on each cosbench node by default, if to delete archive or log dir, should pass a parameter to shell, like as:./08_restart_cosbench.sh del.&lt;/p&gt;

&lt;h3 id=&quot;config&quot;&gt;config/&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;controller_template.conf --&amp;gt; Generate controller.conf then sync to the controller node
dry_run.xml                                    --&amp;gt; For dry run
1M_size_object_write_read_mix_files.xml.ini    --&amp;gt; Template of cosbench xml to generate cosbench task of xml files (Under xml_files)
10M_size_object_write_read_mix_files.xml.ini   --&amp;gt; Template of cosbench xml to generate cosbench task of xml files (Under xml_files)
100M_size_object_write_read_mix_files.xml.ini  --&amp;gt; Template of cosbench xml to generate cosbench task of xml files (Under xml_files)
500M_size_object_write_read_mix_files.xml.ini  --&amp;gt; Template of cosbench xml to generate cosbench task of xml files (Under xml_files)
1G_size_object_write_read_mix_files.xml.ini    --&amp;gt; Template of cosbench xml to generate cosbench task of xml files (Under xml_files)
120Million_only_write.xml.ini                  --&amp;gt; Template of cosbench xml to generate cosbench task of xml files (Under xml_files)
small_object_write_read_mix_files.xml.ini      --&amp;gt; Template of cosbench xml to generate cosbench task of xml files (Under xml_files)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For cosbench xml files(under xml_files), can decide the running sequence by specfying proper filename.&lt;/p&gt;

&lt;h3 id=&quot;packages&quot;&gt;packages/&lt;/h3&gt;

&lt;p&gt;Include expect, nmon, nmonchart, ksh and other tools.&lt;/p&gt;

&lt;h4 id=&quot;subin&quot;&gt;subin/&lt;/h4&gt;

&lt;p&gt;Some internal functions used by scripts.&lt;/p&gt;

&lt;h1 id=&quot;an-example-of-script-output&quot;&gt;An example of script output&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node243:~/cosbench# ./06_analyser_cosbench_result.sh 

----------------------------------------------------------------------------------- 
w1-QA_30workers_4K_30M_files_mix, cost_time:6H:22M:54S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4844.17         19.8417         6.05333              6.05333             
READ         3750.24         15.361          7.99                 7.94                
MIX_WRITE    1615.27         6.61614         10.1133              10.1133             
MIX_READ     1615.91         6.61874         8.31667              8.26333             
MIX_SUM      3231.18         13.2349         9.215                9.18833             

----------------------------------------------------------------------------------- 
w2-QA_30workers_100K_30M_files_mix, cost_time:6H:42M:30S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4020.6          411.709         7.32333              6.24667             
READ         3060.55         313.4           9.79667              8.9                 
MIX_WRITE    1378.69         141.178         11.5067              10.3833             
MIX_READ     1380.04         141.316         10.1067              9.17667             
MIX_SUM      2758.73         282.494         10.8067              9.78                

----------------------------------------------------------------------------------- 
w3-QA_30workers_200K_30M_files_mix, cost_time:7H:27M:26S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        3300.63         675.969         8.96333              7.02333             
READ         2171.91         444.807         13.8033              12.14               
MIX_WRITE    1103.61         226.021         13.14                11.0667             
MIX_READ     1103.17         225.929         13.9167              12.15               
MIX_SUM      2206.78         451.95          13.5283              11.6083             

----------------------------------------------------------------------------------- 
w4-QA_30workers_1024K_1M_Size_file_mix, cost_time:1H:46M:52S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        1377.91         1444.84         21.67                12.9667             
READ         1131.47         1186.44         26.5067              18.1567             
MIX_WRITE    555.8           582.804         25.1833              17.31               
MIX_READ     553.6           580.493         28.79                20.2333             
MIX_SUM      1109.4          1163.3          26.9867              18.7717             

----------------------------------------------------------------------------------- 
w5-QA_30workers_10240K_10M_Size_file_mix, cost_time:1H:13M:25S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        204.93          2148.8          146.457              90.3733             
READ         264.15          2769.83         113.58               60.35               
MIX_WRITE    108.17          1134.28         155.517              107.767             
MIX_READ     108.23          1134.85         121.68               70.4                
MIX_SUM      216.4           2269.13         138.598              89.0833             

----------------------------------------------------------------------------------- 
w6-QA_30workers_1048576K_1G_Size_file_mix, cost_time:1H:0M:43S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        3.02            3242.78         9933.77              595.353             
READ         5.64            6063.25         5313.1               173.7               
MIX_WRITE    1.97            2113.94         10108.3              656.83              
MIX_READ     1.98            2128.27         5094.47              188.393             
MIX_SUM      3.95            4242.21         7601.37              422.612             

----------------------------------------------------------------------------------- 
w7-QA_60workers_4K_30M_files_mix, cost_time:5H:46M:56S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        7500.32         30.7213         7.86333              7.86                
READ         6762.72         27.7001         8.86667              8.81333             
MIX_WRITE    2714.85         11.12           13.1667              13.1667             
MIX_READ     2714.38         11.1181         8.8                  8.74667             
MIX_SUM      5429.23         22.2381         10.9833              10.9567             

----------------------------------------------------------------------------------- 
w8-QA_60workers_100K_30M_files_mix, cost_time:6H:5M:42S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        5878.1          601.918         10.07                8.96                
READ         5407.74         553.752         11.0867              10.19               
MIX_WRITE    2345.29         240.157         14.3533              13.25               
MIX_READ     2342.65         239.887         11.1033              10.17               
MIX_SUM      4687.94         480.044         12.7283              11.71               

----------------------------------------------------------------------------------- 
w9-QA_60workers_200K_30M_files_mix, cost_time:6H:35M:58S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4841.97         991.636         12.2533              10.0967             
READ         3732.87         764.49          16.0667              14.4033             
MIX_WRITE    1911.44         391.463         15.9167              13.9                
MIX_READ     1910.73         391.317         15.3533              13.6167             
MIX_SUM      3822.17         782.78          15.635               13.7583             

----------------------------------------------------------------------------------- 
w10-QA_60workers_1024K_1M_Size_file_mix, cost_time:1H:32M:31S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        2286.75         2397.82         26.1367              17.3733             
READ         2057.05         2156.98         29.1633              21.0633             
MIX_WRITE    970.74          1017.9          28.4233              20.61               
MIX_READ     971.96          1019.17         33.2367              25.2167             
MIX_SUM      1942.7          2037.07         30.83                22.9133             

----------------------------------------------------------------------------------- 
w11-QA_60workers_10240K_10M_Size_file_mix, cost_time:1H:2M:21S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        351.36          3684.35         170.743              112.857             
READ         463.98          4865.07         129.313              74.13               
MIX_WRITE    181.99          1908.39         185.35               133.583             
MIX_READ     181.88          1907.17         144.337              89.06               
MIX_SUM      363.87          3815.56         164.843              111.322             

----------------------------------------------------------------------------------- 
w12-QA_60workers_1048576K_1G_Size_file_mix, cost_time:0H:54M:29S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4.88            5244.88         12283.6              796.11              
READ         8.17            8773.49         7343.07              289.537             
MIX_WRITE    3.08            3309.76         12663.9              908.077             
MIX_READ     3.07            3298.88         6822.43              307.493             
MIX_SUM      6.15            6608.64         9743.18              607.785             

----------------------------------------------------------------------------------- 
w13-QA_90workers_4K_30M_files_mix, cost_time:5H:43M:51S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        8321.29         34.084          10.6733              10.6733             
READ         9075.99         37.1753         9.90667              9.85333             
MIX_WRITE    3224.43         13.2073         18.1733              18.1733             
MIX_READ     3223.7          13.2043         9.60667              9.55333             
MIX_SUM      6448.13         26.4116         13.89                13.8633             

----------------------------------------------------------------------------------- 
w14-QA_90workers_100K_30M_files_mix, cost_time:5H:50M:24S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6638.6          679.793         13.4167              12.3433             
READ         7174.2          734.637         12.5367              11.6167             
MIX_WRITE    2848.65         291.702         19.08                17.94               
MIX_READ     2847.38         291.571         12.3867              11.43               
MIX_SUM      5696.03         583.273         15.7333              14.685              

----------------------------------------------------------------------------------- 
w15-QA_90workers_200K_30M_files_mix, cost_time:6H:27M:17S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        5517.32         1129.95         16.1767              14.0433             
READ         4825.51         988.266         18.6433              16.97               
MIX_WRITE    2412.23         494.026         20.0233              17.95               
MIX_READ     2410.53         493.676         17.1667              15.38               
MIX_SUM      4822.76         987.702         18.595               16.665              

----------------------------------------------------------------------------------- 
w16-QA_90workers_1024K_1M_Size_file_mix, cost_time:1H:28M:31S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        2749.42         2882.99         32.6367              24.3267             
READ         2716.61         2848.58         33.1233              25.18               
MIX_WRITE    1261.77         1323.06         33.17                25.36               
MIX_READ     1260.83         1322.08         38.08                30.1033             
MIX_SUM      2522.6          2645.14         35.625               27.7317             

----------------------------------------------------------------------------------- 
w17-QA_90workers_10240K_10M_Size_file_mix, cost_time:0H:59M:48S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        441.86          4633.24         203.613              146.33              
READ         618.08          6481.08         145.607              88.1033             
MIX_WRITE    229.29          2404.25         226.43               173.55              
MIX_READ     228.46          2395.61         166.75               109.23              
MIX_SUM      457.75          4799.86         196.59               141.39              

----------------------------------------------------------------------------------- 
w18-QA_90workers_1048576K_1G_Size_file_mix, cost_time:0H:52M:54S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        5.79            6215.07         15550.1              1077.36             
READ         8.92            9568.5          10100.1              395.867             
MIX_WRITE    3.57            3834.26         16124.7              1270.8              
MIX_READ     3.54            3798.35         9215.03              424.67              
MIX_SUM      7.11            7632.61         12669.9              847.737             

----------------------------------------------------------------------------------- 
w19-QA_120workers_4K_30M_files_mix, cost_time:5H:39M:31S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        8870.99         36.3356         13.39                13.39               
READ         10861.7         44.4896         11.04                10.99               
MIX_WRITE    3566.18         14.6071         23.3                 23.3                
MIX_READ     3564            14.5982         10.22                10.16               
MIX_SUM      7130.18         29.2053         16.76                16.73               

----------------------------------------------------------------------------------- 
w20-QA_120workers_100K_30M_files_mix, cost_time:5H:49M:25S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        7035.11         720.395         16.9133              15.81               
READ         8539.16         874.411         14.0433              13.1233             
MIX_WRITE    3174.51         325.07          24.3433              23.2233             
MIX_READ     3175.41         325.162         13.32                12.3567             
MIX_SUM      6349.92         650.232         18.8317              17.79               

----------------------------------------------------------------------------------- 
w21-QA_120workers_200K_30M_files_mix, cost_time:6H:20M:43S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        5936.71         1215.84         20.0867              18.08               
READ         5625.23         1152.05         21.3233              19.6533             
MIX_WRITE    2737.41         560.621         25.1433              23.0967             
MIX_READ     2732.54         559.625         18.5967              16.7933             
MIX_SUM      5469.95         1120.25         21.87                19.945              

----------------------------------------------------------------------------------- 
w22-QA_120workers_1024K_1M_Size_file_mix, cost_time:1H:26M:48S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        3042.73         3190.53         39.3433              31.2733             
READ         3240.65         3398.06         37.02                29.3                
MIX_WRITE    1461.43         1532.42         39.86                32.18               
MIX_READ     1459.29         1530.18         42.2033              34.4067             
MIX_SUM      2920.72         3062.6          41.0317              33.2933             

----------------------------------------------------------------------------------- 
w23-QA_120workers_10240K_10M_Size_file_mix, cost_time:0H:58M:43S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        485.49          5090.78         247.103              191.573             
READ         721.01          7560.35         166.423              106.4               
MIX_WRITE    258.56          2711.11         274.45               220.973             
MIX_READ     259.18          2717.8          189.177              129.63              
MIX_SUM      517.74          5428.91         231.813              175.302             

----------------------------------------------------------------------------------- 
w24-QA_120workers_1048576K_1G_Size_file_mix, cost_time:0H:52M:30S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6.16            6618.53         19470.7              1419.07             
READ         9.43            10130.3         12720.5              486.747             
MIX_WRITE    3.65            3928.62         20438.5              1707.93             
MIX_READ     3.8             4079.41         11920.9              535.357             
MIX_SUM      7.45            8008.03         16179.7              1121.64             

[WARN]  Task : (w25-1200million_4k_data_filling) status is not finished, but : (terminated), please pay more attention 


[WARN]  Task : (w26-1200million_4k_data_filling) status is not finished, but : (terminated), please pay more attention 


[WARN]  Task : (w27-120million_4k_data_filling) status is not finished, but : (terminated), please pay more attention 


[WARN]  Task : (w28-120million_4k_data_filling) status is not finished, but : (cancelled), please pay more attention 


Task: (w29-120million_4k_data_filling), write total objects: (120000000), cost time: (14195(s)), write speed: (8453.68) 


[WARN]  Task : (w30-QA_120workers_4K_30M_files_mix) status is not finished, but : (cancelled), please pay more attention 


----------------------------------------------------------------------------------- 
w31-QA_120workers_4K_30M_files_mix, cost_time:6H:3M:26S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        5388.65         22.0719         22.1933              22.1933             
READ         11093.4         45.4386         10.81                10.76               
MIX_WRITE    3714.16         15.2132         22.7667              22.7667             
MIX_READ     3711.56         15.2025         9.40333              9.35                
MIX_SUM      7425.72         30.4157         16.085               16.0583             

----------------------------------------------------------------------------------- 
w32-QA_120workers_100K_30M_files_mix, cost_time:5H:27M:24S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        7803.41         799.069         15.2333              14.1267             
READ         8556.41         876.177         14.0167              13.1067             
MIX_WRITE    3406.95         348.871         22.28                21.1367             
MIX_READ     3406.42         348.817         12.8033              11.8367             
MIX_SUM      6813.37         697.688         17.5417              16.4867             

----------------------------------------------------------------------------------- 
w33-QA_120workers_200K_30M_files_mix, cost_time:5H:54M:16S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6372.15         1305.02         18.6967              16.5867             
READ         5594.51         1145.76         21.4433              19.7367             
MIX_WRITE    2853.54         584.404         23.5533              21.4633             
MIX_READ     2849.95         583.669         18.3933              16.5333             
MIX_SUM      5703.49         1168.07         20.9733              18.9983             

----------------------------------------------------------------------------------- 
w34-QA_120workers_1024K_1M_Size_file_mix, cost_time:1H:20M:49S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        3349.24         3511.92         35.7333              27.55               
READ         3228.21         3385.03         37.1633              29.3633             
MIX_WRITE    1532.84         1607.3          34.9367              27.1433             
MIX_READ     1537.16         1611.83         43.1167              35.1867             
MIX_SUM      3070            3219.13         39.0267              31.165              

----------------------------------------------------------------------------------- 
w35-QA_120workers_10240K_10M_Size_file_mix, cost_time:0H:55M:8S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        537.52          5636.43         223.167              164.657             
READ         738.94          7748.37         162.39               102.293             
MIX_WRITE    251.73          2639.46         276.8                221.483             
MIX_READ     252.38          2646.39         199.35               138.473             
MIX_SUM      504.11          5285.85         238.075              179.978             

----------------------------------------------------------------------------------- 
w36-QA_120workers_1048576K_1G_Size_file_mix, cost_time:0H:50M:14S                    
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6.91            7414.56         17379.5              1282.79             
READ         9.36            10045           12829.2              436.01              
MIX_WRITE    3.79            4072.14         19156.8              1636.76             
MIX_READ     3.92            4208.96         12083.9              543.213             
MIX_SUM      7.71            8281.1          15620.4              1089.99             

Task: (w37-120million_4k_data_filling), write total objects: (120000000), cost time: (13965(s)), write speed: (8592.91) 


----------------------------------------------------------------------------------- 
w40-QA_DRY_RUN_30workers_4K_30M_files_mix, cost_time:0H:2M:9S                      
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4098.54         16.7876         6.97333              6.97333             
READ         10856.8         44.4696         2.75667              2.69667             
MIX_WRITE    2143.91         8.78142         7.10667              7.10667             
MIX_READ     5025.76         20.5855         2.87333              2.82                
MIX_SUM      7169.67         29.3669         4.99                 4.96333             

----------------------------------------------------------------------------------- 
w41-QA_DRY_RUN_30workers_100K_30M_files_mix, cost_time:0H:2M:12S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4688.9          480.144         6.24667              5.12333             
READ         8137.48         833.279         3.68                 2.85333             
MIX_WRITE    1670.89         171.099         8.70667              7.66                
MIX_READ     3881.14         397.428         3.91667              3.04667             
MIX_SUM      5552.03         568.527         6.31167              5.35333             

----------------------------------------------------------------------------------- 
w43-QA_DRY_RUN_30workers_4K_30M_files_mix, cost_time:0H:2M:12S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6433.48         26.3515         4.53                 4.53                
READ         11056.4         45.2869         2.70667              2.65333             
MIX_WRITE    2145.06         8.78618         7.1                  7.1                 
MIX_READ     5018.76         20.5568         2.88                 2.82667             
MIX_SUM      7163.82         29.343          4.99                 4.96333             

----------------------------------------------------------------------------------- 
w48-QA_DRY_RUN_30workers_4K_30M_files_mix, cost_time:0H:2M:16S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6500.63         26.6266         4.47333              4.47333             
READ         11065           45.3222         2.70333              2.65333             
MIX_WRITE    2131.74         8.73162         7.17333              7.17333             
MIX_READ     4972.22         20.3662         2.89                 2.83333             
MIX_SUM      7103.96         29.0978         5.03167              5.00333             

----------------------------------------------------------------------------------- 
w49-QA_DRY_RUN_30workers_4K_30M_files_mix, cost_time:0H:2M:14S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6492.76         26.5944         4.48                 4.48                
READ         11006.1         45.0812         2.71333              2.66                
MIX_WRITE    2126.64         8.71073         7.17333              7.17333             
MIX_READ     4988.68         20.4336         2.89                 2.83333             
MIX_SUM      7115.32         29.1443         5.03167              5.00333             

----------------------------------------------------------------------------------- 
w50-QA_DRY_RUN_30workers_100K_30M_files_mix, cost_time:0H:2M:17S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4912.96         503.087         5.97                 4.88333             
READ         8085.7          827.976         3.70333              2.89                
MIX_WRITE    1668.04         170.808         8.7                  7.65333             
MIX_READ     3904.94         399.866         3.90333              3.03                
MIX_SUM      5572.98         570.674         6.30167              5.34167             

----------------------------------------------------------------------------------- 
w51-QA_DRY_RUN_30workers_200K_30M_files_mix, cost_time:0H:2M:19S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        3957.27         810.449         7.45333              5.58667             
READ         6894.38         1411.97         4.34333              2.94667             
MIX_WRITE    1386.41         283.936         10.4267              8.61                
MIX_READ     3239.48         663.446         4.74                 3.18                
MIX_SUM      4625.89         947.382         7.58333              5.895               

----------------------------------------------------------------------------------- 
w52-QA_DRY_RUN_30workers_1024K_30M_files_mix, cost_time:0H:2M:18S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        1434.56         1504.25         20.8067              12.1233             
READ         2703.91         2835.25         11.0867              4.41                
MIX_WRITE    601.08          630.281         22.06                14.8167             
MIX_READ     1412.91         1481.54         11.8                 4.75667             
MIX_SUM      2013.99         2111.82         16.93                9.78667             

----------------------------------------------------------------------------------- 
w53-QA_DRY_RUN_30workers_10240K_30M_files_mix, cost_time:0H:2M:33S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        198.32          2079.51         151.25               87.06               
READ         335.44          3517.29         89.4633              27.0367             
MIX_WRITE    89.43           937.714         145.71               96.7367             
MIX_READ     218.16          2287.54         77.7433              25.52               
MIX_SUM      307.59          3225.25         111.727              61.1283             

----------------------------------------------------------------------------------- 
w54-QA_DRY_RUN_30workers_4K_30M_files_mix, cost_time:0H:2M:17S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        6181.75         25.3205         4.71                 4.71                
READ         11059.2         45.2983         2.70667              2.65667             
MIX_WRITE    2117.66         8.67393         7.29333              7.29333             
MIX_READ     4926.28         20.178          2.88                 2.83333             
MIX_SUM      7043.94         28.8519         5.08667              5.06333             

----------------------------------------------------------------------------------- 
w55-QA_DRY_RUN_30workers_100K_30M_files_mix, cost_time:0H:2M:19S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4950.13         506.893         5.92333              4.83                
READ         8129.49         832.46          3.68333              2.85333             
MIX_WRITE    1650.2          168.981         8.92                 7.87                
MIX_READ     3839.86         393.201         3.92                 3.04                
MIX_SUM      5490.06         562.182         6.42                 5.455               

----------------------------------------------------------------------------------- 
w56-QA_DRY_RUN_30workers_200K_30M_files_mix, cost_time:0H:2M:20S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        4048.56         829.145         7.28                 5.38667             
READ         6835.65         1399.94         4.38333              2.95                
MIX_WRITE    1395.3          285.759         10.3233              8.49333             
MIX_READ     3263.39         668.343         4.72333              3.15333             
MIX_SUM      4658.69         954.102         7.52333              5.82333             

----------------------------------------------------------------------------------- 
w57-QA_DRY_RUN_30workers_1024K_30M_files_mix, cost_time:0H:2M:21S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        1470.29         1541.7          20.3033              11.7467             
READ         2693.39         2824.22         11.1367              4.42333             
MIX_WRITE    602.11          631.362         22.18                14.8933             
MIX_READ     1401.31         1469.38         11.8333              4.77667             
MIX_SUM      2003.42         2100.74         17.0067              9.835               

----------------------------------------------------------------------------------- 
w58-QA_DRY_RUN_30workers_10240K_30M_files_mix, cost_time:0H:2M:35S                     
             IOPS            BW(MB/s)        avg_res_time(ms)     avg_proc_time(ms)   
WRITE        200.65          2103.96         149.527              85.38               
READ         339.92          3564.32         88.26                27.0233             
MIX_WRITE    92.2            966.762         146.957              96.5833             
MIX_READ     208.41          2185.4          78.9067              25.44               
MIX_SUM      300.61          3152.16         112.932              61.0117             
root@node243:~/cosbench# 

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="Cosbench" /><summary type="html">概述</summary></entry></feed>