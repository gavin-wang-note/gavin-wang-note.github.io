<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://172.17.73.80:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://172.17.73.80:4000/" rel="alternate" type="text/html" /><updated>2023-02-13T18:16:55+08:00</updated><id>http://172.17.73.80:4000/feed.xml</id><title type="html">Gavin Blog</title><subtitle>关于软件测试, 与你一起发现更大的世界</subtitle><entry><title type="html">S3 object encryption by awscli</title><link href="http://172.17.73.80:4000/2023/02/08/S3_object_encryption/" rel="alternate" type="text/html" title="S3 object encryption by awscli" /><published>2023-02-08T00:00:00+08:00</published><updated>2023-02-08T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/02/08/S3_object_encryption</id><content type="html" xml:base="http://172.17.73.80:4000/2023/02/08/S3_object_encryption/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;本文介绍如何使用awscli 上传、下载S3 object 的加密object.&lt;/p&gt;

&lt;p&gt;写此文章的目的在于转换用户过程中，碰到了object加密上传下载，碍于本人对于awscli指令不熟悉，简易记录下来mark下。&lt;/p&gt;

&lt;h1 id=&quot;实战&quot;&gt;实战&lt;/h1&gt;

&lt;p&gt;前提条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建了Bucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文以bucket01示例。&lt;/p&gt;

&lt;h2 id=&quot;对-bucket设置default-encryption&quot;&gt;对 bucket设置Default encryption&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;aws s3api put-bucket-encryption --bucket=bucket01 --server-side-encryption-configuration '{&quot;Rules&quot;: [{&quot;ApplyServerSideEncryptionByDefault&quot;: {&quot;SSEAlgorithm&quot;: &quot;AES256&quot;}}]}' --endpoint-url=http://localhost/ --debug
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;获取bucket的encryption信息&quot;&gt;获取bucket的encryption信息&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;aws s3api get-bucket-encryption --bucket=bucket05 --endpoint-url=https://localhost/
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;上传object&quot;&gt;上传object&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;aws s3api put-object --bucket bucket03 --key 2.txt --body /root/2.txt --server-side-encryption aws:kms --no-verify-ssl --endpoint-url=https://localhost/
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;下载object&quot;&gt;下载Object&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;aws s3api  get-object --endpoint-url=https://localhost --bucket=bucket01 --key 2.txt output2.txt --server-side-encryption AES256 --no-verify-ssl
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果endpoint-url中不想带上https,需要修改如下参数，并重启rgw&lt;/p&gt;

&lt;p&gt;ceph.config&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[radosgw]
rgw verify ssl = false
rgw crypt require ssl = false
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://ecloud.10086.cn/op-help-center/doc/article/57923&lt;/li&gt;
  &lt;li&gt;https://blog.csdn.net/QTM_Gitee/article/details/118052481&lt;/li&gt;
  &lt;li&gt;https://advancedweb.hu/encryption-options-for-s3-objects/&lt;/li&gt;
  &lt;li&gt;https://repost.aws/questions/QUVIw4-39zSPe_pxZ7m4Ejiw/using-aws-s-3-api-put-object-sse-customer-key-md-5-fails-with-cli&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gavin</name></author><category term="ceph" /><summary type="html">概述</summary></entry><entry><title type="html">Python下使得function timeout</title><link href="http://172.17.73.80:4000/2023/02/06/function_timeout/" rel="alternate" type="text/html" title="Python下使得function timeout" /><published>2023-02-06T00:00:00+08:00</published><updated>2023-02-06T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/02/06/function_timeout</id><content type="html" xml:base="http://172.17.73.80:4000/2023/02/06/function_timeout/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;今天在编写S3 multipart upload相关test case时，碰到一个Quota相关场景，即上传S3 Object超过了Bucket Quota 的设定，导致thread hang住，无法退出。
一般情况下，无Quota下，程序正常上传Object并退出，但碰到这种有Quota场景的，一旦超额，用例对应multipart upload function 卡住。
为此，本文介绍如果给function增加timeout，正常退出，且不影响后续程序的运行。&lt;/p&gt;

&lt;h1 id=&quot;实践&quot;&gt;实践&lt;/h1&gt;

&lt;p&gt;直接上解决方法.&lt;/p&gt;

&lt;p&gt;如下，为多线程中的使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;func_timeout&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_set_timeout&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;func_timeout&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_set_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionTimedOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'task func_timeout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Program output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;hello world
task func_timeout
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以不用中断主程序，可以继续执行后面的任务，也可以在超时后加上重试等功能，这就看自己需要了。&lt;/p&gt;

&lt;p&gt;对应的测试用例基类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    if option in ['upload']:
        try:
            self.upload_file_multipart(file_path, object_name, bucket, thread_cnt)
        except func_timeout.exceptions.FunctionTimedOut:
            logging.debug(&quot;--  Upload failed by FunctionTimedOut&quot;)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;被call function 头部增加装饰器func_set_timeout&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
    @func_set_timeout(5)
    def upload_file_multipart(self, file_path, object_name, bucket, thread_cnt):
        filesize = os.stat(file_path).st_size
        mp = bucket.initiate_multipart_upload(object_name)
        q = self.init_queue(filesize)
        for i in range(0, thread_cnt):
            t = threading.Thread(target=self.upload_chunk, args=(file_path, mp, q, i))
            t.setDaemon(True)
            t.start()
        q.join()
        mp.complete_upload()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如上，完美解决掉thread hang死问题。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/39743129&lt;/p&gt;</content><author><name>Gavin</name></author><category term="python" /><summary type="html">概述</summary></entry><entry><title type="html">彻底删除Linux下md设备</title><link href="http://172.17.73.80:4000/2023/02/03/Delete_md_device/" rel="alternate" type="text/html" title="彻底删除Linux下md设备" /><published>2023-02-03T00:00:00+08:00</published><updated>2023-02-03T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/02/03/Delete_md_device</id><content type="html" xml:base="http://172.17.73.80:4000/2023/02/03/Delete_md_device/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;Lab 2U4N设备上SSD盘有soft-raid存在，本文介绍如何清理掉这些md 设备。&lt;/p&gt;

&lt;h1 id=&quot;实践&quot;&gt;实践&lt;/h1&gt;

&lt;h2 id=&quot;获取相关信息&quot;&gt;获取相关信息&lt;/h2&gt;

&lt;p&gt;当前OS中md设备信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:~# lsblk
NAME        MAJ:MIN RM    SIZE RO TYPE  MOUNTPOINT
sda           8:0    0    3.5T  0 disk  
sdb           8:16   0    3.5T  0 disk  
sdc           8:32   0    3.5T  0 disk  
sdd           8:48   0    3.5T  0 disk  
sde           8:64   0    3.5T  0 disk  
sdf           8:80   0    3.5T  0 disk  
└─md126       9:126  0    3.5T  0 raid0 
  ├─md126p1 259:6    0      8G  0 part  
  ├─md126p2 259:7    0    3.5T  0 part  
  └─md126p3 259:8    0 1007.5K  0 part  
nvme0n1     259:0    0  238.5G  0 disk  
├─nvme0n1p1 259:2    0   1007K  0 part  
├─nvme0n1p2 259:3    0    512M  0 part  /boot/efi
├─nvme0n1p3 259:4    0      8G  0 part  [SWAP]
└─nvme0n1p4 259:5    0    230G  0 part  /
nvme1n1     259:1    0  238.5G  0 disk  
pmem0       259:9    0     16G  0 disk  
pmem1       259:10   0     16G  0 disk  
root@node123:~# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:~# mdadm -Ds 
ARRAY /dev/md/ddf0 metadata=ddf UUID=783f1a5c:5a361165:b27fff3b:c518b21a
ARRAY /dev/md126 container=/dev/md/ddf0 member=2 UUID=926ae63a:c3cd5a73:93063a44:eda9c39f
root@node123:~# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:~# mdadm -D /dev/md126
/dev/md126:
         Container : /dev/md/ddf0, member 2
        Raid Level : raid0
        Array Size : 3750199296 (3576.47 GiB 3840.20 GB)
      Raid Devices : 1
     Total Devices : 1

             State : clean 
    Active Devices : 1
   Working Devices : 1
    Failed Devices : 0
     Spare Devices : 0

        Chunk Size : 64K

Consistency Policy : none

    Container GUID : 4C534920:20202020:1000005D:10009361:50C1A436:0B5F09A0
                  (LSI      12/07/22 16:09:26)
               Seq : 00000259
     Virtual Disks : 5

    Number   Major   Minor   RaidDevice State
       0       8       80        0      active sync   /dev/sdf
root@node123:~#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:/etc/mdadm# cat /proc/mdstat 
Personalities : [raid0] [linear] [multipath] [raid1] [raid6] [raid5] [raid4] [raid10] 
md127 : inactive sdf[0](S)
      538968 blocks super external:ddf
       
unused devices: &amp;lt;none&amp;gt;
root@node123:/etc/mdadm# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:/etc/mdadm# mdadm -D /dev/md127
/dev/md127:
           Version : ddf
        Raid Level : container
     Total Devices : 1

   Working Devices : 1

    Container GUID : 4C534920:20202020:1000005D:10009361:50C1A436:0B5F09A0
                  (LSI      12/07/22 16:09:26)
               Seq : 00000259
     Virtual Disks : 5

     Member Arrays :

    Number   Major   Minor   RaidDevice

       -       8       80        -        /dev/sdf
root@node123:/etc/mdadm#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:~# cat /etc/mdadm/mdadm.conf
# mdadm.conf
#
# !NB! Run update-initramfs -u after updating this file.
# !NB! This will ensure that initramfs has an uptodate copy.
#
# Please refer to mdadm.conf(5) for information about this file.
#

# by default (built-in), scan all partitions (/proc/partitions) and all
# containers for MD superblocks. alternatively, specify devices to scan, using
# wildcards if desired.
#DEVICE partitions containers

# automatically tag new arrays as belonging to the local system
HOMEHOST &amp;lt;system&amp;gt;

# instruct the monitoring daemon where to send mail alerts
MAILADDR root

# definitions of existing MD arrays
ARRAY metadata=ddf UUID=f6da2fa6:f847cfe8:6efae15e:1ec1cb18
ARRAY container=f6da2fa6:f847cfe8:6efae15e:1ec1cb18 member=0 UUID=9ff807d6:cd51ad98:0fde88a0:bed80d0e
ARRAY container=f6da2fa6:f847cfe8:6efae15e:1ec1cb18 member=1 UUID=be17285a:62edb788:24f8e528:00912e8c
ARRAY container=f6da2fa6:f847cfe8:6efae15e:1ec1cb18 member=2 UUID=b08d0c30:d7aa7ba5:0a22787e:103831d9
ARRAY container=f6da2fa6:f847cfe8:6efae15e:1ec1cb18 member=3 UUID=5159a750:d1c2251f:56b0ef10:4b9a1309
ARRAY container=f6da2fa6:f847cfe8:6efae15e:1ec1cb18 member=4 UUID=70f4a9f0:fdb95f4d:753d57a5:8c2314c0
ARRAY metadata=ddf UUID=471d86af:9306e6d2:bc56f74d:c3b578f9
ARRAY container=471d86af:9306e6d2:bc56f74d:c3b578f9 member=0 UUID=6d0bf5f0:b39ef888:80529401:91f64dcb
ARRAY container=471d86af:9306e6d2:bc56f74d:c3b578f9 member=1 UUID=7cc9f621:c04ac67c:f4b0976a:78fe15f2
ARRAY container=471d86af:9306e6d2:bc56f74d:c3b578f9 member=2 UUID=95994645:864ddcc9:67c2f8ce:9fe93d97
ARRAY container=471d86af:9306e6d2:bc56f74d:c3b578f9 member=3 UUID=91b65356:8b4ec6e8:f64d7f23:63f8bd83
ARRAY container=471d86af:9306e6d2:bc56f74d:c3b578f9 member=4 UUID=c8f2b38c:f32ce54b:9d2ef6ff:4e537329
ARRAY metadata=ddf UUID=783f1a5c:5a361165:b27fff3b:c518b21a
ARRAY container=783f1a5c:5a361165:b27fff3b:c518b21a member=0 UUID=af20c622:b4cab24e:6e79902d:a83f750c
ARRAY container=783f1a5c:5a361165:b27fff3b:c518b21a member=1 UUID=2f4788c1:1dbe4d60:274c34fc:fdad0f1e
ARRAY container=783f1a5c:5a361165:b27fff3b:c518b21a member=2 UUID=926ae63a:c3cd5a73:93063a44:eda9c39f
ARRAY container=783f1a5c:5a361165:b27fff3b:c518b21a member=3 UUID=5bebdf83:dfd7c23d:99bdb41a:3991d212
ARRAY container=783f1a5c:5a361165:b27fff3b:c518b21a member=4 UUID=efc49f2c:f23319c6:b2b4666f:26f9dba6
ARRAY container=783f1a5c:5a361165:b27fff3b:c518b21a member=5 UUID=e05f0b90:235cb256:9d031efe:ac7f6f4f

# This configuration was auto-generated on Thu, 02 Feb 2023 12:52:09 +0800 by mkconf
root@node123:~#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;删除md-device&quot;&gt;删除md device&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:~# mdadm --stop -s /dev/md126
mdadm: stopped /dev/md126
root@node123:~# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:~# mdadm --misc --zero-superblock /dev/sdf
mdadm: Couldn't open /dev/sdf for write - not zeroing
root@node123:~# mdadm --zero-superblock /dev/sdf
mdadm: Couldn't open /dev/sdf for write - not zeroing
root@node123:~# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;说明
通过上面的方法，是无法删除md设备的，即使清空了/etc/mdadm/mdadm.conf也没用，重启机器后md设备又在了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正确的删除方法是：&lt;/p&gt;

&lt;h2 id=&quot;从procmdstat中获取当前os下的所有md信息&quot;&gt;从/proc/mdstat中获取当前OS下的所有md信息&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node122:/var/log/history# cat /proc/mdstat 
Personalities : [raid0] [linear] [multipath] [raid1] [raid6] [raid5] [raid4] [raid10] 
md120 : inactive sda[0]
      3750199296 blocks super external:/md124/3
       
md124 : inactive sda[1](S) sdb[0](S)
      1077936 blocks super external:ddf
       
md127 : inactive sdd[1](S) sdc[0](S)
      1077936 blocks super external:ddf
       
unused devices: &amp;lt;none&amp;gt;
root@node122:/var/log/history# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据/proc/mdstat中的md信息，逐一stop并清理掉metadata信息，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@node123:/etc/mdadm# mdadm -S /dev/md127
mdadm: stopped /dev/md127
root@node123:/etc/mdadm# mdadm --zero-superblock /dev/sdf
root@node123:/etc/mdadm# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，即使机器reboot后，也不会再次出现md设备了，干净清理掉。&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><category term="mdadm" /><summary type="html">概述</summary></entry><entry><title type="html">一键安装 docker 的 shell 脚本</title><link href="http://172.17.73.80:4000/2023/01/19/Install-docker-with-shell/" rel="alternate" type="text/html" title="一键安装 docker 的 shell 脚本" /><published>2023-01-19T00:00:00+08:00</published><updated>2023-01-19T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/01/19/Install-docker-with-shell</id><content type="html" xml:base="http://172.17.73.80:4000/2023/01/19/Install-docker-with-shell/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;一键安装Docker的shell脚本.
脚本比较粗糙，将就用&lt;/p&gt;

&lt;h1 id=&quot;script-content&quot;&gt;Script Content&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine


echo -e &quot; =========== 1.delete exist docker ================\n\n&quot;

echo -e &quot;step 1: 安装必要的一些系统工具&quot;
sudo yum install -y yum-utils device-mapper-persistent-data lvm2

echo -e &quot;\n\nStep 2: 添加软件源信息，国内 Repository 更加稳定&quot;
sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

version=sudo cat /etc/redhat-release|sed -r 's/.* ([0-9]+)\..*/\1/'

if $version=7; then
        echo  -e &quot;\n\nStep 3: 更新 Centos version is : $version; run yum makecache fast&quot;
        sudo yum makecache fast
elif $version=8; then
        echo -e &quot;\n\nStep 3: 更新Centos version is : $version; run yum makecache fast&quot;
        sudo dnf makecache
fi

echo -e &quot;=========== 2.完成配置 docker Repository ================\n\n&quot;

# 安装最新版本的 Docker Engine 和 Container
sudo yum install docker-ce docker-ce-cli containerd.io
sudo yum -y install docker-ce


echo -e &quot;=========== 3.成功安装完 docker ================\n\n&quot;

sudo systemctl enable docker
sudo systemctl start docker

echo -e &quot;=========== 4.自启动 docker ================\n\n&quot;


# 1.创建一个目录
sudo mkdir -p /etc/docker


# 2.编写配置文件
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;,
    &quot;https://docker.mirrors.ustc.edu.cn&quot;,
    &quot;https://reg-mirror.qiniu.com&quot;,
    &quot;http://f1361db2.m.daocloud.io&quot;
  ]
}
EOF


sudo systemctl daemon-reload
sudo systemctl restart docker

echo -e &quot;=========== 5.配置国内镜像加速 ================\n\n&quot;

docker ps -a
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="Linux" /><category term="shell" /><summary type="html">概述</summary></entry><entry><title type="html">Linux stat家族之mpstat</title><link href="http://172.17.73.80:4000/2023/01/19/Linux_stat_family_of_mpstat/" rel="alternate" type="text/html" title="Linux stat家族之mpstat" /><published>2023-01-19T00:00:00+08:00</published><updated>2023-01-19T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/01/19/Linux_stat_family_of_mpstat</id><content type="html" xml:base="http://172.17.73.80:4000/2023/01/19/Linux_stat_family_of_mpstat/">&lt;h1 id=&quot;介绍&quot;&gt;介绍&lt;/h1&gt;

&lt;p&gt;此指令输出 CPU 负载相关信息。&lt;/p&gt;

&lt;h2 id=&quot;mpstat-主要能看什么性能指标&quot;&gt;mpstat 主要能看什么性能指标&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;每个 CPU 的不同类型 CPU 使用率、不同软中断类型次数统计、总中断次数&lt;/li&gt;
  &lt;li&gt;上述所有 CPU 的平均数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;语法格式&quot;&gt;语法格式&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mpstat [ -A ] [ -n ] [ -u ] [ -V ] [ -I { keyword [,...] | ALL } ] [ -N { node_list | ALL } ] [ -o JSON] [ -P { cpu_list | ON | ALL } ] [ interval [ count ] ]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;interval ：间隔多久统计一次数据，可选&lt;/li&gt;
  &lt;li&gt;count：统计一次，可选&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;若只传了 interval ，则统计次数是无限次，结束统计后会打印本次所有数据的平均值.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;例子&quot;&gt;例子&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;每隔 1s 统计打印一次数据，统计无限次&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat 2 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;每隔 2s 统计打印一次数据，共统计 5 次&lt;/p&gt;

&lt;h1 id=&quot;统计信息的字段说明&quot;&gt;统计信息的字段说明&lt;/h1&gt;

&lt;p&gt;最基础的命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat 1 2
Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)


05:39:30 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
05:39:31 PM  all    0.38    0.00    0.25    0.00    0.00    0.00    0.00    0.00    0.00   99.37
05:39:32 PM  all    1.01    0.00    2.90    0.00    0.00    0.00    0.00    0.00    0.00   96.09
Average:     all    0.69    0.00    1.57    0.00    0.00    0.00    0.00    0.00    0.00   97.74
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;字段说明&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字  段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CPU&lt;/td&gt;
      &lt;td&gt;CPU编号，all代表全部CPU的平均值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%usr&lt;/td&gt;
      &lt;td&gt;用户态CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%nice&lt;/td&gt;
      &lt;td&gt;高优先级的用户态CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%sys&lt;/td&gt;
      &lt;td&gt;内核态CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%iowast&lt;/td&gt;
      &lt;td&gt;iowait CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%irq&lt;/td&gt;
      &lt;td&gt;硬中断CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%soft&lt;/td&gt;
      &lt;td&gt;软中断CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%steal&lt;/td&gt;
      &lt;td&gt;被虚拟处理器’偷’走的CPU百分比&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%guest&lt;/td&gt;
      &lt;td&gt;运行虚拟处理器CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%gnice&lt;/td&gt;
      &lt;td&gt;运行高优先级的虚拟处理器CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%idle&lt;/td&gt;
      &lt;td&gt;空闲CPU百分比&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;命令行参数&quot;&gt;命令行参数&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字  段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-V&lt;/td&gt;
      &lt;td&gt;版本信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-u&lt;/td&gt;
      &lt;td&gt;打印CPU统计信息，默认就有&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;需要输出统计信息的CPU&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-o JSON&lt;/td&gt;
      &lt;td&gt;json格式输出结果&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-l&lt;/td&gt;
      &lt;td&gt;报告中断情况&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;-p--cpu_list--on--all-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-P { cpu_list | ON | ALL }&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&quot;作用&quot;&gt;作用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;指定要报告其统计信息的 CPU&lt;/li&gt;
  &lt;li&gt;cpu_list：是用 , 分隔的值或值范围的列表（例如 0,2,4-7,0-1 ）&lt;/li&gt;
  &lt;li&gt;ON：将为每个联机 CPU 报告统计信息&lt;/li&gt;
  &lt;li&gt;ALL：将为所有 CPU 报告统计信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cpu_list-的例子&quot;&gt;cpu_list 的例子&lt;/h3&gt;

&lt;p&gt;只指定 CPU1&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat -P 1 1 2&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat -P 1 1 2
Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)

05:56:16 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
05:56:17 PM    1    0.00    0.00    5.94    0.00    0.00    0.00    0.00    0.00    0.00   94.06
05:56:18 PM    1    1.01    0.00    5.05    0.00    0.00    0.00    0.00    0.00    0.00   93.94
Average:       1    0.50    0.00    5.50    0.00    0.00    0.00    0.00    0.00    0.00   94.00
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;指定CPU0、CPU1&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat -P 0,1 1 2&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat -P 0,1 1 2
Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)

05:57:48 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
05:57:49 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:57:49 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:57:50 PM    0    1.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00
05:57:50 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
Average:       0    0.50    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.50
Average:       1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;on-的例子&quot;&gt;ON 的例子&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat -P ON 1 2&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat -P ON 1 2
.Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)

05:58:07 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
05:58:08 PM  all    1.01    0.00    0.38    0.00    0.00    0.00    0.00    0.00    0.00   98.62
05:58:08 PM    0    1.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00
05:58:08 PM    1    1.01    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   98.99
05:58:08 PM    2    1.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   98.00
05:58:08 PM    3    1.01    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   98.99
05:58:08 PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:58:08 PM    5    0.99    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.01
05:58:08 PM    6    4.04    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   95.96
05:58:08 PM    7    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00

05:58:08 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
05:58:09 PM  all    1.25    0.00    2.38    0.00    0.00    0.13    0.00    0.00    0.00   96.25
05:58:09 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:58:09 PM    1    4.04    0.00   10.10    0.00    0.00    0.00    0.00    0.00    0.00   85.86
05:58:09 PM    2    1.98    0.00    1.98    0.00    0.00    0.00    0.00    0.00    0.00   96.04
05:58:09 PM    3    2.02    0.00    6.06    0.00    0.00    0.00    0.00    0.00    0.00   91.92
05:58:09 PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:58:09 PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:58:09 PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:58:09 PM    7    0.99    0.00    0.99    0.00    0.00    0.00    0.00    0.00    0.00   98.02

Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
Average:     all    1.13    0.00    1.38    0.00    0.00    0.06    0.00    0.00    0.00   97.43
Average:       0    0.50    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.50
Average:       1    2.53    0.00    5.05    0.00    0.00    0.00    0.00    0.00    0.00   92.42
Average:       2    1.49    0.00    1.49    0.00    0.00    0.00    0.00    0.00    0.00   97.01
Average:       3    1.52    0.00    3.03    0.00    0.00    0.00    0.00    0.00    0.00   95.45
Average:       4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
Average:       5    0.50    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.50
Average:       6    2.01    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   97.99
Average:       7    0.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   98.99
[root@node81 ~]#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;all-的例子&quot;&gt;ALL 的例子&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat -P ALL 1 2&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat -P ALL 1 2
Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)

05:59:25 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
05:59:26 PM  all    0.38    0.00    1.50    0.00    0.00    0.00    0.00    0.00    0.00   98.12
05:59:26 PM    0    1.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00
05:59:26 PM    1    1.00    0.00    6.00    0.00    0.00    0.00    0.00    0.00    0.00   93.00
05:59:26 PM    2    0.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00
05:59:26 PM    3    1.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00
05:59:26 PM    4    0.00    0.00    4.04    0.00    0.00    0.00    0.00    0.00    0.00   95.96
05:59:26 PM    5    1.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00
05:59:26 PM    6    0.99    0.00    0.99    0.00    0.00    0.00    0.00    0.00    0.00   98.02
05:59:26 PM    7    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00

05:59:26 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
05:59:27 PM  all    0.63    0.00    0.25    0.00    0.00    0.00    0.00    0.00    0.00   99.12
05:59:27 PM    0    0.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00
05:59:27 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:59:27 PM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:59:27 PM    3    2.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   97.00
05:59:27 PM    4    0.99    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.01
05:59:27 PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:59:27 PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
05:59:27 PM    7    0.00    0.00    0.99    0.00    0.00    0.00    0.00    0.00    0.00   99.01

Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
Average:     all    0.50    0.00    0.88    0.00    0.00    0.00    0.00    0.00    0.00   98.62
Average:       0    0.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   99.00
Average:       1    0.50    0.00    3.02    0.00    0.00    0.00    0.00    0.00    0.00   96.48
Average:       2    0.00    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   99.50
Average:       3    1.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   98.00
Average:       4    0.50    0.00    2.00    0.00    0.00    0.00    0.00    0.00    0.00   97.50
Average:       5    0.50    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.50
Average:       6    0.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   99.00
Average:       7    0.00    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   99.50
[root@node81 ~]#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0 是第一个 CPU&lt;/li&gt;
  &lt;li&gt;all 是所有处理器之间的全局平均值&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-i--keyword---all-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-I { keyword [,...] | ALL }&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&quot;作用-1&quot;&gt;作用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;输出中断统计信息&lt;/li&gt;
  &lt;li&gt;keyword 可以输入：CPU、SCPU、SUM、ALL&lt;/li&gt;
  &lt;li&gt;CPU：显示每秒中断数量，从 /proc/interrupts 读取数据&lt;/li&gt;
  &lt;li&gt;SCPU：显示每秒软中断数量，从 /proc/softirqs 读取数据&lt;/li&gt;
  &lt;li&gt;SUM：显示每个处理器的中断总数&lt;/li&gt;
  &lt;li&gt;ALL：输出上面三个关键字的所有内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scpu-的例子&quot;&gt;SCPU 的例子&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat -I SCPU 1 2 -P ALL&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat -I SCPU 1 2 -P ALL
Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)

05:59:53 PM  CPU       HI/s    TIMER/s   NET_TX/s   NET_RX/s    BLOCK/s IRQ_POLL/s  TASKLET/s    SCHED/s  HRTIMER/s      RCU/s
05:59:54 PM    0       0.00       9.00       1.00       0.00       0.00       0.00       0.00      12.00       0.00       8.00
05:59:54 PM    1       0.00      11.00       0.00       3.00       0.00       0.00       0.00       8.00       0.00      10.00
05:59:54 PM    2       0.00      36.00       0.00       4.00       0.00       0.00       0.00      18.00       0.00      15.00
05:59:54 PM    3       0.00       9.00       0.00       1.00       0.00       0.00       0.00       9.00       0.00       7.00
05:59:54 PM    4       0.00       6.00       0.00       2.00       0.00       0.00       0.00       6.00       0.00       5.00
05:59:54 PM    5       0.00      98.00       0.00      14.00       0.00       0.00       0.00      23.00       0.00      51.00
05:59:54 PM    6       0.00      13.00       0.00       1.00       0.00       0.00       0.00       7.00       0.00       9.00
05:59:54 PM    7       0.00     114.00       0.00      16.00       0.00       0.00       0.00      31.00       0.00      58.00

05:59:54 PM  CPU       HI/s    TIMER/s   NET_TX/s   NET_RX/s    BLOCK/s IRQ_POLL/s  TASKLET/s    SCHED/s  HRTIMER/s      RCU/s
05:59:55 PM    0       0.00      27.00       0.00      18.00       1.00       0.00       0.00      18.00       0.00      24.00
05:59:55 PM    1       0.00      55.00       0.00       9.00       0.00       0.00       0.00      17.00       0.00      40.00
05:59:55 PM    2       0.00      70.00       0.00      17.00       0.00       0.00       0.00      31.00       0.00      44.00
05:59:55 PM    3       0.00      37.00       0.00      30.00       0.00       0.00       2.00      14.00       0.00      31.00
05:59:55 PM    4       0.00      26.00       0.00       8.00       0.00       0.00       0.00      15.00       0.00      19.00
05:59:55 PM    5       0.00     109.00       0.00      18.00       0.00       0.00       0.00      33.00       0.00      67.00
05:59:55 PM    6       0.00      55.00       0.00       7.00       0.00       0.00       0.00      16.00       0.00      34.00
05:59:55 PM    7       0.00      96.00       0.00      14.00       0.00       0.00       0.00      25.00       0.00      55.00

Average:     CPU       HI/s    TIMER/s   NET_TX/s   NET_RX/s    BLOCK/s IRQ_POLL/s  TASKLET/s    SCHED/s  HRTIMER/s      RCU/s
Average:       0       0.00      18.00       0.50       9.00       0.50       0.00       0.00      15.00       0.00      16.00
Average:       1       0.00      33.00       0.00       6.00       0.00       0.00       0.00      12.50       0.00      25.00
Average:       2       0.00      53.00       0.00      10.50       0.00       0.00       0.00      24.50       0.00      29.50
Average:       3       0.00      23.00       0.00      15.50       0.00       0.00       1.00      11.50       0.00      19.00
Average:       4       0.00      16.00       0.00       5.00       0.00       0.00       0.00      10.50       0.00      12.00
Average:       5       0.00     103.50       0.00      16.00       0.00       0.00       0.00      28.00       0.00      59.00
Average:       6       0.00      34.00       0.00       4.00       0.00       0.00       0.00      11.50       0.00      21.50
Average:       7       0.00     105.00       0.00      15.00       0.00       0.00       0.00      28.00       0.00      56.50
[root@node81 ~]#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sum-的例子&quot;&gt;SUM 的例子&lt;/h3&gt;

&lt;p&gt;显示所有 CPU 平均中断次数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat -I SUM 1 2&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat -I SUM 1 2
Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)

06:00:15 PM  CPU    intr/s
06:00:16 PM  all   1597.00
06:00:17 PM  all   3912.00
Average:     all   2754.50
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示每个 CPU 的中断次数、所有 CPU 平均中断次数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mpstat -I SCPU 1 2 -P ALL&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# mpstat -I SCPU 1 2 -P ALL
Linux 4.14.148-202207281639.git553ed7f (node81) 	01/19/2023 	_x86_64_	(8 CPU)

06:00:34 PM  CPU       HI/s    TIMER/s   NET_TX/s   NET_RX/s    BLOCK/s IRQ_POLL/s  TASKLET/s    SCHED/s  HRTIMER/s      RCU/s
06:00:35 PM    0       0.00      40.00       0.00       8.00       0.00       0.00       0.00      24.00       0.00      24.00
06:00:35 PM    1       0.00      65.00       0.00       7.00       0.00       0.00       0.00      24.00       0.00      43.00
06:00:35 PM    2       0.00      36.00       0.00       3.00       0.00       0.00       0.00      19.00       0.00      27.00
06:00:35 PM    3       0.00      23.00       0.00       0.00       0.00       0.00       0.00       9.00       0.00      17.00
06:00:35 PM    4       0.00      46.00       0.00      11.00       0.00       0.00       0.00      28.00       0.00      33.00
06:00:35 PM    5       0.00     183.00       0.00      26.00       0.00       0.00       0.00      49.00       0.00      98.00
06:00:35 PM    6       0.00      38.00       0.00       0.00       0.00       0.00       0.00      18.00       0.00      30.00
06:00:35 PM    7       0.00     150.00       0.00      16.00       0.00       0.00       0.00      42.00       0.00      81.00

06:00:35 PM  CPU       HI/s    TIMER/s   NET_TX/s   NET_RX/s    BLOCK/s IRQ_POLL/s  TASKLET/s    SCHED/s  HRTIMER/s      RCU/s
06:00:36 PM    0       0.00      19.00       0.00       0.00       1.00       0.00       0.00      18.00       0.00      13.00
06:00:36 PM    1       0.00      80.00       0.00      20.00       0.00       0.00       0.00      37.00       0.00      49.00
06:00:36 PM    2       0.00      75.00       0.00      16.00       0.00       0.00       0.00      29.00       0.00      43.00
06:00:36 PM    3       0.00      30.00       0.00       5.00       0.00       0.00       2.00      13.00       0.00      22.00
06:00:36 PM    4       0.00      46.00       0.00       5.00       0.00       0.00       0.00      28.00       0.00      28.00
06:00:36 PM    5       0.00      96.00       0.00      16.00       0.00       0.00       0.00      33.00       0.00      54.00
06:00:36 PM    6       0.00      25.00       0.00       1.00       0.00       0.00       0.00      16.00       0.00      16.00
06:00:36 PM    7       0.00     152.00       0.00      21.00       0.00       0.00       0.00      44.00       0.00      74.00

Average:     CPU       HI/s    TIMER/s   NET_TX/s   NET_RX/s    BLOCK/s IRQ_POLL/s  TASKLET/s    SCHED/s  HRTIMER/s      RCU/s
Average:       0       0.00      29.50       0.00       4.00       0.50       0.00       0.00      21.00       0.00      18.50
Average:       1       0.00      72.50       0.00      13.50       0.00       0.00       0.00      30.50       0.00      46.00
Average:       2       0.00      55.50       0.00       9.50       0.00       0.00       0.00      24.00       0.00      35.00
Average:       3       0.00      26.50       0.00       2.50       0.00       0.00       1.00      11.00       0.00      19.50
Average:       4       0.00      46.00       0.00       8.00       0.00       0.00       0.00      28.00       0.00      30.50
Average:       5       0.00     139.50       0.00      21.00       0.00       0.00       0.00      41.00       0.00      76.00
Average:       6       0.00      31.50       0.00       0.50       0.00       0.00       0.00      17.00       0.00      23.00
Average:       7       0.00     151.00       0.00      18.50       0.00       0.00       0.00      43.00       0.00      77.50
[root@node81 ~]#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">介绍</summary></entry><entry><title type="html">Linux stat家族之vmstat</title><link href="http://172.17.73.80:4000/2023/01/19/Linux_stat_family_of_vmstat/" rel="alternate" type="text/html" title="Linux stat家族之vmstat" /><published>2023-01-19T00:00:00+08:00</published><updated>2023-01-19T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/01/19/Linux_stat_family_of_vmstat</id><content type="html" xml:base="http://172.17.73.80:4000/2023/01/19/Linux_stat_family_of_vmstat/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Virtual Meomory Statistics，报告虚拟内存统计信息&lt;/li&gt;
  &lt;li&gt;统计进程信息、内存、交换区、IO、磁盘、CPU 等数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vmstat主要能看什么性能指标&quot;&gt;vmstat主要能看什么性能指标&lt;/h1&gt;

&lt;p&gt;均是 Linux 系统级别&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;运行状态、不可中断睡眠状态的进程数量&lt;/li&gt;
  &lt;li&gt;内存、交换区、I/O、CPU 信息&lt;/li&gt;
  &lt;li&gt;上下文切换次数、中断次数&lt;/li&gt;
  &lt;li&gt;磁盘 I/O 的详细信息和概要信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;语法格式&quot;&gt;语法格式&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat -h

Usage:
 vmstat [options] [delay [count]]

Options:
 -a, --active           active/inactive memory
 -f, --forks            number of forks since boot
 -m, --slabs            slabinfo
 -n, --one-header       do not redisplay header
 -s, --stats            event counter statistics
 -d, --disk             disk statistics
 -D, --disk-sum         summarize disk statistics
 -p, --partition &amp;lt;dev&amp;gt;  partition specific statistics
 -S, --unit &amp;lt;char&amp;gt;      define display unit
 -w, --wide             wide output
 -t, --timestamp        show timestamp

 -h, --help     display this help and exit
 -V, --version  output version information and exit

For more details see vmstat(8).
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;options：命令行参数，可选&lt;/li&gt;
  &lt;li&gt;delay：间隔多久统计一次数据，可选&lt;/li&gt;
  &lt;li&gt;count：统计一次，可选&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意:
  若只传了 delay，则统计次数是无限次，结束统计后会打印本次所有数据的平均值.&lt;/p&gt;

&lt;h2 id=&quot;示例&quot;&gt;示例&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vmstat 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;每隔 1s 统计打印一次数据，统计无限次&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vmstat 2 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;每隔 2s 统计打印一次数据，共统计 5 次&lt;/p&gt;

&lt;h1 id=&quot;命令行参数&quot;&gt;命令行参数&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;简  写&lt;/th&gt;
      &lt;th&gt;完整写法&lt;/th&gt;
      &lt;th&gt;是否需要指定一个值&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-a&lt;/td&gt;
      &lt;td&gt;–active&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;显示活动和非活动内存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-n&lt;/td&gt;
      &lt;td&gt;–one-header&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;仅显示一次标题，而不是定期显示&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-s&lt;/td&gt;
      &lt;td&gt;–stats&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;获取内存、CPU、swap、中断次数、上下文切换次数等信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;–disk&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;获取磁盘的读写详细信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-D&lt;/td&gt;
      &lt;td&gt;–disk-sum&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;获取磁盘的一些摘要信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-P&lt;/td&gt;
      &lt;td&gt;–partition device&lt;/td&gt;
      &lt;td&gt;T (Device)&lt;/td&gt;
      &lt;td&gt;有关分区的详细统计信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-S&lt;/td&gt;
      &lt;td&gt;–unit character&lt;/td&gt;
      &lt;td&gt;T (character)&lt;/td&gt;
      &lt;td&gt;输出数值的单位，charactr取值:k,K,m or M(Default is K),k:1000;K:1024;m:1000000;M:1048576&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-t&lt;/td&gt;
      &lt;td&gt;–timestamp&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;加一列，显示当前时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-V&lt;/td&gt;
      &lt;td&gt;–version&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;显示版本信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-h&lt;/td&gt;
      &lt;td&gt;–help&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;帮助信息&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;统计数据的字段说明&quot;&gt;统计数据的字段说明&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat 2 2
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 3549024 309900 938184    0    0    47    23  246  293  1  1 98  0  0
 2  0      0 3501380 309908 938184    0    0     0    30 3602 3698  1  6 93  0  0
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;共有 6 个模块&lt;/p&gt;

&lt;h2 id=&quot;procs进程状态&quot;&gt;procs：进程状态&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;r&lt;/td&gt;
      &lt;td&gt;处于 Runnable状态的进程数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;处于不可中断睡眠状态的进程数量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;memory内存信息&quot;&gt;memory：内存信息&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;swpd&lt;/td&gt;
      &lt;td&gt;已用虚拟内存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;free&lt;/td&gt;
      &lt;td&gt;空闲内存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;buff&lt;/td&gt;
      &lt;td&gt;用于缓冲区的内存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cache&lt;/td&gt;
      &lt;td&gt;用于缓存的内存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inact&lt;/td&gt;
      &lt;td&gt;不活动的内存量(-a)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;active&lt;/td&gt;
      &lt;td&gt;活动的内存量(-a)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;swap交换区&quot;&gt;swap：交换区&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;si&lt;/td&gt;
      &lt;td&gt;每秒从交换区写到内存的大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;so&lt;/td&gt;
      &lt;td&gt;每秒写入交换区的内存大小&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;ioio-读写信息&quot;&gt;io：io 读写信息&lt;/h2&gt;

&lt;p&gt;现在的Linux版本块的大小为1024bytes&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;bi&lt;/td&gt;
      &lt;td&gt;每秒读取的块数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bo&lt;/td&gt;
      &lt;td&gt;每秒写入的块数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;system系统信息&quot;&gt;system：系统信息&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;in&lt;/td&gt;
      &lt;td&gt;每秒中断数，包括时钟中断&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cs&lt;/td&gt;
      &lt;td&gt;每秒上下文切换次数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;cpucpu-详细信息&quot;&gt;CPU：CPU 详细信息&lt;/h2&gt;

&lt;p&gt;这些是总 CPU 时间的百分比&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;字段说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;us&lt;/td&gt;
      &lt;td&gt;用户态进程的CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sy&lt;/td&gt;
      &lt;td&gt;内核态进程的CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;空闲CPU百分比&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wa&lt;/td&gt;
      &lt;td&gt;等待IO的CPU使用率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;st&lt;/td&gt;
      &lt;td&gt;从虚拟机偷取的CPU百分比&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;数据来源&quot;&gt;数据来源&lt;/h1&gt;

&lt;p&gt;主要来自这三个文件:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;/proc/meminfo
/proc/stat
/proc/*/stat
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 3379916 312036 942032    0    0    43    21  246  294  1  1 98  0  0
[root@node81 ~]# vmstat 1 2
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 3376784 312060 942032    0    0    43    21  246  294  1  1 98  0  0
 0  0      0 3376712 312060 942040    0    0     0     0 1082 1554  0  0 100  0  0
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这些信息主要来自 /proc/stat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat -s
     12295904 K total memory
      7668944 K used memory
      7718024 K active memory
       457556 K inactive memory
      3372716 K free memory
       312164 K buffer memory
       942080 K swap cache
      6161404 K total swap
            0 K used swap
      6161404 K free swap
        50128 non-nice user cpu ticks
           22 nice user cpu ticks
        86934 system cpu ticks
      7102823 idle cpu ticks
        25004 IO-wait cpu ticks
            0 IRQ cpu ticks
         3045 softirq cpu ticks
            0 stolen cpu ticks
      3105928 pages paged in
      1531600 pages paged out
            0 pages swapped in
            0 pages swapped out
     17847205 interrupts
     21369346 CPU context switches
   1674110880 boot time
        92634 forks
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这些信息的分别来自于 /proc/meminfo 、 /proc/stat 和 /proc/vmstat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat -d
disk- ------------reads------------ ------------writes----------- -----IO------
       total merged sectors      ms  total merged sectors      ms    cur    sec
fd0        0      0       0       0      0      0       0       0      0      0
sda    25592    955 1207050   96572  16120  31009  665696  290943      0     60
sdb    65035   1359 3634310  342617  59749 236139 2398312 7186627      0    110
sr0       18      0    2056      41      0      0       0       0      0      0
sdc      267      0    3888     359      0      0       0       0      0      0
sdd      512      0   16360     901      0      0       0       0      0      0
sde      832      0 1314536   11707      0      0       0       0      0      6
sdf      469      0   14288     692      0      0       0       0      0      0
sdg      267      0    3888     356      0      0       0       0      0      0
sdh      267      0    3888     399      0      0       0       0      0      0
sdi      267      0    3888     402      0      0       0       0      0      0
sdj      267      0    3888     355      0      0       0       0      0      0
sdk      267      0    3888     317      0      0       0       0      0      0
dm-0     162      0    8328     238      0      0       0       0      0      0
dm-1     205      0   10400     481      0      0       0       0      0      0
dm-2     525      0 1308576   11293      0      0       0       0      0      5
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这些信息主要来自于 /proc/diskstats&lt;/p&gt;

&lt;h1 id=&quot;其他用法&quot;&gt;其他用法&lt;/h1&gt;

&lt;h2 id=&quot;打印活动内存和不活动内存量&quot;&gt;打印活动内存和不活动内存量&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat -a 1 2
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 3351248 457672 7736448    0    0    42    21  246  294  1  1 98  0  0
 0  0      0 3349100 457676 7738260    0    0     0    32 1482 1945  1  0 99  0  0
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里有 ‘inact’ &amp;amp; ‘active’关键字。&lt;/p&gt;

&lt;h2 id=&quot;以-mb-单位输出结果&quot;&gt;以 MB 单位输出结果&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat -S M 1 2
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0   3259    305    920    0    0    42    21  246  294  1  1 98  0  0
 1  0      0   3259    305    920    0    0     0     0 1445 1936  0  0 99  0  0
[root@node81 ~]# 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;以-mb-单位输出各事件计数器和内存的统计信息&quot;&gt;以 MB 单位输出各事件计数器和内存的统计信息&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node81 ~]# vmstat -s -S M
        12007 M total memory
         7527 M used memory
         7570 M active memory
          447 M inactive memory
         3254 M free memory
          305 M buffer memory
          920 M swap cache
         6016 M total swap
            0 M used swap
         6016 M free swap
        50984 non-nice user cpu ticks
           22 nice user cpu ticks
        88723 system cpu ticks
      7244100 idle cpu ticks
        25046 IO-wait cpu ticks
            0 IRQ cpu ticks
         3074 softirq cpu ticks
            0 stolen cpu ticks
      3106216 pages paged in
      1534792 pages paged out
            0 pages swapped in
            0 pages swapped out
     18194132 interrupts
     21812846 CPU context switches
   1674110880 boot time
        93251 forks
[root@node81 ~]#
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;注意事项&quot;&gt;注意事项&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;vmstat 不需要特殊权限&lt;/li&gt;
  &lt;li&gt;vmstat 报告旨在帮助确定系统瓶颈，所以它不会将自己视为正在运行的进程&lt;/li&gt;
  &lt;li&gt;当前所有的 Linux 块都是 1024 字节， 旧内核可能报告的块为 512 字节，2048 字节或 4096 字节&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry><entry><title type="html"></title><link href="http://172.17.73.80:4000/2023/01/13/tmpfiles.d_guide/" rel="alternate" type="text/html" title="" /><published>2023-01-13T00:00:00+08:00</published><updated>2023-01-13T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/01/13/tmpfiles.d_guide</id><content type="html" xml:base="http://172.17.73.80:4000/2023/01/13/tmpfiles.d_guide/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;在产品web login后，/tmp/sessions目录莫名被删，导致再次登录web无此目录，引发登录失败问题。
最终定位到产品在清理/tmp files存在使用上的问题，误删除了此目录。&lt;/p&gt;

&lt;p&gt;本文引述他人翻译，介绍tmpfiles.d&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;http://www.jinbuguo.com/systemd/tmpfiles.d.html&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry><entry><title type="html">CentOS下安装wareshark</title><link href="http://172.17.73.80:4000/2023/01/09/Install_wireshare_in_CentOS/" rel="alternate" type="text/html" title="CentOS下安装wareshark" /><published>2023-01-09T00:00:00+08:00</published><updated>2023-01-09T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/01/09/Install_wireshare_in_CentOS</id><content type="html" xml:base="http://172.17.73.80:4000/2023/01/09/Install_wireshare_in_CentOS/">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;How to install wireshare in CentOS? This document briefly describes it.&lt;/p&gt;

&lt;h1 id=&quot;installation-on-centos&quot;&gt;Installation on CentOS&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;yum install gcc gcc-c++ bison flex libpcap-devel qt-devel gtk3-devel rpm-build libtool c-ares-devel qt5-qtbase-devel qt5-qtmultimedia-devel qt5-linguist desktop-file-utils
yum install wireshark wireshark-qt
yum install wireshark-gnome
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动:在Application/internet下。&lt;/p&gt;

&lt;p&gt;启动后提示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Couldn't run /usr/sbin/dumpcap in child process: Permission denied

Are you member of 'wireshark' group? Try running 'usermod -a -G wireshark &amp;lt;username&amp;gt;' as root.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时，也沒有interface列出來。&lt;/p&gt;

&lt;p&gt;按照提示增加普通使用者到组以后，还是提示许可证问题。&lt;/p&gt;

&lt;p&gt;于是，將/usr/sbin/dumpcap的组改为普用使用者的组，再执行，沒有那个提示了，但是还是沒有interface列出來。&lt;/p&gt;

&lt;p&gt;workaround&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@pool-100-0-1-54 windipv6]# sudo usermod -a -G wireshark windipv6

setcap cap_net_raw,cap_net_admin+eip /usr/sbin/dumpcap

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reference Link:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://linuxtechlab.com/install-wireshark-linux-centosubuntu/&lt;/code&gt;&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><category term="wireshark" /><summary type="html">Overview</summary></entry><entry><title type="html">借助lftp从SFTP Server下载ISO</title><link href="http://172.17.73.80:4000/2023/01/09/Sync_ISO_from_SFTP_Server/" rel="alternate" type="text/html" title="借助lftp从SFTP Server下载ISO" /><published>2023-01-09T00:00:00+08:00</published><updated>2023-01-09T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2023/01/09/Sync_ISO_from_SFTP_Server</id><content type="html" xml:base="http://172.17.73.80:4000/2023/01/09/Sync_ISO_from_SFTP_Server/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;之前一直提供的是ssh 协议下远程sync ISO，当时借助的是scp来copy，但受限于网络带宽的限制，两地sync速度太慢。
后台更换了公网IP下的SFTP Server，理论带宽是120Mib/s，所以此次输出sftp sync ISO script， mark之.&lt;/p&gt;

&lt;h1 id=&quot;shell-code&quot;&gt;SHELL Code&lt;/h1&gt;

&lt;p&gt;需要先安装lftp.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;说明:&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;需要先安装lftp.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root@apidoc:~$ cat sftp_iso.sh 
#!/bin/bash

if [ ! -n &quot;$3&quot; ] ;
then
    echo -e &quot;\033[33musage: sftp_iso.sh [scaler/converger/cone] [centos7/xenial/cone] [version]&quot;
    exit 0
fi

sftp_host=&quot;ftp-server-ip or domain name&quot;
sftp_user=&quot;ftp-user-name&quot;
sftp_password=&quot;ftp-user-password&quot;
sftp_port=22
log_file=&quot;/var/log/sftp_sync_is.log&quot;

product=$1
product_type=$2
product_version=$3

case $product in
         scaler | converger | cone)
           current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
           echo -e &quot;\n======================================================  [${current_time}]  =================================================&quot; | tee -a ${log_file}
           echo -e &quot;[${current_time}]  Product is $product.&quot; | tee -a ${log_file}
         ;;
         *)
           echo &quot;[${current_time}]  [ERROR]  Product must be scaler/converger/cone, script exits!&quot;
           exit 1
         ;;
esac


case ${product_version} in
         8.0 | 8.2 | 8.3 | 1.0 | 1.2 | 1.2_oem_putian | 1.2_oem_fiberhome | 1.2_oem_thinkingdata | 1.2_oem_xinzhe | 1.2_oem_xinzhe_dark | 1.3 | 1.3_oem_fiberhome | 1.3_oem_thinkingdata | 1.4 | 1.4_oem_daasbank | 2.1 | 8.0_oem_fiberhome | 8.0_oem_putian | 8.2_oem_thinkingdata | 8.2_oem_fiberhome | 8.2_oem_chaoyun | 8.0_oem_hygon | 8.0_oem_srie)
           current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
           echo -e &quot;[${current_time}]  Version is ${product_version}&quot; | tee -a ${log_file}
         ;;
         *)
           echo -e &quot;\033[31mVersion must be 8.0 8.2 8.3 1.2 1.2_oem_putian 1.2_oem_fiberhome 1.2_oem_thinkingdata 1.2_oem_xinzhe 1.2_oem_xinzhe_dark 1.3 1.3_oem_fiberhome 1.3_oem_thinkingdata 1.4 1.4_oem_daasbank 8.0_oem_fiberhome 8.0_oem_putian 8.2_oem_thinkingdata 8.2_oem_fiberhome 8.2_oem_chaoyun 8.0_oem_hygon 8.0_oem_srie, script exits!!! &quot;
           exit 6
         ;;
esac


function check_mount_point(){
    if [ ! -d &quot;$1&quot; ]; then
        echo -e &quot;[ERROR]  Path : ($1 not exist, exit!!!) &quot;
        exit 2
    else
       mnt_res=`mountpoint $1`
       if [[ ${mnt_res} =~ &quot;is not a&quot; ]]; then
           echo -e &quot;[ERROR]  Path : ($1) is not a mountpoint, exit!!! &quot;
           exit 3
       fi
    fi
}


function iso_download()
{
    list_build_id_res=&quot;/tmp/ls_build_id.output&quot;
    list_builds_res=&quot;/tmp/ls_builds.output&quot;

    if [ X${product} = X&quot;scaler&quot; ]; then
        if [ X${product_version} = X&quot;8.0&quot; ]; then
            remote_path=&quot;scaler/virtualstor_8.0/builds&quot;
            if [ X${product_type} = X'xenial' ]; then
                mnt_path=&quot;/mnt/xenial/8.0&quot;
                local_path=&quot;${mnt_path}/scaler&quot;
            elif [ X${product_type} = X'centos7' ]; then
                mnt_path=&quot;/mnt/centos7/8.0&quot;
                local_path=&quot;${mnt_path}/scaler&quot;
            fi
            check_mount_point ${mnt_path}
        elif [ X${product_version} = X&quot;8.2&quot; ]; then
            remote_path=&quot;scaler/virtualstor_8.2/builds&quot;
            if [ X${product_type} = X'xenial' ]; then
                mnt_path=&quot;/mnt/xenial/8.2&quot;
                local_path=&quot;${mnt_path}/scaler&quot;
            elif [ X${product_type} = X'centos7' ]; then
                mnt_path=&quot;/mnt/centos7/8.2&quot;
                local_path=&quot;${mnt_path}/scaler&quot;
            fi
            check_mount_point ${mnt_path}
        elif [ X${product_version} = X&quot;8.3&quot; ]; then
            remote_path=&quot;scaler/virtualstor_8.3/builds&quot;
            if [ X${product_type} = X'xenial' ]; then
                mnt_path=&quot;/mnt/xenial/8.3&quot;
                local_path=&quot;${mnt_path}/scaler&quot;
            elif [ X${product_type} = X'centos7' ]; then
                mnt_path=&quot;/mnt/centos7/8.3&quot;
                local_path=&quot;${mnt_path}/scaler&quot;
            fi
            check_mount_point ${mnt_path}
        fi
    fi

    if [ X${product} = X&quot;cone&quot; ]; then
        if [ X${product_version} = X&quot;1.0&quot; ]; then
            remote_path=&quot;cone/virtualstor_converger_one_1.0/builds&quot;
            mnt_path=&quot;/mnt/cone/1.0&quot;
            local_path=&quot;${mnt_path}/cone&quot;
            check_mount_point ${mnt_path}
        elif [ X${product_version} = X&quot;1.2&quot; ]; then
            remote_path=&quot;cone/virtualstor_converger_one_1.2/builds&quot;
            mnt_path=&quot;/mnt/cone/1.2&quot;
            local_path=&quot;${mnt_path}/cone&quot;
            check_mount_point ${mnt_path}
        elif [ X${product_version} = X&quot;1.3&quot; ]; then
            remote_path=&quot;cone/virtualstor_converger_one_1.3/builds&quot;
            mnt_path=&quot;/mnt/cone/1.3&quot;
            local_path=&quot;${mnt_path}/cone&quot;
            check_mount_point ${mnt_path}
        elif [ X${product_version} = X&quot;1.4&quot; ]; then
            remote_path=&quot;cone/virtualstor_converger_one_1.4/builds&quot;
            mnt_path=&quot;/mnt/cone/1.4&quot;
            local_path=&quot;${mnt_path}/cone&quot;
            check_mount_point ${mnt_path}
        elif [ X${product_version} = X&quot;2.1&quot; ]; then
            remote_path=&quot;cone/virtualstor_converger_one_2.1/builds&quot;
            mnt_path=&quot;/mnt/cone/2.1&quot;
            local_path=&quot;${mnt_path}/cone&quot;
            check_mount_point ${mnt_path}
        fi
    fi

    current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
    echo -e &quot;[${current_time}]  Will to get latest ISO file for : (${product} ${product_version} ${product_type}) from remote path : (${remote_path})&quot; | tee -a ${log_file}

    # If file exist, delete it first
    if [ ! -f &quot;${list_build_id_res}&quot; ]; then
        rm -rf ${list_build_id_res}
    fi

    lftp sftp://${sftp_user}:${sftp_password}@${sftp_host} -e &quot;ls ${remote_path} | grep -v latest; bye&quot; | tee ${list_build_id_res}
    if [ ! -f &quot;${list_build_id_res}&quot; ]; then
        current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
        echo -e &quot;[${current_time}]  [ERROR]  Not get build id info to local, please to check lftp command, exit!!!&quot; | tee -a ${log_file}
        exit 4
    fi

    latest_build_id=`awk '{print $NF}' ${list_build_id_res} | grep -v '\.' | sort -nr | head -n1`
    latest_build_id=${latest_build_id//$'\r'}
    current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
    echo -e &quot;[${current_time}]  Latest Build id : ${latest_build_id}&quot; | tee -a ${log_file}

    # If builds info of file exist, delete it
    if [ -f &quot;${list_builds_res}&quot; ]; then
        rm -rf ${list_builds_res}
    fi

    lftp sftp://${sftp_user}:${sftp_password}@${sftp_host} -e &quot;ls ${remote_path}/${latest_build_id}; bye&quot; | tee ${list_builds_res}
    
    if [ ! -f &quot;${list_builds_res}&quot; ]; then
        current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
        echo -e &quot;[${current_time}]  [ERROR]  Not get builds info to local, please to check lftp command, exit!!!&quot; | tee -a ${log_file}
        exit 5
    fi

    if [ X${product_type} = X&quot;cone&quot; ]; then
        if [[ X${product_version} = X&quot;1.4&quot; ]]; then
            current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
            echo -e &quot;[${current_time}]  ConevergerOne Product and version is 1.4&quot; | tee -a ${log_file}
            build_day_str_lines=`cat ${list_builds_res} | awk '{{print $NF}}' | grep iso | awk -F '~' '{{print $2}}' | uniq | cut -b 1-8 | uniq | awk '{print NF}'`
            build_day_str=`cat ${list_builds_res} | awk '{{print $NF}}' | grep iso | awk -F '~' '{{print $2}}' | uniq | cut -b 1-8 | uniq`
        elif [[ X${product_version} &amp;gt; X&quot;2.0&quot; ]]; then
            current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
            echo -e &quot;[${current_time}]  ConevergerOne Product and version is &amp;gt;= 2.1&quot; | tee -a ${log_file}
            build_day_str_lines=`cat ${list_builds_res} | awk '{{print $NF}}' | grep iso | awk -F '-' '{{print $6}}' | uniq | cut -b 1-8 | uniq | awk '{print NF}'`
            build_day_str=`cat ${list_builds_res} | awk '{{print $NF}}' | grep iso | awk -F '-' '{{print $6}}' | uniq | cut -b 1-8 | uniq`
        else
            current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
            echo -e &quot;[${current_time}]  ConevergerOne Product and version is &amp;lt;=1.3&quot; | tee -a ${log_file}
            build_day_str_lines=`cat ${list_builds_res} | grep iso | awk '{{print $NF}}' | awk -F '~' '{{print $2}}' | cut -b 1-8 | uniq | awk '{print NF}'`
            build_day_str=`cat ${list_builds_res} | grep iso | awk '{{print $NF}}' | awk -F '~' '{{print $2}}' | cut -b 1-8 | uniq`
        fi
    else
        current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
        echo -e &quot;[${current_time}]  Scaler Product&quot; | tee -a ${log_file}
        build_day_str_lines=`cat ${list_builds_res} | grep iso | awk '{{print $NF}}' | awk -F '~' '{{print $2}}' | cut -b 1-8 | uniq | awk '{print NF}'`
        build_day_str=`cat ${list_builds_res} | grep iso | awk '{{print $NF}}' | awk -F '~' '{{print $2}}' | cut -b 1-8 | uniq`
    fi

    if [[ ${build_day_str_lines} -gt 1 ]]; then
        current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
        echo -e &quot;[${current_time}]  [ERROR]  Find different days from path of ($(remote_path)), exit!!!&quot; | tee -a ${log_file}
        echo -e &quot;[Debug] ${build_day_str}&quot; | tee -a ${log_file}
        exit 6
    fi

    # build_day_str, like this: 20230106
    year=`echo ${build_day_str} | cut -b 1-4`
    month=`echo ${build_day_str} | cut -b 5-6`
    day=`echo ${build_day_str} | cut -b 7-8`
    daily_folder=&quot;${year}-${month}-${day}&quot;
    if [[ ${daily_folder} =~ &quot;--&quot; ]]; then
        current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
        echo -e &quot;[${current_time}]  [ERROR]  Wrong type of daily folder name, exit!!!&quot;
        exit 7
    fi

    if [ ! -d &quot;${local_path}/${daily_folder}&quot; ]; then
        current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
        echo -e &quot;[${current_time}]  Local path has no folder of ${local_path}/${daily_folder}, now create it&quot; | tee -a ${log_file}
        mkdir -p ${local_path}/${daily_folder}
    fi

    # If local path has the file, which size and build id same as remote, skip to sync
    if [ X${product_type} = X&quot;cone&quot; ]; then
        product_type=&quot;ConvergerOne&quot;
    fi
    remote_iso_name=`cat ${list_builds_res} | grep -i iso | grep -vi md5 | grep -i ${product_type} | awk '{{print $9, $10}}'`
    remote_iso_name=`echo ${remote_iso_name} | sed -e 's/^[ \t]*//g'`
    array=(${remote_iso_name// / })
    if [[ ${#array[@]} -gt 1 &amp;amp;&amp;amp; ${remote_iso_name} =~ &quot;ConvergerOne&quot; ]]; then
        # If has more than one ISO under remote folder
        for var in ${array[@]}
            do
                remote_iso_size=`cat ${list_builds_res} | grep ${var} | grep -v md5 | grep -i ${product_type} | awk '{{print $5}}'`
                local_iso_size=`ls -l ${local_path}/${daily_folder} | grep -vi md5 | grep -vi total | grep ${var} | awk '{{print $5}}'`
                if [ X${remote_iso_size} = X${local_iso_size} ]; then
                    current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
                    echo -e &quot;[${current_time}]  [SKIP]  Has been synced ISO : (${remote_path}/${latest_build_id}/${var}) to (${local_path}/${daily_folder})&quot; | tee -a ${log_file}
                else
                    current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
                    echo -e &quot;[${current_time}]  Start to get ISO :(${remote_path}/${latest_build_id}/${var}) to : (${local_path}/${daily_folder}) at backend&quot; | tee -a ${log_file}
                    lftp sftp://${sftp_user}:${sftp_password}@${sftp_host} -e &quot;lcd ${local_path}/${daily_folder};reget '${remote_path}/${latest_build_id}/${var}'; bye&quot;&amp;amp;
                    wait
                    current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
                    echo -e &quot;[${current_time}]  End to get ISO :(${remote_path}/${latest_build_id}/${var}) to : (${local_path}/${daily_folder})&quot; | tee -a ${log_file}
                    # lftp sftp://${sftp_user}:${sftp_password}@${sftp_host} -e &quot;lcd ${local_path}/${daily_folder};reget '${remote_path}/${latest_build_id}/${var}'; bye&quot;
                fi
            done
    else
        # Only one ISO under the remote folder
        remote_iso_size=`cat ${list_builds_res} | grep iso | grep -v md5 | grep -i ${product_type} | awk '{{print $5}}'`
        local_iso_size=`ls -l ${local_path}/${daily_folder} | grep -vi md5 | grep -vi total | grep ${latest_build_id} | awk '{{print $5}}'`
        # remote_iso_name=${remote_iso_name//$'\r'}
        # remote_iso_size=${remote_iso_size//$'\r'}
        # local_iso_size=${local_iso_size//$'\r'}
        if [[ X${remote_iso_size} = X${local_iso_size} ]]; then
            current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
            echo -e &quot;[${current_time}]  [SKIP]  Has been synced ISO : (${remote_path}/${latest_build_id}/${remote_iso_name}) to (${local_path}/${daily_folder})&quot; | tee -a ${log_file}
        else
            current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
            echo -e &quot;[${current_time}]  Start to get ISO :(${remote_path}/${latest_build_id}/${remote_iso_name}) to : (${local_path}/${daily_folder}) at backend&quot; | tee -a ${log_file}
            lftp sftp://${sftp_user}:${sftp_password}@${sftp_host} -e &quot;lcd ${local_path}/${daily_folder};reget '${remote_path}/${latest_build_id}/${remote_iso_name}'; bye&quot;&amp;amp;
            wait
            current_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`
            echo -e &quot;[${current_time}]  End to synced ISO : (${remote_path}/${latest_build_id}/${remote_iso_name}) to (${local_path}/${daily_folder})&quot; | tee -a ${log_file}
            # lftp sftp://${sftp_user}:${sftp_password}@${sftp_host} -e &quot;lcd ${local_path}/${daily_folder};reget '${remote_path}/${latest_build_id}/${remote_iso_name}'; bye&quot;
        fi
    fi
}


iso_download

# function iso_download()
# {
#     expect &amp;lt;&amp;lt;- EOF
#     set timeout 1800
#     spawn sftp -P $sftp_port $sftp_user@$sftp_host
# 
#     expect { 
#         &quot;(yes/no)?&quot; {send &quot;yes\r&quot;; expect_continue }
#         &quot;*assword:&quot; {send &quot;$sftp_password\r&quot;}
#     }
#     expect &quot;sftp&amp;gt;&quot;
#     send &quot;cd $sftpLoadPath \r&quot;
#     expect &quot;sftp&amp;gt;&quot;
#     send &quot;lcd $myDir \r&quot;
#     expect &quot;sftp&amp;gt;&quot;
#     set timeout -1
#     send &quot;reget $fileFilter \r&quot;
#     expect &quot;sftp&amp;gt;&quot;
#     send &quot;bye\r&quot;
# EOF
# }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;额外补充&quot;&gt;额外补充&lt;/h1&gt;

&lt;p&gt;这里有一个当时碰到的问题，就是如何同remote端目录结构下最后一个Build ID，当时有参考：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;https://stackoverflow.com/questions/49678020/how-to-get-the-latest-file-from-sftp-folder
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然没有使用到，但这里mark一下，防止未来有碰到类似状况需要这篇文章中的操作指令。&lt;/p&gt;

&lt;p&gt;最后自己的解决方法是整个list出来到本次文件，从本地文件中grep出来。&lt;/p&gt;</content><author><name>Gavin</name></author><category term="Linux" /><category term="lftp" /><category term="sftp" /><summary type="html">概述</summary></entry><entry><title type="html">修改主机名</title><link href="http://172.17.73.80:4000/2022/12/28/Modify_hostname/" rel="alternate" type="text/html" title="修改主机名" /><published>2022-12-28T00:00:00+08:00</published><updated>2022-12-28T00:00:00+08:00</updated><id>http://172.17.73.80:4000/2022/12/28/Modify_hostname</id><content type="html" xml:base="http://172.17.73.80:4000/2022/12/28/Modify_hostname/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;2022年就这么结束了，一年没什么输出，凑个数收个尾，简单mark下Ubuntu下如何更改主机名……&lt;/p&gt;

&lt;h1 id=&quot;实作&quot;&gt;实作&lt;/h1&gt;

&lt;h2 id=&quot;方法1-热改&quot;&gt;方法1： 热改&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; hostname new_host_name
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简单粗暴有效，重启机器失效。&lt;/p&gt;

&lt;p&gt;方法2： 永久修改&lt;/p&gt;

&lt;p&gt;方案1: 热改+静态配置文件的修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;vim /etc/hosts
vim /etc/hostname
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; hostname new_host_name
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经过上述步骤后，下次重启永久生效&lt;/p&gt;

&lt;p&gt;方案2：hostnamectl 指令修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;hostnamectl set-hostname {name}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gavin</name></author><category term="Linux" /><summary type="html">概述</summary></entry></feed>